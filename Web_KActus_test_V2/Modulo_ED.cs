using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Input;
using System.Windows.Forms;
using System.Drawing;
using OpenQA.Selenium.Chrome;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using System.Data;
using DocumentFormat.OpenXml.Office2010.ExcelAc;
using APITest;
using Keys = OpenQA.Selenium.Keys;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;

namespace Web_Kactus_Test_V2
{
    /// <summary>
    /// Descripción resumida de SelfServices
    /// </summary>

    [TestClass]
    public class Modulo_ED : FuncionesVitales
    {

        string Modulo = "Modulo_ED";
        string app = "SmartPeople";

        APISelenium selenium = new APISelenium();
        APIFuncionesVitales fv = new APIFuncionesVitales();
        APIDatabase db = new APIDatabase();

        public Modulo_ED()
        {

        }


        [TestMethod]
        public void ED_RegistroAceptaciónReformulación()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_RegistroAceptaciónReformulación")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["ParaMeta"].ToString().Length != 0 && rows["ParaMeta"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string ParaMeta = rows["ParaMeta"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = 1005 and ANO_OMET = 2018";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = 202020";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = 202020";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 9 and ACT_USUA ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = 2 and ANO_OMET = 2018";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = 193454";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = 193454";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 421 and ACT_USUA ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }


                                    //INGRESO A ENVALUACION DE OBJETIVOS ACEPTACION DE LA REFORMULACION
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Aceptación de la Reformulación')]");
                                    selenium.Click("//a[contains(.,'Aceptación de la Reformulación')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Aceptación de la Reformulación", true, file);

                                    try
                                    {
                                        if (selenium.ExistControl("//*[@id=\'ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\']"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//*[@id=\'ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\']");
                                            Thread.Sleep(500);
                                            selenium.Screenshot("Detalles Aceptación de la Reformulación", true, file);

                                            Thread.Sleep(500);

                                            //OBSERVACIONES
                                            selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']")));
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //ACEPTAR REFORMULACION
                                            selenium.Click("//input[contains(@id,'btnAcepto')]");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Aceptación Reformulación", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Reformulación Aceptada con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            selenium.Screenshot("Sin datos de reformulacion", true, file);
                                        }

                                    }
                                    catch (Exception e)
                                    {

                                        continue;
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void ED_RegistroFormulaciónObjetivos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_RegistroFormulaciónObjetivos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Perspectiva"].ToString().Length != 0 && rows["Perspectiva"].ToString() != null &&
                                rows["Estrategico"].ToString().Length != 0 && rows["Estrategico"].ToString() != null &&
                                rows["Areas"].ToString().Length != 0 && rows["Areas"].ToString() != null &&
                                rows["Indicador"].ToString().Length != 0 && rows["Indicador"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string Perspectiva = rows["Perspectiva"].ToString();
                                string Estrategico = rows["Estrategico"].ToString();
                                string Areas = rows["Areas"].ToString();
                                string Indicador = rows["Indicador"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //Parametrización de Formulación Metas para el usuario 
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'F' where COD_EMPL = 202020";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        Thread.Sleep(2000);
                                        string actualizar2 = $"update ED_FORMU set FEC_FINA = '31/12/2025' WHERE RMT_OMET = 1005";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'F' where COD_EMPL = 193454";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        Thread.Sleep(2000);
                                        string actualizar2 = $"update ED_FORMU set FEC_FINA = '31/12/2025' WHERE RMT_OMET = 2";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        Thread.Sleep(2000);
                                    }
                                    //INGRESO A FORMULACION DE OBJETIVOS
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Click("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Screenshot("Formulación de objetivos", true, file);
                                    Thread.Sleep(1000);
                                    //DETALLE
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\"]");
                                    Thread.Sleep(1000);
                                    //BORRAR FORMULACIONES
                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i"))
                                    {
                                        for (int i = 0; i < 3; i++)
                                        {
                                            if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i"))
                                            {
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                selenium.Click("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(3000);
                                                selenium.AcceptAlert();
                                                Thread.Sleep(3000);
                                                if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                                {
                                                    selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                                    Thread.Sleep(2000);
                                                }
                                            }

                                        }
                                    }
                                    //INGRESO A FORMULACION DE OBJETIVOS
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Click("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Screenshot("Formulación de objetivos", true, file);
                                    Thread.Sleep(1000);
                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                    {
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1000);

                                        for (int i = 0; i < 3; i++)
                                        {
                                            //PERSPECTIVA
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_PERS']", Perspectiva);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Perspectiva ", true, file);
                                            //ESTRATEGICO
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_OBES']", Estrategico);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Estrategico ", true, file);
                                            //AREAS
                                            selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConsulNomObar']");
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsulNomObar']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Áreas ", true, file);
                                            Thread.Sleep(2000);
                                            selenium.Click("//a[@id='ctl00_ContentPopapModel_dgObjArea_ctl03_LinkButton2']");
                                            //META INDIVIDUAL
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KtxtDesMeta_txtTexto']");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KtxtDesMeta_txtTexto']", "Metas Individuales");
                                            Thread.Sleep(2000);
                                            //INDICADOR
                                            selenium.Scroll("//*[@id='ctl00_ContenidoPagina_COD_INDI']");
                                            Thread.Sleep(2000);
                                            selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_COD_INDI']", Indicador);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Indicador ", true, file);
                                            //SEGUIMIENTO DATOS
                                            selenium.Scroll("//*[@id='ctl00_ContenidoPagina_PRO_PTRI']");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_PRO_PTRI']", "10");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_PRO_STRI']", "20");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_PRO_TTRI']", "30");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_PRO_CTRI']", "40");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Datos Seguimiento ", true, file);

                                            if (i == 0)
                                            {
                                                selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_POR_PESO']", "50");
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Peso ", true, file);
                                                selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicar']");
                                                Thread.Sleep(2000);
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(1000);
                                                selenium.Screenshot("Aplicado ", true, file);
                                                Thread.Sleep(1000);
                                                
                                            }
                                            else
                                            {
                                                selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_POR_PESO']", "25");
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Peso ", true, file);
                                                selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicar']");
                                                Thread.Sleep(2000);
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(1000);
                                                selenium.Screenshot("Aplicado ", true, file);
                                                Thread.Sleep(1000);
                                                
                                            }

                                            selenium.Scroll("//select[@id='ctl00_ContenidoPagina_COD_PERS']");
                                        }

                                        //OBSERVACIONES
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", "PRUEBACALIDAD");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnEnvJefe']");
                                        //ENVIAR
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnEnvJefe')]");
                                        Thread.Sleep(3000);
                                        Screenshot("Registro Correcto", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(3000);
                                        Screenshot("Registro Exitoso", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_RegistroAnalisisEvaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_RegistroAnalisisEvaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Mejoras"].ToString().Length != 0 && rows["Mejoras"].ToString() != null &&
                                rows["Positivos"].ToString().Length != 0 && rows["Positivos"].ToString() != null &&
                                rows["Anometa"].ToString().Length != 0 && rows["Anometa"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Anometa = rows["Anometa"].ToString();
                                string Positivos = rows["Positivos"].ToString();
                                string Mejoras = rows["Mejoras"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE FROM ED_ANALI WHERE ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);

                                    //inicio
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//a[contains(.,'Análisis de Evaluación')]");
                                        selenium.Click("//a[contains(.,'Análisis de Evaluación')]");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//a[contains(.,'ANÁLISIS DE EVALUACIÓN')]");
                                        selenium.Click("//a[contains(.,'ANÁLISIS DE EVALUACIÓN')]");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Análisis de Evaluación", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAnoMeta']", Anometa);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Año de Evaluación", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtFacPosCo']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtFacPosCo']", Positivos);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Positivos", true, file);
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtFacNegCo']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtFacNegCo']", Mejoras);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mejoras", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuard']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuard']");
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//*[@id='ctl00_btnCerrar']"))
                                    {
                                        selenium.Click("//*[@id='ctl00_btnCerrar']");
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Análisis Evaluación Guardado", true, file);
                                    Thread.Sleep(10000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void ED_VisualizaciónEvaluaciónJefeRetroalimentaciónEvaluado()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VisualizaciónEvaluaciónJefeRetroalimentaciónEvaluado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                           

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null 

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Respuesta = rows["Respuesta"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string observacion = rows["observacion"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '2000' and tip_esca = '21'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212857";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                        string actualizar2 = $"UPDATE GD_PEMVE SET FEC_CALI='{date}' WHERE COD_EMPL='123'";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '20' and tip_esca = '5'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12113";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                        string actualizar2 = $"UPDATE GD_PEMVE SET FEC_CALI='{date}' WHERE COD_EMPL='19381173'";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("ROL LIDER", true, file);



                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro Calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);
                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", "123");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);

                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", "19381173");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                    }

                                    //EVALUACION LLENADO
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']",Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Diligenciar informacion", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Diligenciar informacion", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);

                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Aplicada", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //---------------------------------------------COLABORADOR RETROALIMENTACION----------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'EF Retroalimentacion Periodo de Prueba')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'EF Retroalimentacion Periodo de Prueba')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Retroalimentacion Prueba", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrEd3lica_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Retroalimentacion Prueba", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212857";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }
                                    else
                                    {
                                        
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12113";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InsercionEd3LicaRetroalimentacionPeriodoPrueba()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InsercionEd3LicaRetroalimentacionPeriodoPrueba")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Respuesta = rows["Respuesta"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string observacion = rows["observacion"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '2006' and tip_esca = '23'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=213857";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                        string actualizar2 = $"UPDATE GD_PEMVE SET FEC_CALI='{date}' WHERE COD_EMPL='123'";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        string actualizar3 = $"update ed_3lica set DES_EVEM = null where cod_empr = 9 and COD_EMPL = '123' and COD_TEVA = '2006'";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                        

                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '26' and tip_esca = '11'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12213";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                        string actualizar2 = $"UPDATE GD_PEMVE SET FEC_CALI='{date}' WHERE COD_EMPL='40045023'";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        string actualizar3 = $"update ed_3lica set DES_EVEM = null where cod_empr = 421 and COD_EMPL = '40045023' and COD_TEVA = '26'";
                                        db.UpdateDeleteInsert(actualizar3, database, user);
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("ROL LIDER", true, file);



                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro Calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser1);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Periodo Prueba", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser1);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Periodo Prueba", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion ", true, file);

                                    //EVALUACION LLENADO
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Diligenciar informacion", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Diligenciar informacion", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);

                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Aplicada", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //---------------------------------------------COLABORADOR RETROALIMENTACION----------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'EF Retroalimentacion Periodo de Prueba')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'EF Retroalimentacion Periodo de Prueba')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Retroalimentacion Prueba", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrEd3lica_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Retroalimentacion Prueba", true, file);

                                    //EXPLICACION
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", "De Acuerdo");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Explicacion Retroalimentacion Prueba", true, file);

                                    //APLICAR
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_btnAplicInf']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_btnAplicInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Retroalimentacion Prueba Aplicado", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void ED_VerEscalaCualitativaAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEscalaCualitativaAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Respuesta = rows["Respuesta"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);




                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");

                                    if (database == "SQL")
                                    {
                                        //buscar

                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa", true, file);
                                    }

                                    //EVALUACION LLENADO
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Cualitativa", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InsercionKEd3licaEvaluacionCualitativaAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InsercionKEd3licaEvaluacionCualitativaAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Respuesta = rows["Respuesta"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string observacion = rows["observacion"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);




                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa", true, file);
                                    }

                                    //EVALUACION LLENADO
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Cualitativa", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_ddlLista']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_ddlLista']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Cualitativa Visible", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_ddlLista']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_ddlLista']", Respuesta);
                                    Thread.Sleep(3000);

                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Cualitativa Aplicada Correctamente", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEscalaPorSeleccionAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEscalaPorSeleccionAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 9 and cod_teva = '2001' and tip_esca = '3'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,3,5,6,9,19,20,21) and RMT_LICA=212790";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 421 and cod_teva = '21' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (2,3,4,11,12,13) and RMT_LICA=12091";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Escala Por Seleccion Autoevaluacion", true, file);

                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InsercionKEd3licaEvaluacionPorSeleccionAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InsercionKEd3licaEvaluacionPorSeleccionAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 9 and cod_teva = '2001' and tip_esca = '3'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,3,5,6,9,19,20,21) and RMT_LICA=212790";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 421 and cod_teva = '21' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (2,3,4,11,12,13) and RMT_LICA=12091";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Escala Por Seleccion Autoevaluacion", true, file);

                                    if (database == "SQL")
                                    {
                                        //Diligenciar
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_chkSeleccion']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_chkSeleccion']");
                                        Thread.Sleep(3000); selenium.Screenshot("Registro Exitoso", true, file);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_chkSeleccion']");
                                        Thread.Sleep(6000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_chkSeleccion']");
                                        Thread.Sleep(3000); selenium.Screenshot("Registro Exitoso", true, file);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_chkSeleccion']");
                                        Thread.Sleep(6000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_chkSeleccion']");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Registro Exitoso", true, file);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Registro Exitoso", true, file);
                                    }
                                    else
                                    {
                                        //Diligenciar
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_chkSeleccion']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_chkSeleccion']");
                                        Thread.Sleep(3000); selenium.Screenshot("Registro Exitoso", true, file);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_chkSeleccion']");
                                        Thread.Sleep(6000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_chkSeleccion']");
                                        Thread.Sleep(3000); selenium.Screenshot("Registro Exitoso", true, file);
                                        Thread.Sleep(6000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Registro Exitoso", true, file);
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InsercionMasItemKEd3licaEvaluacionPorSeleccionAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InsercionMasItemKEd3licaEvaluacionPorSeleccionAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                string observacion = rows["observacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 9 and cod_teva = '2001' and tip_esca = '3'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,3,5,6,9,19,20,21) and RMT_LICA=212790";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 421 and cod_teva = '21' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (2,3,4,11,12,13) and RMT_LICA=12091";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);
                                    }
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Escala Por Seleccion Autoevaluacion", true, file);

                                    //DILIGENCIAR ENCUESTAS
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_chkSeleccion']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_chkSeleccion']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_chkSeleccion']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_chkSeleccion']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_chkSeleccion']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_chkSeleccion']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Diligenciar seleccion", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_chkSeleccion']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_chkSeleccion']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_chkSeleccion']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_chkSeleccion']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_chkSeleccion']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_chkSeleccion']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Diligenciar seleccion", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_chkSeleccion']");
                                        Thread.Sleep(6000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_chkSeleccion']");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl12_chkSeleccion']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl12_chkSeleccion']");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl13_chkSeleccion']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl13_chkSeleccion']");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Diligenciar seleccion", true, file);
                                    }


                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Mensaje Alerta mas de un item", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEscalaImagenAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEscalaImagenAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");


                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2002' and tip_esca = '4'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212825";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '23' and tip_esca = '7'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12106";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen", true, file);
                                    }
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Escala Imagen Autoevaluacion", true, file);

                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Imagen Autoevaluacion", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InsercionKEd3licaEvaluacionImagenAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InsercionKEd3licaEvaluacionImagenAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2002' and tip_esca = '4'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212825";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '23' and tip_esca = '7'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12106";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Escala Imagen Autoevaluacion", true, file);

                                    //DILIGENCIAR EVALUACION
                                    if (database == "SQL")
                                    {
                                        for (int i = 0; i < 5; i++)
                                        {
                                            selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Pregunta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_chkPregunta2']");
                                            Thread.Sleep(3000);
                                            selenium.Screenshot("Respuesta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//span[contains(.,'Guardar')]");
                                            Thread.Sleep(3000);

                                        }
                                        for (int i = 0; i < 5; i++)
                                        {
                                            selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Pregunta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_chkPregunta1']");
                                            Thread.Sleep(3000);
                                            selenium.Screenshot("Respuesta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//span[contains(.,'Guardar')]");
                                            Thread.Sleep(3000);

                                        }
                                    }
                                    else
                                    {
                                        for (int i = 0; i < 3; i++)
                                        {
                                            selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Pregunta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_chkPregunta2']");
                                            Thread.Sleep(3000);
                                            selenium.Screenshot("Respuesta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//span[contains(.,'Guardar')]");
                                            Thread.Sleep(3000);

                                        }
                                        for (int i = 0; i < 3; i++)
                                        {
                                            selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Pregunta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                            Thread.Sleep(3000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_chkPregunta1']");
                                            Thread.Sleep(3000);
                                            selenium.Screenshot("Respuesta", true, file);
                                            Thread.Sleep(3000);
                                            selenium.Click("//span[contains(.,'Guardar')]");
                                            Thread.Sleep(3000);

                                        }
                                    }
                                    
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Diligenciada", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void ED_VerPreguntasImagenAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerPreguntasImagenAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2002' and tip_esca = '4'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212825";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '23' and tip_esca = '7'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12106";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Preguntas Evaluacion Imagen", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEscalaColorAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEscalaColorAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2003' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=213001";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '24' and tip_esca = '8'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12081";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color", true, file);
                                    }
                                    selenium.ScrollTo("0", "300");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Escala Por Color Autoevaluacion", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InsercionKEd3licaEvaluacionColorAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InsercionKEd3licaEvaluacionColorAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                string observacion = rows["observacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2003' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=213001";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '24' and tip_esca = '8'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12081";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Escala Por Color Autoevaluacion", true, file);

                                    //diligenciar
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_B']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_B']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_C']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_C']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_D']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_D']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_D']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_D']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_C']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_C']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion diligenciada", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_B']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_B']");
                                    Thread.Sleep(3000);
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_A']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_A']");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_B']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_B']");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_C']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_C']");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_D']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_D']");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion diligenciada", true, file);

                                    }

                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Color Aplicada Correctamente", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerPreguntasColorAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerPreguntasColorAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2003' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=213001";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '24' and tip_esca = '8'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12081";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Preguntas Evaluacion Color Autoevaluacion", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerPreguntasPorSeleccionAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerPreguntasPorSeleccionAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 9 and cod_teva = '2001' and tip_esca = '3'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,3,5,6,9,19,20,21) and RMT_LICA=212790";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 421 and cod_teva = '21' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (2,3,4,11,12,13) and RMT_LICA=12091";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion seleccionada", true, file);

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion", true, file);
                                    }
                             
                                    Thread.Sleep(3000);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Preguntas Evaluacion Por Seleccion", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerPreguntasCualitativaAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerPreguntasCualitativaAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);




                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Preguntas Evaluacion Cualitativa", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEvaluacionCualitativaAutoevaluacionJefeParSubordinadoExterno()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEvaluacionCualitativaAutoevaluacionJefeParSubordinadoExterno")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string EmpleadoUser3 = rows["EmpleadoUser3"].ToString();
                                string EmpleadoPass3 = rows["EmpleadoPass3"].ToString();
                                string EmpleadoUser4 = rows["EmpleadoUser4"].ToString();
                                string EmpleadoPass4 = rows["EmpleadoPass4"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);




                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CL',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //-------------------------------------------------------AUTOEVALUACION------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Autoevaluacion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Autoevaluacion", true, file);
                                    }
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cualitativa Autoevaluacion", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------JEFE INMEDIATO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Jefe Inmediato", true, file);
                                        


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Jefe Inmediato", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cualitativa Jefe Inmediato", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();


                                    //----------------------------------------------------------------------SUBORDINADO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser2, EmpleadoPass2, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Subordinado", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Subordinado", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cualitativa Subordinado", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------PARES/COLEGAS------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser3, EmpleadoPass3, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Pares", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Pares", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cualitativa Pares", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();

                                    //---------------------------------------------------------------------EXTERNO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser4, EmpleadoPass4, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACION DE DESEMPEÑO 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Formulario Eval. Competencias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Externo", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cualitativa Externo", true, file);
                                    }


                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cualitativa Externo", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEvaluacionCuantitativaAutoevaluacionJefeParSubordinadoExterno()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEvaluacionCuantitativaAutoevaluacionJefeParSubordinadoExterno")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string EmpleadoUser3 = rows["EmpleadoUser3"].ToString();
                                string EmpleadoPass3 = rows["EmpleadoPass3"].ToString();
                                string EmpleadoUser4 = rows["EmpleadoUser4"].ToString();
                                string EmpleadoPass4 = rows["EmpleadoPass4"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");


                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //-------------------------------------------------------AUTOEVALUACION------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Autoevaluacion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Autoevaluacion", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Autoevaluacion", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------JEFE INMEDIATO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Jefe Inmediato", true, file);



                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Jefe Inmediato", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Jefe Inmediato", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------SUBORDINADO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser2, EmpleadoPass2, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Subordinado", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Subordinado", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Subordinado", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------PARES/COLEGAS------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser3, EmpleadoPass3, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Pares", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Pares", true, file);
                                    }



                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Pares", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //---------------------------------------------------------------------EXTERNO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser4, EmpleadoPass4, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACION DE DESEMPEÑO 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Formulario Eval. Competencias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Externo", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa Externo", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Externo", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEvaluacionPorSeleccionAutoevaluacionJefeParSubordinadoExterno()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEvaluacionPorSeleccionAutoevaluacionJefeParSubordinadoExterno")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string EmpleadoUser3 = rows["EmpleadoUser3"].ToString();
                                string EmpleadoPass3 = rows["EmpleadoPass3"].ToString();
                                string EmpleadoUser4 = rows["EmpleadoUser4"].ToString();
                                string EmpleadoPass4 = rows["EmpleadoPass4"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 9 and cod_teva = '2001' and tip_esca = '3'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,3,5,6,9,19,20,21) and RMT_LICA=212790";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'PS',tip_pepu = 'N',man_part = 'N' where cod_empr = 421 and cod_teva = '21' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (2,3,4,11,12,13) and RMT_LICA=12091";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //-------------------------------------------------------AUTOEVALUACION------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Autoevaluacion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Autoevaluacion", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Por Seleccion Autoevaluacion", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------JEFE INMEDIATO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Jefe Inmediato", true, file);



                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Jefe Inmediato", true, file);
                                    }


                                    selenium.Screenshot("Evaluacion Por Seleccion Jefe Inmediato", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------SUBORDINADO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser2, EmpleadoPass2, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Subordinado", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Subordinado", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Por Seleccion Subordinado", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
             

                                    //----------------------------------------------------------------------PARES/COLEGAS------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser3, EmpleadoPass3, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Pares", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Pares", true, file);
                                    }


                                    selenium.Screenshot("Evaluacion Por Seleccion Pares", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //---------------------------------------------------------------------EXTERNO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser4, EmpleadoPass4, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACION DE DESEMPEÑO 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Formulario Eval. Competencias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Externo", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Seleccion Externo", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Por Seleccion Externo", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEvaluacionPorImagenAutoevaluacionJefeParSubordinadoExterno()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEvaluacionPorImagenAutoevaluacionJefeParSubordinadoExterno")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string EmpleadoUser3 = rows["EmpleadoUser3"].ToString();
                                string EmpleadoPass3 = rows["EmpleadoPass3"].ToString();
                                string EmpleadoUser4 = rows["EmpleadoUser4"].ToString();
                                string EmpleadoPass4 = rows["EmpleadoPass4"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2002' and tip_esca = '4'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212825";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'IM',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '23' and tip_esca = '7'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12106";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //-------------------------------------------------------AUTOEVALUACION------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Autoevaluacion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Autoevaluacion", true, file);
                                    }

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Imagen Autoevaluacion", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Imagen Autoevaluacion", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------JEFE INMEDIATO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Jefe Inmediato", true, file);



                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Jefe Inmediato", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Imagen Jefe Inmediato", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Imagen Jefe Inmediato", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------SUBORDINADO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser2, EmpleadoPass2, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Subordinado", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Subordinado", true, file);
                                    }

                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Imagen Subordinado", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Imagen Subordinado", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------PARES/COLEGAS------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser3, EmpleadoPass3, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Pares", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Pares", true, file);
                                    }
                                    selenium.ScrollTo("0", "300");
                                    Thread.Sleep(3000);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Imagen Pares", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Imagen Pares", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //---------------------------------------------------------------------EXTERNO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser4, EmpleadoPass4, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACION DE DESEMPEÑO 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Formulario Eval. Competencias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Externo", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Imagen Externo", true, file);
                                    }
                                    selenium.ScrollTo("0", "300");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Evaluacion Imagen Externo", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_LinkButton1']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Imagen Externo", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    Thread.Sleep(5000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerEvaluacionPorColorAutoevaluacionJefeParSubordinadoExterno()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEvaluacionPorColorAutoevaluacionJefeParSubordinadoExterno")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string EmpleadoUser3 = rows["EmpleadoUser3"].ToString();
                                string EmpleadoPass3 = rows["EmpleadoPass3"].ToString();
                                string EmpleadoUser4 = rows["EmpleadoUser4"].ToString();
                                string EmpleadoPass4 = rows["EmpleadoPass4"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 9 and cod_teva = '2003' and tip_esca = '6'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=213001";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CC',for_caco='P',for_ttal='P' where cod_empr = 421 and cod_teva = '24' and tip_esca = '8'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (4,9,10,11,12,13) and RMT_LICA=12081";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //-------------------------------------------------------AUTOEVALUACION------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Autoevaluacion", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Autoevaluacion", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Color Autoevaluacion", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------JEFE INMEDIATO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Jefe Inmediato", true, file);



                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Jefe Inmediato", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Por Color Jefe Inmediato", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------SUBORDINADO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser2, EmpleadoPass2, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Subordinado", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Subordinado", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Por Color Subordinado", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //----------------------------------------------------------------------PARES/COLEGAS------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser3, EmpleadoPass3, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Pares", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Pares", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Por Color Pares", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //---------------------------------------------------------------------EXTERNO------------------------------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser4, EmpleadoPass4, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACION DE DESEMPEÑO 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Formulario Eval. Competencias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Externo", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Por Color Externo", true, file);
                                    }

                                    selenium.Screenshot("Evaluacion Por Color Externo", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    Thread.Sleep(5000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void ED_VerEscalaCuantitativaAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerEscalaCuantitativaAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");


                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa", true, file);
                                    }

                                    //ENCUESTA
                                    Thread.Sleep(6000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']", "20");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']", "20");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']", "20");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']", "40");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']", "50");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']", "90");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']", "50");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Escala Cuantitativa ", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InsercionKEd3licaEvaluacionCuantitativaAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InsercionKEd3licaEvaluacionCuantitativaAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string Respuesta3 = rows["Respuesta3"].ToString();
                                string observacion = rows["observacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");

                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa", true, file);
                                    }

                                    //ENCUESTA
                                    Thread.Sleep(6000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Diligenciada", true, file);

                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Cualitativa Aplicada Correctamente", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VisualizaciónInserciónEvaluadoFeedback()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VisualizaciónInserciónEvaluadoFeedback")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1= rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string Respuesta3 = rows["Respuesta3"].ToString();
                                string observacion = rows["observacion"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string CompromisoColaborador = rows["CompromisoColaborador"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '2005' and tip_esca = '22'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=213011";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 2043";
                                        db.UpdateDeleteInsert(Borrado, database, user);

                                        string updatefeedback = $"update ED_3LICC set JEF_CLAR=null, JEF_MOST=null where RMT_LICC='2043'";
                                        db.UpdateDeleteInsert(updatefeedback, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '25' and tip_esca = '9'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12115";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 2119";
                                        db.UpdateDeleteInsert(Borrado, database, user);

                                        string updatefeedback = $"update ED_3LICC set JEF_CLAR=null, JEF_MOST=null where RMT_LICC='2119'";
                                        db.UpdateDeleteInsert(updatefeedback, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("ROL LIDER", true, file);


                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro Calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Feedback", true, file);


                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Feedback", true, file);
                                    }

                                    //ENCUESTA
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Diligenciada", true, file);

                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Aplicada Correctamente", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    //---------------------------------------------------------------------COMPROMISOS-------------------------------------------------------------------


                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'EF Definición Planes de Desarrollo')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'EF Definición Planes de Desarrollo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);

                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//*[@id='tblListado']/tbody/tr/td[9]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='tblListado']/tbody/tr/td[9]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);

                                    //REGISTRO COMPROMISOS
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlAspEval']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlTxtDesComp_txtTexto']");
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlTxtDesComp_txtTexto']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Ingresado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);

                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //CERRAR CONCERTACION
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cerrar Concertacion", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(4000);
                                    Screenshot("Alerta Cerrado Concertacion", true, file);
                                    Thread.Sleep(4000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Proceso Terminado Correctamente", true, file);
                                    Thread.Sleep(4000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //-------------------------------------------------------COLABORADOR FEEDBACK--------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //Seguimiento de Compromisos
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Seguimiento de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Seguimiento de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seguimiento de Compromisos", true, file);

                                    //Compromisos
                                    selenium.Scroll("//*[@id='tblListado']/tbody/tr/td[6]/button");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seguimiento de Compromisos", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='tblListado']/tbody/tr/td[6]/button");

                                    ////Edicion compromiso
                                    //selenium.Scroll("//span[@id='ctl00_ContenidoPagina_lblDatosSolicitante']");
                                    //Thread.Sleep(2000);
                                    //selenium.Click("//span[@id='ctl00_ContenidoPagina_lblDatosSolicitante']");
                                    //Thread.Sleep(2000);
                                    //selenium.Screenshot("Edicion de Compromisos", true, file);
                                    //Thread.Sleep(2000);
                                    //selenium.Click("//a[@id='ctl00_ContenidoPagina_DgListado_ctl03_LinkButton1']/i");
                                    //Thread.Sleep(5000);
                                    

                                    ////Observaciones Compromisos
                                    //selenium.SendKeys("//textarea[@id='ctl00_ContentPopapModel_KCtrlTxtObsErvaAux_txtTexto']", CompromisoColaborador);
                                    //Thread.Sleep(2000);
                                    //selenium.Screenshot("Observaciones de Compromisos", true, file);
                                    //Thread.Sleep(2000);
                                    //selenium.Screenshot("Actualizacion de Compromiso", true, file);
                                    ////Actualizar

                                    //selenium.Click("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                    //Thread.Sleep(2000);
                                    

                                    //-----------------------------------------------------------------------Cierre de comprimisos Colaborador-----------------------------------------------------------------------

                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Cierre de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cierre de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cierre de Compromiso", true, file);

                                    //Detalle
                                    selenium.Scroll("//table[@id='tableEvaluaciones']/tbody/tr/td[9]/a/i");
                                    selenium.Click("//table[@id='tableEvaluaciones']/tbody/tr/td[9]/a/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Visualizacion Colaborador Compromiso", true, file);

                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_AceptaciónReformulación()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_AceptaciónReformulación")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["RMT_OMET"].ToString().Length != 0 && rows["RMT_OMET"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["ANO_OMET"].ToString().Length != 0 && rows["ANO_OMET"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string meta = rows["RMT_OMET"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string ano = rows["ANO_OMET"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '{meta}' and ANO_OMET = '{ano}'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '10002' and ANO_OMET = '2021'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }


                                    //INGRESO A ENVALUACION DE OBJETIVOS ACEPTACION DE LA REFORMULACION
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Aceptación de la Reformulación')]");
                                    selenium.Click("//a[contains(.,'Aceptación de la Reformulación')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Aceptación de la Reformulación", true, file);

                                   
                                        if (selenium.ExistControl("//*[@id=\'ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\']"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//*[@id=\'ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\']");
                                            Thread.Sleep(500);
                                            selenium.Screenshot("Detalles Aceptación de la Reformulación", true, file);

                                            Thread.Sleep(500);

                                            //OBSERVACIONES
                                            selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']")));
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //ACEPTAR REFORMULACION
                                            selenium.Click("//input[contains(@id,'btnAcepto')]");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Aceptación Reformulación", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Reformulación Aceptada con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de reformulacion");
                                        }


                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_AceptaciónFormulaciónMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_AceptaciónFormulaciónMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["RMT_OMET"].ToString().Length != 0 && rows["RMT_OMET"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["ANO_OMET"].ToString().Length != 0 && rows["ANO_OMET"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string meta = rows["RMT_OMET"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string ano = rows["ANO_OMET"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '{meta}' and ANO_OMET = '{ano}'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '10002' and ANO_OMET = '2021'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }

                                    //INGRESO A EVALUACION DE OBJETIVOS//ACEPTACION DE LA FORMULACION METAS
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'EF Aceptacion Formulacion de Metas')]");
                                    selenium.Click("//a[contains(.,'EF Aceptacion Formulacion de Metas')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Aceptación de la Formulación Metas", true, file);

                                   
                                        if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE FORMULACION METAS
                                            selenium.Click("//*[@id=\'ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\']");
                                            Thread.Sleep(1500);
                                            selenium.Screenshot("Detalles Aceptación de la Formulación", true, file);
                                            Thread.Sleep(1500);

                                            //OBSERVACIONES
                                            selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']")));
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //ACEPTAR FORMULACION
                                            selenium.Click("//input[contains(@id,'btnAcepto')]");
                                            Thread.Sleep(1500);
                                            Screenshot("Alerta Aceptación Reformulación", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Reformulación Aceptada con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de reformulacion");
                                        }

                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_AprobacionReformulaciónMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_AprobacionReformulaciónMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["RMT_OMET"].ToString().Length != 0 && rows["RMT_OMET"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["ANO_OMET"].ToString().Length != 0 && rows["ANO_OMET"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string meta = rows["RMT_OMET"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string ano = rows["ANO_OMET"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '{meta}' and ANO_OMET = '{ano}'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'A' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'A' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '10002' and ANO_OMET = '2021'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'A' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'A' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }

                                    //INGRESO A ENVALUACION DE OBJETIVOS ACEPTACION DE LA REFORMULACION
                                    //ROL LIDER
                                    selenium.Click("//span[@id='txtctl00_pLider']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'EF Aprobacion Reformulacion de Metas')]");
                                    selenium.Click("//a[contains(.,'EF Aprobacion Reformulacion de Metas')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Aprobación de la Reformulación", true, file);

                                      if (selenium.ExistControl("//*[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']");
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Detalles Aceptación de la Reformulación", true, file);
                                            Thread.Sleep(2500);

                                            //OBSERVACIONES
                                            selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            Thread.Sleep(2500);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //APROBAR REFORMULACION
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAproMet']");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Aprobación Reformulación", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Reformulación Aceptada con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                        Assert.Fail("No hay reformulaciones por aceptar");
                                        }

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_AprobacionFormulaciónMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_AprobacionFormulaciónMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["RMT_OMET"].ToString().Length != 0 && rows["RMT_OMET"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["ANO_OMET"].ToString().Length != 0 && rows["ANO_OMET"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string meta = rows["RMT_OMET"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string ano = rows["ANO_OMET"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '{meta}' and ANO_OMET = '{ano}'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'A' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'A' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = '10002' and ANO_OMET = '2021'";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'A' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'A' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }

                                    //INGRESO A ENVALUACION DE OBJETIVOS ACEPTACION DE LA REFORMULACION
                                    //ROL LIDER
                                    selenium.Click("//span[@id='txtctl00_pLider']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[5]/ul/li[10]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[5]/ul/li[10]/a");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Aprobación de la Reformulación", true, file);

                                   
                                        if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Detalles Aceptación de la Formulación", true, file);
                                            Thread.Sleep(2500);

                                            //OBSERVACIONES
                                            selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            Thread.Sleep(2500);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //APROBAR REFORMULACION
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAproMet']");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Aprobación Formulacion", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Formulacion Aceptada con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de reformulacion");
                                        }

                                    
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_FormulaciónObjetivosMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_FormulaciónObjetivosMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Perspectiva"].ToString().Length != 0 && rows["Perspectiva"].ToString() != null &&
                                rows["Estrategico"].ToString().Length != 0 && rows["Estrategico"].ToString() != null &&
                                rows["Areas"].ToString().Length != 0 && rows["Areas"].ToString() != null &&
                                rows["Indicador"].ToString().Length != 0 && rows["Indicador"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Perspectiva = rows["Perspectiva"].ToString();
                                string Estrategico = rows["Estrategico"].ToString();
                                string Areas = rows["Areas"].ToString();
                                string Indicador = rows["Indicador"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //Parametrización de Formulación Metas para el usuario 
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'F' where COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        Thread.Sleep(2000);
                                        string actualizar2 = $"update ED_FORMU set FEC_FINA = '31/12/2050' WHERE RMT_OMET = '1005'";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        Thread.Sleep(2000);
                                    }
                                    else if (database == "ORA")
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'F' where COD_EMPL = 193454";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        Thread.Sleep(2000);
                                        string actualizar2 = $"update ED_FORMU set FEC_FINA = '31/12/2025' WHERE RMT_OMET = 2";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        Thread.Sleep(2000);
                                    }

                                    //INGRESO A FORMULACION DE OBJETIVOS
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Click("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Screenshot("Formulación de objetivos", true, file);
                                    Thread.Sleep(1000);
                                    //DETALLE
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\"]");
                                    Thread.Sleep(1000);
                                    //BORRAR FORMULACIONES
                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i"))
                                    {
                                        for (int i = 0; i < 3; i++)
                                        {
                                            if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i"))
                                            {
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                selenium.Click("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(3000);
                                                selenium.AcceptAlert();
                                                Thread.Sleep(3000);
                                                if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                                {
                                                    selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                                }
                                            }
                                            
                                        }
                                    }
                                    //INGRESO A FORMULACION DE OBJETIVOS
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Click("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Screenshot("Formulación de objetivos", true, file);
                                    Thread.Sleep(1000);
                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                    {
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1000);

                                        for (int i = 0; i < 3; i++)
                                        {
                                            //PERSPECTIVA
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_PERS']", Perspectiva);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Perspectiva ", true, file);
                                            //ESTRATEGICO
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_OBES']", Estrategico);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Estrategico ", true, file);
                                            //AREAS
                                            selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConsulNomObar']");
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsulNomObar']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Áreas ", true, file);
                                            Thread.Sleep(2000);
                                            selenium.Click("//a[@id='ctl00_ContentPopapModel_dgObjArea_ctl03_LinkButton2']");
                                            //META INDIVIDUAL
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KtxtDesMeta_txtTexto']");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KtxtDesMeta_txtTexto']", "Metas Individuales");
                                            Thread.Sleep(2000);
                                            //INDICADOR
                                            selenium.Scroll("//*[@id='ctl00_ContenidoPagina_COD_INDI']");
                                            Thread.Sleep(2000);
                                            selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_COD_INDI']", Indicador);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Indicador ", true, file);
                                            //SEGUIMIENTO DATOS
                                            selenium.Scroll("//*[@id='ctl00_ContenidoPagina_PRO_PTRI']");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_PRO_PTRI']", "10");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_PRO_STRI']", "20");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_PRO_TTRI']", "30");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_PRO_CTRI']", "40");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Datos Seguimiento ", true, file);

                                            if (i == 0)
                                            {
                                                selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_POR_PESO']", "50");
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Peso ", true, file);
                                                selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicar']");
                                                Thread.Sleep(2000);
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(1000);
                                                selenium.Screenshot("Aplicado ", true, file);
                                                Thread.Sleep(1000);
                                                selenium.ScrollTo("0", "200");
                                            }
                                            else
                                            {
                                                selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_POR_PESO']", "25");
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Peso ", true, file);
                                                selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicar']");
                                                Thread.Sleep(2000);
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(1000);
                                                selenium.Screenshot("Aplicado ", true, file);
                                                Thread.Sleep(1000);
                                                selenium.ScrollTo("0", "200");
                                            }

                                            selenium.Scroll("//select[@id='ctl00_ContenidoPagina_COD_PERS']");
                                        }

                                        //OBSERVACIONES
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", "PRUEBACALIDAD");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnEnvJefe']");
                                        //ENVIAR
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnEnvJefe')]");
                                        Thread.Sleep(3000);
                                        Screenshot("Registro Correcto", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(3000);
                                        Screenshot("Registro Exitoso", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InformeComparaciónCompetenciasVsMetasObjetivos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InformeComparaciónCompetenciasVsMetasObjetivos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete(@"C:\Users\" + username + @"\Downloads\ReporteGenerado1.pdf");
                                    File.Delete(@"C:\Users\" + username + @"\Downloads\ReporteGenerado2.pdf");

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INFORME 
                                    //ROL LIDER
                                    selenium.Click("//span[@id='txtctl00_pLider']");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Informe de comparación por Competencias Vs Metas y Objetivos - Mapa de Talentos')]");
                                    selenium.Click("//a[contains(.,'Informe de comparación por Competencias Vs Metas y Objetivos - Mapa de Talentos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Informe de comparación por Competencias Vs Metas y Objetivos", true, file);
                                    Thread.Sleep(1000);
                                    //DETALLE
                                    selenium.Click("//*[@id='tableEmpleados']/tbody/tr/td[6]/a");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Detalle Informe", true, file);
                                    if (database == "SQL")
                                    {
                                        //REPORTE SIN CHECK
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_DtgFomeiR_ctl02_LinkButton1']/i");
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_DtgFomeiR_ctl02_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        //INFOME GENERADO
                                        selenium.Screenshot("Informe Generado", true, file);
                                        Thread.Sleep(2000);
                                        //GENERAR PDF
                                        selenium.Click("//a[@id='ctl00_btnImprimirPDFToolbar']");
                                        Thread.Sleep(20000);
                                        Screenshot("Imprimir PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{DOWN}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 6; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("ReporteGenerado1");
                                        Thread.Sleep(5000);
                                        Screenshot("Guardar", true, file);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        //REPORTE INDIVIDUAL
                                        selenium.Click("//a[@id='ctl00_btnRetornar']");
                                        Thread.Sleep(6000);

                                        //DETALLE
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Detalle Informe", true, file);

                                    }

                                    //REPORTE CHECK
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_DtgFomeiR_ctl02_ChkRegiFomei']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_DtgFomeiR_ctl02_ChkRegiFomei']");
                                    Thread.Sleep(2000);
                                    
                                    //INFOME GENERADO
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_DtgFomeiR_ctl02_LinkButton1']");
                                    selenium.Screenshot("Informe Generado", true, file);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_DtgFomeiR_ctl02_LinkButton1']");
                                    Thread.Sleep(2000);
                                    //GENERAR PDF
                                    selenium.Click("//a[@id='ctl00_btnImprimirPDFToolbar']");
                                    Thread.Sleep(20000);
                                    Screenshot("PDF", true, file);
                                    //GUARDAR PDF
                                   
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ReporteGenerado2");
                                    Thread.Sleep(5000);
                                    Screenshot("Guardar", true, file);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    if (database == "SQL")
                                    {
                                        //ABRIR PDF DESCARGADO 1
                                        string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\ReporteGenerado1.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(10000);
                                        Screenshot("PDF 1 ABIERTO", true, file);
                                    }
                                    
                                    //ABRIR PDF DESCARGADO 2
                                    string pdfPath1 = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\ReporteGenerado2.pdf");
                                    Process.Start(pdfPath1);
                                    Thread.Sleep(10000);
                                    Screenshot("PDF 2 ABIERTO", true, file);
                                    Thread.Sleep(6000);
                                    Thread.Sleep(2000);
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_InformeMetasObjetivos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_InformeMetasObjetivos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ano = rows["ano"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete(@"C:\Users\"+username+@"\Downloads\Reportedesempenometas.pdf");
                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'T' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                    }
                                    else
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'T' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                    } 
                                    Thread.Sleep(2000);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A INFORME 
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul/li[8]/ul/li[16]/a");
                                    selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul/li[8]/ul/li[16]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Informe de Metas y Objetivos", true, file);
                                    Thread.Sleep(1000);
                                    //CHECK REPORTE DESEMPEÑO METAS
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkIndRep1']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Reporte Desempeño Metas", true, file);
                                    //AÑO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAnoMeta']", ano);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Año", true, file);
                                    //CONSULTAR
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    //CHECK EMPLEADO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgBiEmple_ctl02_chkSelEmpl']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgBiEmple_ctl02_chkSelEmpl']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empleado Consultado", true, file);
                                    //GENERAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGenerar']");
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Informe Generado", true, file);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(10000);
                                    Screenshot("Imprimir PDF", true, file);
                                    SendKeys.SendWait("{ESC}");
                                    Thread.Sleep(5000);
                                    //PDF
                                    selenium.Click("//a[@id='ctl00_btnImprimirPDFToolbar']");
                                    Thread.Sleep(10000);
                                    Screenshot("Descargar PDF", true, file);
                                    //ABRIR PDF DESCARGADO 
                                    string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\Reportedesempenometas.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(10000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_ReformulaciónMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_ReformulaciónMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["ruta"].ToString().Length != 0 && rows["ruta"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["TipoAdjunto"].ToString().Length != 0 && rows["TipoAdjunto"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string ruta = rows["ruta"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string TipoAdjunto = rows["TipoAdjunto"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'F' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '123'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'F' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    if (database == "ORA")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'F' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '40045023'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'F' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }

                                    //INGRESO A EVALUACION DE OBJETIVOS//REFOMRULACION METAS
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(@href, 'frmEdFomeiRFL.ASPX')]");
                                    selenium.Click("//a[contains(@href, 'frmEdFomeiRFL.ASPX')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Reformulación Metas y Objetivos", true, file);

                                    
                                        if (selenium.ExistControl("//*[@id='ctl00_ContenidoPagina_gvLista2_ctl03_LinkButton1']"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE FORMULACION METAS
                                            selenium.Click("//*[@id='ctl00_ContenidoPagina_gvLista2_ctl03_LinkButton1']");
                                            Thread.Sleep(1500);
                                            selenium.Screenshot("Detalles Reformulación", true, file);
                                            Thread.Sleep(1500);
                                            selenium.Scroll("//select[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']");
                                            Thread.Sleep(3000);
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']", TipoAdjunto);
                                            Thread.Sleep(5000);
                                            //OBSERVACIONES
                                            selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAdjuntar']");
                                            Thread.Sleep(3000);
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            Thread.Sleep(3000);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);
                                            Thread.Sleep(3000);
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(3000);
                                            //ENVIAR JEFE
                                            selenium.Scroll("//*[@id='ctl00_ContenidoPagina_btnEnvJefe']");
                                            Thread.Sleep(1500);
                                            selenium.Click("//*[@id='ctl00_ContenidoPagina_btnEnvJefe']");
                                            Thread.Sleep(1500);
                                            Screenshot("Alerta Reformulación", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Reformulación Registrada con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de reformulacion");
                                        }


                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_ReporteMetasIndividualesxEmpleado()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_ReporteMetasIndividualesxEmpleado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["ano"].ToString().Length != 0 && rows["ano"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string ano = rows["ano"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string username = Environment.UserName;
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete(@"C:\Users\" + username + @"\Downloads\ReporteMetasGenerado.pdf");

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A REPORTE METAS INDIVIDUALES POR EMPLEADO
                                    //ROL LIDER
                                    selenium.Click("//span[@id='txtctl00_pLider']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Reporte Metas Individuales x Empleados')]");
                                    selenium.Click("//a[contains(.,'Reporte Metas Individuales x Empleados')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Reporte Metas Individuales x Empleados", true, file);
                                    //AÑO A CONSULTAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtAño']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtAño']", ano);
                                    Thread.Sleep(1500);
                                    //CONSULTAR
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_btnConsulYea']/span");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro Consultado", true, file);

                                  
                                        if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl02_LinkButton1']/i"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE INFORME
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl02_LinkButton1']/i");
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Informe Generado", true, file);
                                            Thread.Sleep(2500);
                                            //IMPRIMIR
                                            Thread.Sleep(2500);
                                            selenium.Click("//a[@id='ctl00_btnImprimir']");
                                            Thread.Sleep(30000);
                                            Screenshot("Imprimir PDF", true, file);
                                            //GUARDAR PDF
                                            for (int i = 0; i < 5; i++)
                                            {
                                                SendKeys.SendWait("{TAB}");
                                                Thread.Sleep(1000);
                                            }

                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);
                                            SendKeys.SendWait("{DOWN}");
                                            Thread.Sleep(5000);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);

                                            for (int i = 0; i < 6; i++)
                                            {
                                                SendKeys.SendWait("{TAB}");
                                                Thread.Sleep(1000);
                                            }
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);
                                            SendKeys.SendWait("ReporteMetasGenerado");
                                            Thread.Sleep(5000);
                                            Screenshot("Guardar", true, file);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);

                                            //ABRIR PDF DESCARGADO 1
                                            string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\ReporteMetasGenerado.pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            Thread.Sleep(5000);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(5000);
                                            selenium.Close();


                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de reporte");
                                        }


                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                   
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_ReporteMetasIndividuales()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_ReporteMetasIndividuales")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete(@"C:\Users\" + username + @"\Downloads\ReporteMetasIndividualesGenerado.pdf");

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A REPORTE METAS INDIVIDUALES
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("(//a[contains(@href, 'frmEdFomeiRL.aspx')])[2]");
                                    selenium.Click("(//a[contains(@href, 'frmEdFomeiRL.aspx')])[2]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Reporte Metas Individuales", true, file);
                                   
                                        if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE INFORME
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Reporte Metas Individuales Generado", true, file);
                                            Thread.Sleep(2500);
                                            //IMPRIMIR
                                            Thread.Sleep(2500);
                                            selenium.Click("//a[@id='ctl00_btnImprimir']");
                                            Thread.Sleep(30000);
                                            Screenshot("Imprimir PDF", true, file);
                                            //GUARDAR PDF
                                            for (int i = 0; i < 5; i++)
                                            {
                                                SendKeys.SendWait("{TAB}");
                                                Thread.Sleep(1000);
                                            }

                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);
                                            SendKeys.SendWait("{DOWN}");
                                            Thread.Sleep(5000);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);

                                            for (int i = 0; i < 6; i++)
                                            {
                                                SendKeys.SendWait("{TAB}");
                                                Thread.Sleep(1000);
                                            }
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);
                                            SendKeys.SendWait("ReporteMetasIndividualesGenerado");
                                            Thread.Sleep(5000);
                                            Screenshot("Guardar", true, file);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(5000);

                                            //ABRIR PDF DESCARGADO 1
                                            string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\ReporteMetasIndividualesGenerado.pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            Thread.Sleep(5000);


                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de reporte");
                                        }

                                  
                                    Thread.Sleep(2000);
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_RatificacionFormulacionMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_RatificacionFormulacionMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string Empleado = rows["Empleado"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'R' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'R' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    if (database == "ORA")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'R' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'R' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }

                                    //INGRESO A Ratificacion Formulacion Metas
                                    //ROL LIDER
                                    selenium.Click("//span[@id='txtctl00_pLider']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(3000);
                                    if (database == "ORA")
                                    {
                                        selenium.Scroll("//a[contains(@href, 'frmLIEdFomeiTL.aspx')]");
                                        selenium.Click("//a[contains(@href, 'frmLIEdFomeiTL.aspx')]");
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Ratificacion Formulacion Metas", true, file);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul/li[5]/ul/li[11]/a");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul/li[5]/ul/li[11]/a");
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Ratificacion Formulacion Metas", true, file);
                                    }
                                    

                                        if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Detalles Ratificacion Formulacion Metas", true, file);
                                            Thread.Sleep(2500);

                                            //OBSERVACIONES
                                            selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            Thread.Sleep(2500);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //APROBAR METAS
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAproMet']");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Aceptacion Metas", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Ratificacion Formulacion Metas con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de Ratificacion Formulacion Metas");
                                        }

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_RatificacionEvaluacionMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_RatificacionEvaluacionMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string Empleado = rows["Empleado"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string url = rows["url"].ToString();
                                string dato1 = rows["dato1"].ToString();
                                string dato2 = rows["dato2"].ToString();
                                string dato3 = rows["dato3"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'V' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'V' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    if (database == "ORA")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'V' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'N' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'V' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }

                                    //INGRESO A Ratificacion Formulacion Metas
                                    //ROL LIDER
                                    selenium.Click("//span[@id='txtctl00_pLider']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[5]/ul/li[13]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[5]/ul/li[13]/a");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ratificacion Evaluacion Metas", true, file);

                                        if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                            Thread.Sleep(2500);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                            Thread.Sleep(2000);
                                        }
                                        Thread.Sleep(2000);
                                            selenium.Screenshot("Detalle Ratificacion Evaluacion Metas", true, file);
                                            Thread.Sleep(2500);

                                            //CALIFICAR METAS
                                            selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            Thread.Sleep(2500);
                                            //DATO 1
                                            //selenium.Click("//input[@id='ctl00_ContenidoPagina_gvLista_ctl02_EJE_CUTA']");
                                            Thread.Sleep(2500);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_gvLista_ctl02_EJE_CUTA']", dato1);
                                            //DATO 2
                                            //selenium.Click("//input[@id='ctl00_ContenidoPagina_gvLista_ctl03_EJE_CUTA']");
                                            Thread.Sleep(2500);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_gvLista_ctl03_EJE_CUTA']", dato2);
                                            //DATO 2
                                           // selenium.Click("//input[@id='ctl00_ContenidoPagina_gvLista_ctl04_EJE_CUTA']");
                                            Thread.Sleep(2500);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_gvLista_ctl04_EJE_CUTA']", dato3);
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Evaluacion Ingresada", true, file);
                                            //OBSERVACIONES
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Observaciones", true, file);
                                            //GUARDAR RATIFICACION
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_btnSolCali']");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Ratificacion Metas", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Ratificacion Evaluacion Metas con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de Ratificacion Evaluacion Metas");
                                        }


                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_RatificacionReformulacionMetas()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_RatificacionReformulacionMetas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string Empleado = rows["Empleado"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'R' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'R' and cod_empr = 9 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    if (database == "ORA")
                                    {
                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'R' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = '{Empleado}'";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'R' and cod_empr = 421 and USU_MODI ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }

                                    //INGRESO A Ratificacion ReFormulacion Metas
                                    //ROL LIDER
                                    selenium.Click("//span[@id='txtctl00_pLider']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[5]/ul/li[15]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[5]/ul/li[15]/a");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ratificacion Reformulacion Metas", true, file);

                                 
                                        if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1']/i");
                                            Thread.Sleep(2500);
                                            selenium.Screenshot("Detalles Ratificacion Reformulacion Metas", true, file);
                                            Thread.Sleep(2500);

                                            //OBSERVACIONES
                                            selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            Thread.Sleep(2500);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //APROBAR REFORMULACION METAS
                                            selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAproMet']");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Reformulacion Metas", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Ratificacion Reformulacion Metas con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            Assert.Fail("Sin datos de Ratificacion Reformulacion Metas");
                                        }

                        
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_GCG360ValidarGuardarCompromiso()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarGuardarCompromiso")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", "OTRO COMPROMISO");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //CERRAR CONCERTACION
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cerrar Concertacion", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(4000);
                                    Screenshot("Alerta Cerrado Concertacion", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Proceso Terminado Correctamente", true, file);
                                    Thread.Sleep(4000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_GCG360ValidarCamposObligatoriosGuardarCompromiso()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_GCG360ValidarCamposObligatoriosGuardarCompromiso")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    //IR A BOTON GUARDAR SIN LLENAR DATOS, VALIDAR CAMPOS OBLIGARORIOS
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.ScrollTo("0", "200");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Campos Obligatorios 1", true, file);
                                    Thread.Sleep(2000);
                                    //LLENAR DATOS MENOS RECURSOS Y GUARDAR, VALIDAR CAMPOS OBLIGATORIOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", "OTRO COMPROMISO");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.ScrollTo("0", "600");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Campos Obligatorios 2", true, file);
                                    //LLENA RESTANTE CAMPOS Y SE GUARDA COMPROMISO CORRECTAMENTE
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //CERRAR CONCERTACION
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cerrar Concertacion", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(4000);
                                    Screenshot("Alerta Cerrado Concertacion", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Proceso Terminado Correctamente", true, file);
                                    Thread.Sleep(4000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_GCG360ValidarPersonaApoyoGuardarCompromiso()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarPersonaApoyoGuardarCompromiso")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["PersonaApoyo"].ToString().Length != 0 && rows["PersonaApoyo"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string url = rows["url"].ToString();
                                string PersonaApoyo = rows["PersonaApoyo"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", "OTRO COMPROMISO");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //PERSONA APOYO AGREGAR
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtConsuCedEmpl']", PersonaApoyo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Apoyo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_btnConsulCed']/span");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Consultada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgEmpleadosApoy_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Apoyo Agregada", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //CERRAR CONCERTACION
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cerrar Concertacion", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(4000);
                                    Screenshot("Alerta Cerrado Concertacion", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Proceso Terminado Correctamente", true, file);
                                    Thread.Sleep(4000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //-------------------------------------------------PARTE 2---AGREGA Y ELIMINA LA PERSONA APOYO ANTES DE GUARDAR COMPROMISO---------------------------------------------------------
                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    Thread.Sleep(10000);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //PERSONA APOYO AGREGAR
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtConsuCedEmpl']", PersonaApoyo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Apoyo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_btnConsulCed']/span");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Consultada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgEmpleadosApoy_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Apoyo Agregada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgPerApoy_ctl03_btnElimi']/i");
                                    Thread.Sleep(2000);
                                    Screenshot("Eliminar Persona Apoyo antes Guardar compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Eliminada", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //CERRAR CONCERTACION
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cerrar Concertacion", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(4000);
                                    Screenshot("Alerta Cerrado Concertacion", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Proceso Terminado Correctamente", true, file);
                                    Thread.Sleep(4000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_GCG360ValidarEliminarPersonaApoyoGuardarCompromiso()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarEliminarPersonaApoyoGuardarCompromiso")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["PersonaApoyo"].ToString().Length != 0 && rows["PersonaApoyo"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string url = rows["url"].ToString();
                                string PersonaApoyo = rows["PersonaApoyo"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    Thread.Sleep(2000);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", "OTRO COMPROMISO");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //PERSONA APOYO AGREGAR
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtConsuCedEmpl']", PersonaApoyo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Apoyo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_btnConsulCed']/span");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Consultada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgEmpleadosApoy_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Apoyo Agregada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgPerApoy_ctl03_btnElimi']/i");
                                    Thread.Sleep(2000);
                                    Screenshot("Eliminar Persona Apoyo antes Guardar compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Persona Eliminada", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //CERRAR CONCERTACION
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cerrar Concertacion", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(4000);
                                    Screenshot("Alerta Cerrado Concertacion", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Proceso Terminado Correctamente", true, file);
                                    Thread.Sleep(4000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_GCG360ValidarEdicionCompromiso()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarEdicionCompromiso")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["Aspecto2"].ToString().Length != 0 && rows["Aspecto2"].ToString() != null &&
                                rows["Comportamiento2"].ToString().Length != 0 && rows["Comportamiento2"].ToString() != null &&
                                rows["Compromiso2"].ToString().Length != 0 && rows["Compromiso2"].ToString() != null &&
                                rows["Recurso2"].ToString().Length != 0 && rows["Recurso2"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string Aspecto2 = rows["Aspecto2"].ToString();
                                string Comportamiento2 = rows["Comportamiento2"].ToString();
                                string Compromiso2 = rows["Compromiso2"].ToString();
                                string Recurso2 = rows["Recurso2"].ToString();
                                string CampoCompromiso2 = rows["CampoCompromiso2"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", "OTRO COMPROMISO");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //EDITAR COMPROMISO
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina2_DgListadoEspe_ctl03_btnEdit']/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso a editar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina2_DgListadoEspe_ctl03_btnEdit']/i");
                                    //EDITAR DATOS REGISTRO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", CampoCompromiso2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //ACTUALIZAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Actualizado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina2_DgListadoEspe_ctl03_btnEdit']/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso editado", true, file);
                                    Thread.Sleep(4000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_GCG360ValidarEliminarCompromiso()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarEliminarCompromiso")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", "OTRO COMPROMISO");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //ELIMINAR COMPROMISO
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina2_DgListadoEspe_ctl03_btnElimi']/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso a editar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina2_DgListadoEspe_ctl03_btnElimi']/i");
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Eliminado", true, file);
                                    Thread.Sleep(4000);
                                    fv.ConvertWordToPDF(file, database);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_GCG360ValidarCompromisoTipoOtroMayor99GuardarCompromiso()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarCompromisoTipoOtroMayor99GuardarCompromiso")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["CampoCompromiso"].ToString().Length != 0 && rows["CampoCompromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string url = rows["url"].ToString();
                                string CampoCompromiso = rows["CampoCompromiso"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesComp']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtOtrCompr_txtTexto']", CampoCompromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Editado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_GCG360ValidarGuardarCompromisoDigiflagN()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarGuardarCompromisoDigiflagN")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Aspecto"].ToString().Length != 0 && rows["Aspecto"].ToString() != null &&
                                rows["Comportamiento"].ToString().Length != 0 && rows["Comportamiento"].ToString() != null &&
                                rows["Compromiso"].ToString().Length != 0 && rows["Compromiso"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Recurso"].ToString().Length != 0 && rows["Recurso"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Comportamiento = rows["Comportamiento"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string digi = $"update GN_DIGIF set VAL_VARI='N' where COD_VARI='K0000063'";
                                        db.UpdateDeleteInsert(digi, database, user);
                                        string Borrado1 = $"delete from ED_PERAP where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado1, database, user);
                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 3172";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                        string Borrado2 = $"delete from GD_TIACC where ACT_USUA = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado2, database, user);
                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrSolicitud_ctl09_ImageButton2']/i");
                                    Thread.Sleep(2000);
                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDetAspEval']", Comportamiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comportamiento", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlTxtDesComp_txtTexto']", "COMPROMISO DIGIFLAG N");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string digi = $"update GN_DIGIF set VAL_VARI='S' where COD_VARI='K0000063'";
                                        db.UpdateDeleteInsert(digi, database, user);

                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_GCG360ValidarLiderNoObserveSuDDefinicionCompromisos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Self_Service_GCG.ED_GCG360ValidarLiderNoObserveSuDDefinicionCompromisos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string digi = $"update GN_DIGIF set VAL_VARI='N' where COD_VARI='K0000063'";
                                        db.UpdateDeleteInsert(digi, database, user);

                                    }
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO INDIVIDUAL
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'EF Definición Planes de Desarrollo')]");
                                    selenium.Click("//a[contains(.,'EF Definición Planes de Desarrollo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);
                                    Thread.Sleep(2000);
                                    //DETALLES, NO SE DEBE VISUALIZAR EL DEL USUARIO 507195
                                    selenium.Scroll("//table[@id='tblListado']/tbody/tr/td[8]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Lider No Observa su Definicion", true, file);
                                    Thread.Sleep(2000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (database == "SQL")
                                    {
                                        string digi = $"update GN_DIGIF set VAL_VARI='S' where COD_VARI='K0000063'";
                                        db.UpdateDeleteInsert(digi, database, user);

                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VisualizaciónJefeFeedback()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VisualizaciónJefeFeedback")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string Respuesta3 = rows["Respuesta3"].ToString();
                                string observacion = rows["observacion"].ToString();
                                string Compromiso = rows["Compromiso"].ToString();
                                string Aspecto = rows["Aspecto"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Recurso = rows["Recurso"].ToString();
                                string CompromisoColaborador = rows["CompromisoColaborador"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '2005' and tip_esca = '22'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=213011";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 2043";
                                        db.UpdateDeleteInsert(Borrado, database, user);

                                        string updatefeedback = $"update ED_3LICC set JEF_CLAR=null, JEF_MOST=null where RMT_LICC='2043'";
                                        db.UpdateDeleteInsert(updatefeedback, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '25' and tip_esca = '9'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12115";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string Borrado = $"delete from ED_COMPR where rmt_licc = 2119";
                                        db.UpdateDeleteInsert(Borrado, database, user);

                                        string updatefeedback = $"update ED_3LICC set JEF_CLAR=null, JEF_MOST=null where RMT_LICC='2119'";
                                        db.UpdateDeleteInsert(updatefeedback, database, user);

                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("ROL LIDER", true, file);


                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro Calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Feedback", true, file);


                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Feedback", true, file);
                                    }

                                    //ENCUESTA
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl02_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl03_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl04_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl05_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl06_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl07_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl08_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl09_txtEscala']", Respuesta3);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl10_txtEscala']", Respuesta1);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_txtEscala']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgEd3dlic_ctl11_txtEscala']", Respuesta2);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Cuantitativa Diligenciada", true, file);

                                    //DEMAS CAMPOS
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMOBS_EVAL_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_FORT_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMTEX_RECO_txtTexto']", observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Capmpos Diligenciados", true, file);

                                    //APLICAR
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicarInf']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Evaluacion Aplicada Correctamente", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    //---------------------------------------------------------------------COMPROMISOS-------------------------------------------------------------------


                                    //ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    //DEFINICION PLANES DESARROLLO
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'EF Definición Planes de Desarrollo')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'EF Definición Planes de Desarrollo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Definicion Planes Desarrollo", true, file);

                                    //LISTADO COMPROMISOS PENDIENTES
                                    selenium.Scroll("//*[@id='tblListado']/tbody/tr/td[9]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Listado Compromisos pendientes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='tblListado']/tbody/tr/td[9]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Registro Compromisos", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO COMPROMISOS
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlAspEval']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAspEval']", Aspecto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aspecto", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlTxtDesComp_txtTexto']");
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlTxtDesComp_txtTexto']", Compromiso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Compromiso Ingresado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", Fecha);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas Compromiso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtRecRequ_txtTexto']", Recurso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recurso", true, file);
                                    Thread.Sleep(2000);

                                    //GUARDAR COMPROMISO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuardar']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Compromiso Guardado", true, file);
                                    //CERRAR CONCERTACION
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cerrar Concertacion", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCerCompro']");
                                    Thread.Sleep(4000);
                                    Screenshot("Alerta Cerrado Concertacion", true, file);
                                    Thread.Sleep(4000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Proceso Terminado Correctamente", true, file);
                                    selenium.Close();

                                    //-------------------------------------------------------COLABORADOR FEEDBACK--------------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    //Seguimiento de Compromisos
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Seguimiento de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Seguimiento de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seguimiento de Compromisos", true, file);

                                    //Compromisos
                                    selenium.Scroll("//*[@id='tblListado']/tbody/tr/td[6]/button");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seguimiento de Compromisos", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='tblListado']/tbody/tr/td[6]/button");

                                    ////Edicion compromiso
                                    //Thread.Sleep(2000);
                                    //selenium.Screenshot("Edicion de Compromisos", true, file);
                                    //Thread.Sleep(2000);
                                    //selenium.Click("//a[@id='ctl00_ContenidoPagina_DgListado_ctl03_LinkButton1']/i");
                                    //Thread.Sleep(5000);
                                    //SendKeys.SendWait("{ESC}");

                                    ////Observaciones Compromisos
                                    //selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", CompromisoColaborador);
                                    //Thread.Sleep(2000);
                                    //selenium.Screenshot("Observaciones de Compromisos", true, file);
                                    //Thread.Sleep(2000);

                                    ////Actualizar
                                    //selenium.ScrollTo("0", "750");
                                    //selenium.Click("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                    //Thread.Sleep(2000);
                                    //selenium.Screenshot("Actualizacion de Compromiso", true, file);

                                    //-----------------------------------------------------------------------Cierre de comprimisos Colaborador-----------------------------------------------------------------------

                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Cierre de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cierre de Compromisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cierre de Compromiso", true, file);

                                    //Detalle
                                    selenium.Scroll("//table[@id='tableEvaluaciones']/tbody/tr/td[9]/a/i");
                                    selenium.Click("//table[@id='tableEvaluaciones']/tbody/tr/td[9]/a/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Visualizacion Colaborador Compromiso", true, file);

                                    //FEEDBACK
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_rblJefclar_0']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblJefclar_0']");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//table[@id='ctl00_ContenidoPagina_rblJefMost']/tbody/tr/td/label");
                                    selenium.Click("//table[@id='ctl00_ContenidoPagina_rblJefMost']/tbody/tr/td/label");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValObser_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValObser_txtTexto']","Retroalimentacin Colaborador");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Feedback Colaborador", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnFeedBack']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnFeedBack']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Feedback Colaborador Registrada", true, file);
                                    selenium.Close();

                                    //--------------------------------------------------------Visualizacion feedback desde el jefe-----------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("ROL LIDER", true, file);
                                    
                                    //Calificacion feedback
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'EF Calificación del Feedback')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'EF Calificación del Feedback')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Calificacion Feedback", true, file);

                                    //Detalle
                                    selenium.Scroll("//table[@id='tableEvaluaciones']/tbody/tr/td[9]/a/i");
                                    selenium.Click("//table[@id='tableEvaluaciones']/tbody/tr/td[9]/a/i");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Feedback desde Jefe", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_VerPreguntasCuantitativaAutoevaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_ED.ED_VerPreguntasCuantitativaAutoevaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string date = DateTime.UtcNow.ToString("dd/MM/yyyy");


                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 9 and cod_teva = '4000' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 9 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=212770";
                                        db.UpdateDeleteInsert(actualizar1, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update ed_3teva set for_cali = 'CN',for_caco = 'P',tip_pepu = 'S',man_part = 'N' where cod_empr = 421 and cod_teva = '3' and tip_esca = '1'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update  ED_3DLIC set PES_ESCA = null,COD_ESCA = '?' where cod_empr = 421 and COD_ITEM in (1,2,4,6,8,19,20,21,23,32) and RMT_LICA=12071";
                                        db.UpdateDeleteInsert(actualizar1, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE COMPETENCIAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//*[@id='tableEvaluaciones_filter']/label/input");
                                    if (database == "SQL")
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa", true, file);


                                    }
                                    else
                                    {
                                        //buscar
                                        selenium.SendKeys("//*[@id='tableEvaluaciones_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion seleccionada", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//*[@id='tableEvaluaciones']/tbody/tr/td[6]/a");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Evaluacion Cuantitativa", true, file);
                                    }


                                    selenium.Screenshot("Preguntas Evaluacion Cualitativa", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        

    }
}