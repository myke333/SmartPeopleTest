using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Input;
using System.Windows.Forms;
using System.Drawing;
using OpenQA.Selenium.Chrome;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using System.Data;
using DocumentFormat.OpenXml.Office2010.ExcelAc;
using APITest;
using Keys = OpenQA.Selenium.Keys;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;

namespace Web_Kactus_Test_V2
{
    /// <summary>
    /// Descripción resumida de SelfServices
    /// </summary>

    [TestClass]
    public class Modulo_GN : FuncionesVitales
    {

        string Modulo = "Modulo_GN";
        string app = "SmartPeople";

        APISelenium selenium = new APISelenium();
        APIFuncionesVitales fv = new APIFuncionesVitales();
        APIDatabase db = new APIDatabase();

        public Modulo_GN()
        {

        }
        [TestMethod]
        public void GN_ReporteLiquidaciónVacacionesAcumulado()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_ReporteLiquidaciónVacacionesAcumulado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Liquidación vacaciones Acumuladas  
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["AñoLiquDesde"].ToString().Length != 0 && rows["AñoLiquDesde"].ToString() != null &&
                                rows["MesLiquDesde"].ToString().Length != 0 && rows["MesLiquDesde"].ToString() != null &&
                                rows["DiaLiquDesde"].ToString().Length != 0 && rows["DiaLiquDesde"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string AñoLiquDesde = rows["AñoLiquDesde"].ToString();
                                string MesLiquDesde = rows["MesLiquDesde"].ToString();
                                string DiaLiquDesde = rows["DiaLiquDesde"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ReporteLiquiVaca1.pdf");
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);

                                    //INGRESO A LIQUIDACION VACACIONES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //ACUMULADOS
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //CHECK LIQUIDACION
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'chkLiqVaca')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Seleccionar Liquidación Vacaciones", true, file);
                                    Thread.Sleep(500);
                                    //AÑO LIQUIDACION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlFecDesdA')]", AñoLiquDesde);
                                    Thread.Sleep(2000);
                                    //MES LIQUIDACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiquDesde);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(500);
                                    selenium.Scroll("//div[@id='printable']/table[3]/tbody/tr[3]/td[6]");
                                    selenium.Screenshot("Reporte Liquidación Vacaciones Generado", true, file);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ReporteLiquiVaca1");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ReporteLiquiVaca1.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_ReporteLiquidaciónVacacionesPrenomina()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_ReporteLiquidaciónVacacionesPrenomina")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Liquidación vacaciones Acumuladas  
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["AñoLiquDesde"].ToString().Length != 0 && rows["AñoLiquDesde"].ToString() != null &&
                                rows["MesLiquDesde"].ToString().Length != 0 && rows["MesLiquDesde"].ToString() != null &&
                                rows["DiaLiquDesde"].ToString().Length != 0 && rows["DiaLiquDesde"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string AñoLiquDesde = rows["AñoLiquDesde"].ToString();
                                string MesLiquDesde = rows["MesLiquDesde"].ToString();
                                string DiaLiquDesde = rows["DiaLiquDesde"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ReporteLiquiVaca2.pdf");
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);

                                    //INGRESO A LIQUIDACION VACACIONES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //PRENOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Prenomina", true, file);
                                    //CHECK LIQUIDACION
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'chkLiqVaca')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Seleccionar Liquidación Vacaciones", true, file);
                                    Thread.Sleep(500);
                                    //AÑO LIQUIDACION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlFecDesdA')]", AñoLiquDesde);
                                    Thread.Sleep(2000);
                                    //MES LIQUIDACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiquDesde);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(500);
                                    selenium.Scroll("//div[@id='printable']/table[3]/tbody/tr[3]/td[6]");
                                    selenium.Screenshot("Reporte Liquidación Vacaciones Generado", true, file);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ReporteLiquiVaca2");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ReporteLiquiVaca2.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(6000);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValorNull()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValorNull")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                  
                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre );
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");

                                    //-------------------------------TIPO FOMRMATO A------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD=null where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD=null where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato A", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathA = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    Process.Start(pdfPathA);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO B------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato B", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO C------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato C", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //-------------------------------TIPO FOMRMATO D------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato D", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValor0()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValor0")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");

                                    //-------------------------------TIPO FOMRMATO A------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato A", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathA = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    Process.Start(pdfPathA);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO B------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato B", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO C------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato C", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //-------------------------------TIPO FOMRMATO D------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato D", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");

                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }
                                        
                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaAcumuladoValidacionMensajeSinDatos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaAcumuladoValidacionMensajeSinDatos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");

                                    //-------------------------------TIPO FOMRMATO A------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato A Sin Datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO B------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato B Sin Datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO C------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato C Sin Datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //-------------------------------TIPO FOMRMATO D------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato D Sin Datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValor20()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValor20")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");

                                    //-------------------------------TIPO FOMRMATO A------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='20' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='20' where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato A", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathA = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    Process.Start(pdfPathA);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO B------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato B", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO C------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato C", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //-------------------------------TIPO FOMRMATO D------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato D", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValor1()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaAcumuladoCampoNRO_DPGDValor1")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");

                                    //-------------------------------TIPO FOMRMATO A------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='1' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='1' where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato A", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathA = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosA.pdf");
                                    Process.Start(pdfPathA);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO B------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato B", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-------------------------------TIPO FOMRMATO C------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato C", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //-------------------------------TIPO FOMRMATO D------------------------------------------------------------------------

                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }

                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato D", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobanteAcumuladosD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobanteAcumuladosD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");

                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValorNull()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValorNull")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaD.pdf");

                                    //-----------------------------TIPO FORMATO A--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD=null where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD=null where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//*[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaA.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO B--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO C--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO D--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValor1()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValor1")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre );
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaD.pdf");

                                    //-----------------------------TIPO FORMATO A--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='1' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='1' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//*[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaA.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO B--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO C--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO D--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValor0()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValor0")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre );
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaD.pdf");

                                    //-----------------------------TIPO FORMATO A--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//*[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaA.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO B--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO C--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO D--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ComprobantePrenominaD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaPrenóminaValidacionMensajeSinDatos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaPrenóminaValidacionMensajeSinDatos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaA.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaB.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaC.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ComprobantePrenominaD.pdf");

                                    //-----------------------------TIPO FORMATO A--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='0' where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//*[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato A Sin datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO B--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato B Sin Datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO C--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato C Sin Datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO D--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina Formato D Sin datos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValor20()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_DesprendibleNóminaPrenóminaCampoNRO_DPGDValor20")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre);
                                    string userName = Environment.UserName;
                                    File.Delete("C:/Users/"+ userName + "/Downloads/ComprobantePrenominaA.pdf");
                                    File.Delete("C:/Users/" + userName + "/Downloads/ComprobantePrenominaB.pdf");
                                    File.Delete("C:/Users/" + userName + "/Downloads/ComprobantePrenominaC.pdf");
                                    File.Delete("C:/Users/" + userName + "/Downloads/ComprobantePrenominaD.pdf");

                                    //-----------------------------TIPO FORMATO A--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='20' where cod_empr ='9'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string campo = $"update PE_CONFI set NRO_DPGD='20' where cod_empr ='421'";
                                        db.UpdateDeleteInsert(campo, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//*[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato A", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaA");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/"+ userName + "/Downloads/ComprobantePrenominaA.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO A", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO B--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='B' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato B", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaB");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathB = Path.Combine(Application.StartupPath, "C:/Users/"+userName+"/Downloads/ComprobantePrenominaB.pdf");
                                    Process.Start(pdfPathB);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO B", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO C--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='C' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato C", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaC");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathC = Path.Combine(Application.StartupPath, "C:/Users/"+userName+"/Downloads/ComprobantePrenominaC.pdf");
                                    Process.Start(pdfPathC);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO C", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin2);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //-----------------------------TIPO FORMATO D--------------------------------------------------------------------
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_FRMD='D' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                    }
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin3 = selenium.MainWindow();
                                    String modalWin3 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin3);
                                    Thread.Sleep(3000);
                                    Screenshot("Desprendible de Nómina Formato D", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ComprobantePrenominaD");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    //ENVIAR CORREO
                                    selenium.Click("//*[@id='btnReportexEmail']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='txtMailSend']", "deisyl@digitalware.com.co");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Envio de Correo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='btnEnviarReportexEmail']");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //ABRIR PDF
                                    string pdfPathD = Path.Combine(Application.StartupPath, "C:/Users/"+userName+"/Downloads/ComprobantePrenominaD.pdf");
                                    Process.Start(pdfPathD);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO FORMATO D", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin3);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='9'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"select NRO_DPGD from pe_confi where COD_EMPR='421'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["NRO_DPGD"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CertificadoCesantíasPendientes()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoCesantíasPendientes")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Cesantias Pendientes     
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/"+username+"/Downloads/Reporte1.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/Reporte2.pdf");
                                    //INGRESO A MIS REPORTES
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);


                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);


                                    Thread.Sleep(500);

                                    //PRENOMINA

                                    //CLICK EN PRENOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //CESANTIAS PENDIENTES
                                    selenium.Scroll("//input[contains(@id,'chkCesPend')]");
                                    selenium.Click("//input[contains(@id,'chkCesPend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Cesantías Pendientes Prenómina", true, file);
                                    Thread.Sleep(500);
                                    //GENERAR REPORTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Reporte Cesantías Pendientes", true, file);
                                    //DIAS TRABAJADOS
                                    selenium.Scroll("//span[contains(@id,'dias_trab')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Cesantías Pendientes No 1", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("Reporte1");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/Reporte1.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //------------------------------------------------------Acumulado--------------------------------------------------------
                                    //INGRESO A MIS REPORTES
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(500);
                                    //CLICK EN ACUMULADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Acumulados", true, file);
                                    //CESANTIAS PENDIENTES
                                    selenium.Scroll("//input[contains(@id,'chkCesPend')]");
                                    selenium.Click("//input[contains(@id,'chkCesPend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Cesantías Pendientes Acumulados", true, file);
                                    Thread.Sleep(500);
                                    //GENERAR REPORTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Reporte Cesantías Pendientes", true, file);
                                    //DIAS TRABAJADOS
                                    selenium.Scroll("//span[contains(@id,'dias_trab')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Cesantías Pendientes No 2", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);

                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("Reporte2");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath2 = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/Reporte2.pdf");
                                    Process.Start(pdfPath2);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    //LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                            
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_CertificadoVacacionesPendientes()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoVacacionesPendientes")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ReporteVacacionesPen.pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/ReporteVacacionesPen1.pdf");
                                    //ACUMULADOS
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //CHECK VACACIONES PENDIENTES
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkVacPend']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones Pendientes", true, file);
                                    Thread.Sleep(2000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    Thread.Sleep(1300);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ReporteVacacionesPen");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ReporteVacacionesPen.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(6000);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    

                                    //PRENOMINA
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //PRENOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //CHECK VACACIONES PENDIENTES
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkVacPend']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones Pendientes", true, file);
                                    Thread.Sleep(2000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    Thread.Sleep(1300);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ReporteVacacionesPen1");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath1 = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ReporteVacacionesPen1.pdf");
                                    Process.Start(pdfPath1);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CertificadoIngresosyRetenciones()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoIngresosyRetenciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Año = rows["Año"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/Certificado_Ingresos_2021.pdf");
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //CERIFICADO INGRESO Y RETENCIONES
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_chkCerInre']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkCerInre']");
                                    Thread.Sleep(3000);
                                    
                                    Thread.Sleep(2000);
                                    //AÑO 
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_yycert']");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_yycert']", Año);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_yycert']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Certificado Ingreso y Retenciones", true, file);
                                    if (database == "ORA")
                                    {
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_ddlSeccional']");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlSeccional']", "PRUEBAS ORACLE");
                                        Thread.Sleep(2000);
                                    }
                                    /*if (database == "SQL")
                                    {
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_ddlSeccional']");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlSeccional']", "PRUEBAS CALIDAD");
                                        Thread.Sleep(2000);
                                    }*/
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(6000);
                                    Screenshot("Generar Reporte", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Certificado Ingreso Y Retenciones", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    Thread.Sleep(6000);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("Certificado_Ingresos_2021.pdf");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //IMPRIMIR PDF
                                    selenium.Click("//*[@id='ImprimirPDF']");
                                    Thread.Sleep(5000);
                                    Screenshot("Descarga PDF", true, file);
                                    
                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/Certificado_Ingresos_2021.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(10000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_ReporteHistóricoVacaciones()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_ReporteHistóricoVacaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/Hist_Vacaciones.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkHisVaca']");
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkHisVaca')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Histórico de Vacaciones", true, file);

                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);

                                    Thread.Sleep(500);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Generado", true, file);

                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(7000);
                                    Screenshot("Imprimir PDF", true, file);
                                    SendKeys.SendWait("{ESC}");

                                    //PDF
                                    selenium.Click("//a[@id='ctl00_btnImprimirPDFToolbar']");
                                    Thread.Sleep(7000);
                                    Screenshot("PDF", true, file);

                                    //ABRIR PDF DESCARGADO
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/Hist_Vacaciones.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(30000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void GN_ReporteRetenciónSemestral()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_ReporteRetenciónSemestral")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ReporteSemestral.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkRetSeme']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkRetSeme']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Retención Semestral", true, file);
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlAnoProc']");
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAnoProc']", "2016");
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlSemProc']");
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlSemProc']", "Semestre 2");
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlAnoProc']");
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAnoProc']", "2018");
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlSemProc']");
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlSemProc']", "Semestre 1");
                                        Thread.Sleep(1000);
                                    }
                                    selenium.Screenshot("Datos Retencion", true, file);
                                    Thread.Sleep(1000);

                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);

                                    Thread.Sleep(2000);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Generado", true, file);

                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(10000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ReporteSemestral");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ReporteSemestral.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_ReporteSeguridadSocial()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_ReporteSeguridadSocial")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ReporteSeguridad.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkSegSoci']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkSegSoci']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlFecCoti_txtFecha')]", Fecha);
                                    selenium.Screenshot("Check Seguridad Social", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ReporteSeguridad");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ReporteSeguridad.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void GN_LoginEscenarioNoMostrarOpcionRecordarClave()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginEscenarioNoMostrarOpcionRecordarClave")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"update pe_confi set rec_clav='N' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"update pe_confi set rec_clav='N' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                   
                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000);
                                    Screenshot("No muestra Opcion de Recuperar Clave", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {

                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    else
                                    {

                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasEmpresarialesMostrarNoticia()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasEmpresarialesMostrarNoticia")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = null, ADJ_GUID = null WHERE cod_empr = 9 AND TIP_NOTI = 'E' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = null, ADJ_GUID = null WHERE cod_empr = 421 AND TIP_NOTI = 'E' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Empresariales", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                  
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasAccesoSmartPeopleMostrarNoticia()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasAccesoSmartPeopleMostrarNoticia")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = null, ADJ_GUID = null, IND_ACTI = 'S' WHERE cod_empr = 9 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = null, ADJ_GUID = null, IND_ACTI = 'S' WHERE cod_empr = 421 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Acceso Smart People", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  IND_ACTI = 'N' WHERE cod_empr = 9 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 421 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasTalentoHumanoMostrarNoticia()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasTalentoHumanoMostrarNoticia")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = null, ADJ_GUID = null WHERE cod_empr = 9 AND TIP_NOTI = 'T' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = null, ADJ_GUID = null WHERE cod_empr = 421 AND TIP_NOTI = 'T' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Talento Humano", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void GN_LoginNoticiasEmpresarialesNoMuestraNoticia()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasEmpresarialesNoMuestraNoticia")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 9 AND TIP_NOTI = 'E'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 421 AND TIP_NOTI = 'E'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("No Muestra Noticias Empresariales", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'S' WHERE cod_empr = 9 AND TIP_NOTI = 'E'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'S' WHERE cod_empr = 421 AND TIP_NOTI = 'E'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasAccesoSmartPeopleNoMuestraNoticia()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasAccesoSmartPeopleNoMuestraNoticia")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 9 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 421 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    Screenshot("No Muestra Noticias Accesi Smart People", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 9 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 421 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }




        [TestMethod]
        public void GN_LoginNoticiasTalentoHumanoNoMuestraNoticia()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasTalentoHumanoNoMuestraNoticia")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 9 AND TIP_NOTI = 'T'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 421 AND TIP_NOTI = 'T'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("No Muestra Noticias Talento Humano", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'S' WHERE cod_empr = 9 AND TIP_NOTI = 'T'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'S' WHERE cod_empr = 421 AND TIP_NOTI = 'T'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasEmpresarialesMostrarNoticiaConURL()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasEmpresarialesMostrarNoticiaConURL")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string UrlAdjunto = rows["UrlAdjunto"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = null WHERE cod_empr = 9 AND TIP_NOTI = 'E' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = null WHERE cod_empr = 421 AND TIP_NOTI = 'E' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Empresariales", true, file);
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div/div/div/div/div/div/a/button"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Empresariales Con Boton Leer Mas", true, file);
                                    driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div/div/div/div/div/div/a/button")).Click();
                                    Thread.Sleep(3000);
                                    Screenshot("URL Adjunta", true, file);
                                    Thread.Sleep(3000);
                                    driver.Close();
                                    Thread.Sleep(6000);
                                    KillProcesos("chrome.exe");
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasAccesoSmartMostrarNoticiaConURL()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasAccesoSmartMostrarNoticiaConURL")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string UrlAdjunto = rows["UrlAdjunto"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = null, IND_ACTI = 'S' WHERE cod_empr = 9 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = null, IND_ACTI = 'S' WHERE cod_empr = 421 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(3000);
                                    Screenshot("URL Adjunta", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Click("//*[@id='Div2']/div/div/div/div/div/div/div/div/a/button");
                                    Thread.Sleep(3000);
                                    Screenshot("URL Adjunta", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    Thread.Sleep(6000);
                                    KillProcesos("chrome.exe");
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  IND_ACTI = 'N' WHERE cod_empr = 9 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 421 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasTalentoHumanoMostrarNoticiaConURL()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasTalentoHumanoMostrarNoticiaConURL")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string UrlAdjunto = rows["UrlAdjunto"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = null WHERE cod_empr = 9 AND TIP_NOTI = 'T' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = null WHERE cod_empr = 421 AND TIP_NOTI = 'T' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Talento Humano", true, file);
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[2]/div/div/div/div/div/div/div/div/a/button"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Talento Humano Con Boton Leer Mas", true, file);
                                    driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[2]/div/div/div/div/div/div/div/div/a/button")).Click();
                                    Thread.Sleep(3000);
                                    Screenshot("URL Adjunta", true, file);
                                    Thread.Sleep(3000);
                                    driver.Close();
                                    Thread.Sleep(6000);
                                    KillProcesos("chrome.exe");
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasEmpresarialesMostrarNoticiaConAdjuntos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasEmpresarialesMostrarNoticiaConAdjuntos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string UrlAdjunto = rows["UrlAdjunto"].ToString();
                                string Adjunto = rows["Adjunto"].ToString();
                                string username = Environment.UserName;
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = '{Adjunto}' WHERE cod_empr = 9 AND TIP_NOTI = 'E' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = '{Adjunto}' WHERE cod_empr = 421 AND TIP_NOTI = 'E' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Empresariales", true, file);
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div/div/div/div/div/div/div[2]/a/button"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Empresariales Con Boton Descargar", true, file);
                                    driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[1]/div/div/div/div/div/div/div/div/div[2]/a/button")).Click();
                                    Thread.Sleep(3000);
                                    Screenshot("Archivo Descargado", true, file);
                                    Thread.Sleep(6000);
                                    driver.Close();
                                    //ABRIR PDF
                                    DirectoryInfo di = new DirectoryInfo(@"C:\Users\" + username + @"\Downloads");
                                    string date = DateTime.Now.ToString("yyyyMddHH");
                                    foreach (var fi in di.GetFiles())
                                    {
                                        string archivo = fi.Name;
                                        if (archivo.StartsWith("Archivo" + date))
                                        {
                                            string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\"+ archivo);
                                            Process.Start(pdfPath);
                                            Thread.Sleep(6000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            Thread.Sleep(6000);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(10000);
                                            File.Delete(@"C:\Users\" + username + @"\Downloads\" + archivo);
                                        }
                                    }

                                 
                                    
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasAccesosmartPeopleMostrarNoticiaConAdjuntos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasAccesosmartPeopleMostrarNoticiaConAdjuntos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string UrlAdjunto = rows["UrlAdjunto"].ToString();
                                string Adjunto = rows["Adjunto"].ToString();
                                string username = Environment.UserName;
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = '{Adjunto}',IND_ACTI = 'S' WHERE cod_empr = 9 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = '{Adjunto}',IND_ACTI = 'S' WHERE cod_empr = 421 AND TIP_NOTI = 'A'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Acceso Smart People Con Boton Descargar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='Div2']/div/div/div/div/div/div/div/div/div[2]/a/button");
                                    Thread.Sleep(3000);
                                    Screenshot("Archivo Descargado", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    //ABRIR PDF
                                    DirectoryInfo di = new DirectoryInfo(@"C:\Users\" + username + @"\Downloads");
                                    string date = DateTime.Now.ToString("yyyyMddHH");
                                    foreach (var fi in di.GetFiles())
                                    {
                                        string archivo = fi.Name;
                                        if (archivo.StartsWith("Archivo" + date))
                                        {
                                            string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\" + archivo);
                                            Process.Start(pdfPath);
                                            Thread.Sleep(6000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            Thread.Sleep(6000);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(10000);
                                            File.Delete(@"C:\Users\" + username + @"\Downloads\" + archivo);
                                        }
                                    }

                                  
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  IND_ACTI = 'N' WHERE cod_empr = 9 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET IND_ACTI = 'N' WHERE cod_empr = 421 AND TIP_NOTI = 'A' ";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginNoticiasTalentoHumanoMostrarNoticiaConAdjuntos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginNoticiasTalentoHumanoMostrarNoticiaConAdjuntos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string UrlAdjunto = rows["UrlAdjunto"].ToString();
                                string Adjunto = rows["Adjunto"].ToString();
                                string username = Environment.UserName;
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = '{Adjunto}' WHERE cod_empr = 9 AND TIP_NOTI = 'T' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"UPDATE PE_notic SET  URL_NOTI = '{UrlAdjunto}', ADJ_GUID = '{Adjunto}' WHERE cod_empr = 421 AND TIP_NOTI = 'T' AND IND_ACTI = 'S'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Talento Humano", true, file);
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[2]/div/div/div/div/div/div/div/div/div[2]/a/button"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000);
                                    Screenshot("Muestra Noticias Talento Humano Con Boton Descargar", true, file);
                                    driver.FindElement(By.XPath("//*[@id='ctl01']/div[3]/div/div[2]/div[2]/div/div/div[2]/div/div/div/div/div/div/div/div/div[2]/a/button")).Click();
                                    Thread.Sleep(3000);
                                    Screenshot("Archivo Descargado", true, file);
                                    Thread.Sleep(6000);
                                    driver.Close();
                                    //ABRIR PDF
                                    DirectoryInfo di = new DirectoryInfo(@"C:\Users\" + username + @"\Downloads");
                                    string date = DateTime.Now.ToString("yyyyMddHH");
                                    foreach (var fi in di.GetFiles())
                                    {
                                        string archivo = fi.Name;
                                        if (archivo.StartsWith("Archivo" + date))
                                        {
                                            string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\" + archivo);
                                            Process.Start(pdfPath);
                                            Thread.Sleep(6000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            Thread.Sleep(6000);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(10000);
                                            File.Delete(@"C:\Users\" + username + @"\Downloads\" + archivo);
                                        }
                                    }



                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginEscenarioMostrarOpcionRecordarClavePorCorreo()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginEscenarioMostrarOpcionRecordarClavePorCorreo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"update pe_confi set rec_clav='S' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update, database, user);
                                   
                                    }
                                    else
                                    {
                                        string update = $"update pe_confi set rec_clav='S' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update, database, user);
                                    
                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Opcion de Recuperar Clave", true, file);
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//input[@id='btnRecClav']"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000); 
                                    Screenshot("Opcion de Recuperar Contraseña Correo", true, file);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='btnRecClav']")).Click(); 
                                    Thread.Sleep(2000);
                                    Screenshot("Datos Recuperar clave enviados al correo", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                       
                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    else
                                    {

                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginEscenarioMostrarOpcionRecordarClavePorToken()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginEscenarioMostrarOpcionRecordarClavePorToken")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"update pe_confi set rec_clav ='T' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update, database, user);

                                        string updatetoken = $"update PE_CONFI set TIE_TOKE = '1' where COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(updatetoken, database, user);

                                    }
                                    else
                                    {
                                        string update = $"update pe_confi set rec_clav ='T' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update, database, user);

                                        string updatetoken = $"update PE_CONFI set TIE_TOKE = '1' where COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(updatetoken, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Opcion de Recuperar Clave", true, file);
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//input[@id='btnRecClav']"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000);
                                    Screenshot("Opcion de Recuperar Contraseña Token", true, file);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='btnRecClav']")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Datos Recuperar clave enviados al correo", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();

                                    //ConnectPop3 oCP3 = new ConnectPop3();

                                    ////invocamos el metodo para obtener mensajes
                                    //List<OpenPop.Mime.Message> lstMensajes = oCP3.getMensajes();

                                    ////recorremos y mostramos el asunto
                                    //foreach (OpenPop.Mime.Message oMensaje in lstMensajes)
                                    //{
                                    //    Debugger.Launch();
                                    //    Console.WriteLine(oMensaje.Headers.Subject);
                                    //}
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {

                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    else
                                    {

                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_LoginEscenarioMostrarOpcionRecordarClavePorCuestionario()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_LoginEscenarioMostrarOpcionRecordarClavePorCuestionario")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //PARAMETRIZAR FOMRATO DESPRENDIBLE
                                    if (database == "SQL")
                                    {
                                        string update = $"update pe_confi set rec_clav='P' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    else
                                    {
                                        string update = $"update pe_confi set rec_clav='P' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='txtCodUsua']")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Opcion de Recuperar Clave", true, file);
                                    Thread.Sleep(2000);
                                    IWebElement endScroll = driver.FindElement(By.XPath("//*[@id='btnResClav']"));
                                    IJavaScriptExecutor js = driver as IJavaScriptExecutor;
                                    js.ExecuteScript("arguments[0].scrollIntoView(true);", endScroll);
                                    Thread.Sleep(2000);
                                    Screenshot("Opcion de Recuperar Contraseña", true, file);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//*[@id='btnResClav']")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Cuestionario Recuperar Clave", true, file);
                                    Thread.Sleep(2000);
                                    Screenshot("Respuestas Cuestionarios", true, file);

 

                                    //IWebElement telefono = driver.FindElement(By.XPath("//*[@id='ctl00_ContenidoPagina_lblTelResi']"));
                                    //IWebElement fechanacimiento = driver.FindElement(By.XPath("//*[@id='ctl00_ContenidoPagina_lblFecNaci']"));
                                    //IWebElement hijos = driver.FindElement(By.XPath("//*[@id='ctl00_ContenidoPagina_lblNroHijo']"));
                                    //IWebElement direccion = driver.FindElement(By.XPath("//*[@id='ctl00_ContenidoPagina_lblDirResi']"));

                                    //switch ()
                                    //{


                                    //    case 1:
                                    //        List<IWebElement> Exist = new List<IWebElement>();
                                    //        Exist.AddRange(driver.FindElements(By.XPath("//*[@id='ctl00_ContenidoPagina_lblNomEnti']")));
                                    //        if (Exist.Count > 0)
                                    //        {
                                    //            driver.Close();
                                    //        }
                                    //        else
                                    //        {
                                    //            break;
                                    //        }


                                    //}



                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {

                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '9'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    else
                                    {

                                        string update1 = $"update gn_accaj set ind_entr='S' WHERE COD_EMPR = '421'";
                                        db.UpdateDeleteInsert(update1, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CambioClave()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CambioClave")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CAMBIO DE CLAVE", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CLAVE ANTERIOR", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CLAVE NUEVA", true, file);
                                    Thread.Sleep(5000);
                                    //CONFIRMACION CLAVE
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasConf']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CONFIRMACION CLAVE", true, file);
                                    //ACEPTAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCamClav']");
                                    Thread.Sleep(4000);
                                    Screenshot("CONFIRMACION CAMBIO", true, file);
                                    //ACEPTAR ALERTA
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //INICIAR SESION NUEVA CLAVE
                                    selenium.LoginApps(app, EmpleadoUser, ClaveNueva, url, file);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Login Nueva Clave", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveTipoAlfanumerico()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveTipoAlfanumerico")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                     
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                       
                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Clave Anterior", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Click("//div[@id='printable']/div[3]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Alfanumerica", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                   
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveTipoNumerico()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveTipoNumerico")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='N' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='N' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Clave Anterior", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Click("//div[@id='printable']/div[3]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Numerica", true, file);
                                    Thread.Sleep(2000);
                                    //Validacion no coinciden
                                    selenium.Click("//div[@id='printable']/div[4]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasConf']", ClaveNueva+"5");
                                    Thread.Sleep(2000);
                                    //ACEPTAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCamClav']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Confirmacion Claves No coinciden", true, file);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveMinimoMaximoCaracteres()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveMinimoMaximoCaracteres")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', PWB_CLDM = 1 ,PWB_CLDX = 8 where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', PWB_CLDM = 1 , PWB_CLDX = 8 where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Clave Anterior", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE EN RANGO
                                    selenium.Click("//div[@id='printable']/div[3]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Dentro del rango caracteres", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE FUERA RANGO
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva+"dsgt");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave FUera del Rango Caracteres", true, file);
                                    Thread.Sleep(2000);
                                    //Validacion no coinciden
                                    selenium.Click("//div[@id='printable']/div[4]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasConf']", ClaveNueva + "5");
                                    Thread.Sleep(2000);
                                    //ACEPTAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnCamClav']");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Confirmacion Claves No coinciden", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveExigirCambioALosDias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveExigirCambioALosDias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', PWB_CCTI = 1, PWB_CCPE='S' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', PWB_CCTI = 1, PWB_CCPE='S' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave Exigido por dias", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', PWB_CCTI = NULL, PWB_CCPE='N' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', PWB_CCTI = NULL, PWB_CCPE='N' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveUsarCaracteresEspeciales()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveUsarCaracteresEspeciales")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_CAES = 'S', CAN_CAES = 2 where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_CAES = 'S', CAN_CAES = 2 where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Clave Anterior", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Click("//div[@id='printable']/div[3]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva+"&");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Caracteres especiales", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Caracteres especiales sin caracteres completos", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();///////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_CAES = 'N', CAN_CAES = NULL where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_CAES = 'N', CAN_CAES = NULL where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveUsarMayusculas()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveUsarMayusculas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_MAYU = 'S', CAN_MAYU = 2 where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_MAYU = 'S', CAN_MAYU = 2 where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Clave Anterior", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Click("//div[@id='printable']/div[3]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva + "E");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Mayusculas", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Caracteres especiales sin mayusculas completas", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();///////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_MAYU = 'N', CAN_MAYU = NULL where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_MAYU = 'N', CAN_MAYU = NULL where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveUsarNumeros()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveUsarNumeros")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_NUME = 'S', CAN_NUME = 3 where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_NUME = 'S', CAN_NUME = 3 where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Clave Anterior", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Click("//div[@id='printable']/div[3]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveNueva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Numeros", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", "Debra/");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Validacion Clave Caracteres especiales sin mayusculas numeros", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();///////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_NUME = 'N', CAN_NUME = NULL where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', CLA_NUME = 'N', CAN_NUME = NULL where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CondicionesCambioClaveHistoricoClaves()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveHistoricoClaves")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                  
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A CAMBIO CLAVE
                                    selenium.Scroll("//a[contains(.,'CAMBIAR CLAVE')]");
                                    selenium.Click("//a[contains(.,'CAMBIAR CLAVE')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Cambiar Clave')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cambio Clave", true, file);
                                    Thread.Sleep(2000);
                                    //CLAVE ANTERIOR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasAnte']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasAnte']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Clave Anterior", true, file);
                                    Thread.Sleep(5000);
                                    //CLAVE NUEVA
                                    selenium.Click("//div[@id='printable']/div[3]/div/div/span/i[2]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtPasNuev']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPasNuev']", ClaveAnt);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Validacion Historico Claves", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();///////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                  
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_CondicionesCambioClaveMaximoIntentosFallido()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CondicionesCambioClaveMaximoIntentosFallido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["ClaveAnt"].ToString().Length != 0 && rows["ClaveAnt"].ToString() != null &&
                                rows["ClaveNueva"].ToString().Length != 0 && rows["ClaveNueva"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string ClaveAnt = rows["ClaveAnt"].ToString();
                                string ClaveNueva = rows["ClaveNueva"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', MAX_INFA = 2  where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string formato1 = $"update GN_ACCAJ set USU_BLOQ='N' where COD_EMPR='9' and COD_EMPL = "+"'"+EmpleadoUser+"'";
                                        db.UpdateDeleteInsert(formato1, database, user);

                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', MAX_INFA = 2  where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string formato1 = $"update GN_ACCAJ set set USU_BLOQ='N' where COD_EMPR='421' and COD_EMPL = " + "'" + EmpleadoUser + "'";
                                        db.UpdateDeleteInsert(formato1, database, user);

                                    }
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    ChromeDriver driver;
                                    var options = new ChromeOptions();
                                    options.AddArgument("-no-sandbox");
                                    driver = new ChromeDriver(@"C:\deployment\", options, TimeSpan.FromSeconds(240));
                                    driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(240);
                                    driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(240);
                                    driver.Manage().Window.Maximize();
                                    driver.Navigate().GoToUrl(url);
                                    Thread.Sleep(3000);
                                    Screenshot("Login", true, file);
                                    Thread.Sleep(3000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtCodUsua')]")).SendKeys(EmpleadoUser);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(OpenQA.Selenium.Keys.Enter);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(EmpleadoPass);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(EmpleadoPass);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(5000);
                                    driver.FindElement(By.XPath("//*[@id='btnIngresar']")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Primer fallo clave", true, file);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{ESC}");
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(OpenQA.Selenium.Keys.Enter);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(EmpleadoPass);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(EmpleadoPass);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(5000);
                                    driver.FindElement(By.XPath("//*[@id='btnIngresar']")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Segundo fallo clave", true, file);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{ESC}");
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).Click();
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(OpenQA.Selenium.Keys.Enter);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(EmpleadoPass);
                                    Thread.Sleep(2000);
                                    driver.FindElement(By.XPath("//input[contains(@name,'txtPasUsua')]")).SendKeys(EmpleadoPass);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(5000);
                                    driver.FindElement(By.XPath("//*[@id='btnIngresar']")).Click();
                                    Thread.Sleep(2000);
                                    Screenshot("Bloqueo Usuario", true, file);
                                    Thread.Sleep(2000);
                                    driver.Close();
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                    //CONSULTA BASE DATOS
                                    if (database == "SQL")
                                    {
                                        string consulta = $"Select USU_BLOQ from GN_ACCAJ where COD_EMPR=9 and COD_EMPL="+"'"+EmpleadoUser+"'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["USU_BLOQ"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    //Parametrizacion
                                    if (database == "SQL")
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', MAX_INFA = NULL  where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string update = $"update gn_accaj set IND_ENTR='S' where COD_EMPR='9'";
                                        db.UpdateDeleteInsert(update, database, user);
                                    }
                                    else
                                    {
                                        string formato = $"update PE_CONFI set PWB_CLTP='A', MAX_INFA = NULL  where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(formato, database, user);
                                        string update = $"update gn_accaj set IND_ENTR='S' where COD_EMPR='421'";
                                        db.UpdateDeleteInsert(update, database, user);

                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CertificadoFijoImágenesKpeConfi()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoFijoImágenesKpeConfi")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/CertificadoFijo.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(20000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //PUESTO DE TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    //CHECK CERTIFICADO LABORAL
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Check Certificado Laboral (Sueldo Fijo)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(8000);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    Thread.Sleep(3000);
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(5000);
                                    Screenshot("Reporte Generado", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Certificado Fijo", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("CertificadoFijo");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/CertificadoFijo.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_CertificadoLaboralFijoDatos()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoLaboralFijoDatos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    DateTime dateAndTime = DateTime.Now;
                                    string fecha = dateAndTime.ToString("yyyyMMdd");
                                    string archivo = "Cert_'" + fecha + "'";

                                    DateTime dateAndTimeORA = DateTime.Now;
                                    string fechaORA = dateAndTimeORA.ToString("dd-MM-yyyy");
                                    string archivoORA = "Cert_'" + fechaORA + "'";


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    //CHECK CERFIFICADO FIJO
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Certificado Laboral (Sueldo Fijo)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(5000);
                                    Screenshot("Reporte Generado", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Certificado Fijo Datos", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    Thread.Sleep(6000);
                                    SendKeys.SendWait("{ESC}");
                                    //GUARDAR PDF
                                    selenium.Click("//a[@id='ImprimirPDF']/span");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    Thread.Sleep(6000);

                                    if (database == "SQL")
                                    {
                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(10000);
                                        SendKeys.SendWait(EmpleadoUser);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(10000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        KillProcesos("Acrobat.exe");
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                        selenium.ChangeWindow(mainWin);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(10000);
                                        SendKeys.SendWait(EmpleadoUser);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(10000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        KillProcesos("Acrobat.exe");
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                        selenium.ChangeWindow(mainWin);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                    }
                                    
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void GN_CertificadoLaboralSueldoVariable()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoLaboralSueldoVariable")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    DateTime dateAndTime = DateTime.Now;
                                    string fecha = dateAndTime.ToString("yyyyMMdd");
                                    string archivo = "Cert_'" + fecha + "'";

                                    DateTime dateAndTimeORA = DateTime.Now;
                                    string fechaORA = dateAndTimeORA.ToString("dd-MM-yyyy");
                                    string archivoORA = "Cert_'" + fechaORA + "'";


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    //CHECK EN CERTIFICADO VARIABLE
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerVari']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerVari']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Certificado Laboral (Sueldo Variable)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(8000);

                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();

                                    if (selenium.CountWindow() >= 2)
                                    {
                                        selenium.ChangeWindow(modalWin);
                                        Thread.Sleep(4000);
                                        Screenshot("Reporte Generado", true, file);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Variable", true, file); ;
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        SendKeys.SendWait("{ESC}");
                                        //GUARDAR PDF
                                        selenium.Click("//a[@id='ImprimirPDF']/span");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        Thread.Sleep(6000);

                                        if (database == "SQL")
                                        {
                                            //ABRIR PDF
                                            string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            SendKeys.SendWait(EmpleadoUser);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(2000);
                                            selenium.Close();
                                            Thread.Sleep(2000);
                                        }
                                        if (database == "ORA")
                                        {
                                            //ABRIR PDF
                                            string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            SendKeys.SendWait(EmpleadoUser);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(2000);
                                            selenium.Close();
                                            Thread.Sleep(2000);
                                        }
                                    }
                                    else

                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: EL CERTIFICADO LABORAL VARIABLE NO SE GENERO PARA EL EMPEADO " + EmpleadoUser);
                                    }
                                    selenium.ChangeWindow(mainWin);
                                    selenium.Close();
                                   
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_CertificadoLaboralCatedráticos()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoLaboralCatedráticos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/CertificadoCatedráticos.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO/MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    //CHECK CERTIFICADO CATEDRATICO
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerCate']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerCate']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Certificado Laboral (Catedráticos)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(8000);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin);
                                        Thread.Sleep(5000);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Certificado Laboral Catedráticos", true, file);
                                        Thread.Sleep(5000);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{DOWN}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 4; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("CertificadoCatedráticos");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/CertificadoCatedráticos.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        //LimpiarProcesos();
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: EL CERTIFICADO LABORAL CATEDRATICO NO SE GENORO PARA EL EMPLEADO " + EmpleadoUser);
                                    }
                                    selenium.ChangeWindow(mainWin);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void GN_CertificadoLaboralMembrete()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_CertificadoLaboralMembrete")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                //Variables
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Correo"].ToString().Length != 0 && rows["Correo"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string user = rows["user"].ToString();
                                //Variables
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Correo = rows["Correo"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    
                                    DateTime dateAndTime = DateTime.Now;
                                    string fecha = dateAndTime.ToString("yyyyMMdd");
                                    string archivo = "Cert_'"+fecha+"'";

                                    DateTime dateAndTimeORA = DateTime.Now;
                                    string fechaORA = dateAndTimeORA.ToString("dd-MM-yyyy");
                                    string archivoORA = "Cert_'" + fechaORA + "'";


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo+".pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //CHECK CERTIFICADO FIJO
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    selenium.Screenshot("Check Certificado Fijo", true, file);
                                    //GENERAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(4000);

                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin);
                                        Thread.Sleep(5000);
                                        Screenshot("Certificado fijo Generado", true, file);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Laboral Sueldo Fijo", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        Thread.Sleep(6000);
                                        SendKeys.SendWait("{ESC}");
                                        //GUARDAR PDF
                                        selenium.Click("//a[@id='ImprimirPDF']/span");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        Thread.Sleep(6000);

                                        if (database == "SQL")
                                        {
                                            //ABRIR PDF
                                            string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            SendKeys.SendWait(EmpleadoUser);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(2000);
                                            selenium.Close();
                                            Thread.Sleep(2000);
                                        }
                                        if (database == "ORA")
                                        {
                                            //ABRIR PDF
                                            string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            SendKeys.SendWait(EmpleadoUser);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(2000);
                                            selenium.Close();
                                            Thread.Sleep(2000);
                                        }

                                    }
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                    Thread.Sleep(2000);

                                    selenium.ChangeWindow(mainWin);
                                    //Segundo certificado
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerVari']");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerVari']");
                                    selenium.Screenshot("Check Certificado Variable", true, file);
                                    //GENERAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(4000);
                                    //String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin1);
                                        Thread.Sleep(4000);
                                        Screenshot("Certificado Laboral Variable Generado", true, file);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Laboral Sueldo Variable", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        SendKeys.SendWait("{ESC}");
                                        //GUARDAR PDF
                                        selenium.Click("//a[@id='ImprimirPDF']/span");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        Thread.Sleep(6000);

                                        if (database == "SQL")
                                        {
                                            //ABRIR PDF
                                            string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            SendKeys.SendWait(EmpleadoUser);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(2000);
                                            selenium.Close();
                                            Thread.Sleep(2000);
                                        }
                                        if (database == "ORA")
                                        {
                                            //ABRIR PDF
                                            string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                            Process.Start(pdfPath);
                                            Thread.Sleep(10000);
                                            SendKeys.SendWait(EmpleadoUser);
                                            SendKeys.SendWait("{ENTER}");
                                            Thread.Sleep(10000);
                                            Screenshot("PDF ABIERTO", true, file);
                                            KillProcesos("Acrobat.exe");
                                            Thread.Sleep(2000);
                                            selenium.Close();
                                            Thread.Sleep(2000);
                                        }
                                    }
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivoORA + ".pdf");
                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);

                                    //Tercer certificado
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerCate']");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerCate']");
                                    selenium.Screenshot("Check Certificado Catedráticos", true, file);
                                    //GENERAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(4000);

                                    String modalWin2 = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin2);
                                        Thread.Sleep(4000);
                                        Screenshot("Certificado Laboral Catedráticos Generado", true, file);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Laboral Catedráticos", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        SendKeys.SendWait("{ESC}");
                                        //GUARDAR PDF
                                        selenium.Click("//a[@id='ImprimirPDF']/span");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        Thread.Sleep(6000);
                                        ////ABRIR PDF
                                        //string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/CertificadoCatedraticoMembrete.pdf");
                                        //Process.Start(pdfPath);
                                        //Thread.Sleep(6000);
                                        //Screenshot("PDF ABIERTO", true, file);
                                        ////LimpiarProcesos();

                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                    }

                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    selenium.Close();
                                    KillProcesos("Acrobat.exe");
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    File.Delete("C:/Users/" + username + "/Downloads/" + archivo + ".pdf");
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void GN_FormatoHojaVidaEmpresaPrivada()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_FormatoHojaVidaEmpresaPrivada")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewver/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete(@"C:\Users\" + username + @"\Downloads\Hoja de vida.pdf");
                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'R' WHERE COD_EMPR = 9";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'R' WHERE COD_EMPR = 421";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A MIS REPORTES", true, file);
                                    //SELECCIONAR HOJA DE VIDA
                                    selenium.Scroll("//div[@id='ctl00_ContenidoPagina_pHojVida']/div/div/span/input");
                                    selenium.Click("//div[@id='ctl00_ContenidoPagina_pHojVida']/div/div/span/input");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CHECK HOJA DE VIDA", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(2000);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("REPORTE HOJA DE VIDA", true, file);

                                    //IMPRIMIR
                                    selenium.Click("//*[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(4000);
                                    Screenshot("Imprimir", true, file);
                                    SendKeys.SendWait("{ESC}");

                                    //PDF
                                    selenium.Click("//*[@id='ctl00_btnImprimirPDFToolbar']");
                                    Thread.Sleep(4000);
                                    Screenshot("PDF", true, file);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\Hoja de vida.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                      
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_FormatoÚnicoHojaVidaPersonaNaturalEmpresaPública()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_GN.GN_FormatoÚnicoHojaVidaPersonaNaturalEmpresaPública")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewver/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete(@"C:\Users\" + username + @"\Downloads\Hoja_De_Vida.pdf");
                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'P' WHERE COD_EMPR = 9";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'P' WHERE COD_EMPR = 421";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A MIS REPORTES", true, file);

                                    //SELECCIONAR HOJA DE VIDA
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_chkHojVida']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkHojVida']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CHECK FORMATO UNICO HOJA VIDA", true, file);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(2000);

                                    ////VENTANA REPORTE 
                                    //String mainWin = selenium.MainWindow();
                                    //String modalWin = selenium.PopupWindow();
                                    //selenium.ChangeWindow(modalWin);
                                    //Thread.Sleep(4000);
                                    //Screenshot("REPORTE HOJA DE VIDA", true, file);
                                    //selenium.MaximizeWindow();
                                    //Thread.Sleep(4000);
                                    //if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                    //{
                                    //    selenium.Click("//a[@id='ctl00_btnCerrar']");
                                    //    Thread.Sleep(3000);

                                    //}


                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_imprimirPDF']");
                                    Thread.Sleep(10000);
                                    Screenshot("PDF", true, file);
                                    Thread.Sleep(3000);
                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, @"C:\Users\" + username + @"\Downloads\Hoja_De_Vida.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(5000);
                                    //selenium.Close();
                                    //selenium.ChangeWindow(mainWin);

                                    ////GENERAR
                                    //selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    //Thread.Sleep(2000);

                                    ////VENTANA REPORTE 
                                    //String mainWin1 = selenium.MainWindow();
                                    //String modalWin1 = selenium.PopupWindow();
                                    //selenium.ChangeWindow(modalWin1);
                                    //Thread.Sleep(4000);
                                    //Screenshot("REPORTE HOJA DE VIDA", true, file);
                                    //selenium.MaximizeWindow();
                                    //Thread.Sleep(4000);
                                    //if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                    //{
                                    //    selenium.Click("//a[@id='ctl00_btnCerrar']");
                                    //    Thread.Sleep(3000);

                                    //}

                                    //DESCARGAR PDF
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_imprimir']");
                                    Thread.Sleep(10000);
                                    Screenshot("IMPRIMIR", true, file);
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ESC}");
                                    //selenium.Close();
                                    //selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(4000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    KillProcesos("Acrobat.exe");
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
    }
}