using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Input;
using System.Windows.Forms;
using System.Drawing;
using OpenQA.Selenium.Chrome;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using System.Data;
using DocumentFormat.OpenXml.Office2010.ExcelAc;
using APITest;
using Keys = OpenQA.Selenium.Keys;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;

namespace Web_Kactus_Test_V2
{
    /// <summary>
    /// Descripción resumida de SelfServices
    /// </summary>

    [TestClass]
    public class Modulo_NM : FuncionesVitales
    {

        string Modulo = "Modulo_NM";
        string app = "SmartPeople";

        APISelenium selenium = new APISelenium();
        APIFuncionesVitales fv = new APIFuncionesVitales();
        APIDatabase db = new APIDatabase();

        public Modulo_NM()
        {

        }

        [TestMethod]
        public void NM_EnvíoCorreoMisVacaciones()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoMisVacaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (

                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Mis Vacaciones    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["FechaInicial"].ToString().Length != 0 && rows["FechaInicial"].ToString() != null &&
                                rows["FechaFinal"].ToString().Length != 0 && rows["FechaFinal"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["NumSolicitud"].ToString().Length != 0 && rows["NumSolicitud"].ToString() != null &&
                                rows["SecSolicitud"].ToString().Length != 0 && rows["SecSolicitud"].ToString() != null &&
                                 rows["CodEmpre"].ToString().Length != 0 && rows["CodEmpre"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string FechaInicial = rows["FechaInicial"].ToString();
                                string FechaFinal = rows["FechaFinal"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string NumSolicitud = rows["NumSolicitud"].ToString();
                                string SecSolicitud = rows["SecSolicitud"].ToString();
                                string CodEmpre = rows["CodEmpre"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);


                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Screenshot("Nueva Solicitud de Vacaciones", true, file);
                                    //FECHA INICIO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaInicial);
                                    Thread.Sleep(3000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //FECHA FINAL
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaFinal);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Fechas", true, file);
                                    Thread.Sleep(3000);
                                    SendKeys.SendWait("{TAB}");
                                    //OBSERVACIONES
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KtxtObserSoli_txtTexto']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KtxtObserSoli_txtTexto']", Observacion);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    Thread.Sleep(1200);
                                    //OBSERVACIONES
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KtxtObserSoli_txtTexto']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KtxtObserSoli_txtTexto']", Observacion);
                                    Thread.Sleep(2000);
                                    //APLICAR
                                    selenium.Click("//*[@id='btnGuardar']");
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Vacaciones registrado", true, file);
                                    Thread.Sleep(7000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_EnvíoCorreoVacacionesEnDinero()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoVacacionesEnDinero")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Mis Descansos en Dinero
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["DiasTomadosDin"].ToString().Length != 0 && rows["DiasTomadosDin"].ToString() != null &&
                                rows["AñoFechaInicial"].ToString().Length != 0 && rows["AñoFechaInicial"].ToString() != null &&
                                rows["MesFechaInicial"].ToString().Length != 0 && rows["MesFechaInicial"].ToString() != null &&
                                rows["DiaFechaInicial"].ToString().Length != 0 && rows["DiaFechaInicial"].ToString() != null &&
                                rows["TipSoli"].ToString().Length != 0 && rows["TipSoli"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                            {

                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string DiasTomadosDin = rows["DiasTomadosDin"].ToString();
                                string AñoFechaInicial = rows["AñoFechaInicial"].ToString();
                                string MesFechaInicial = rows["MesFechaInicial"].ToString();
                                string DiaFechaInicial = rows["DiaFechaInicial"].ToString();
                                string TipSoli = rows["TipSoli"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string FechaInicial = rows["FechaInicial"].ToString();
                                string FechaFinal = rows["FechaFinal"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    string Borrar1Tabla = $"DELETE FROM nm_prova WHERE cod_empl={EmpleadoUser} and aut_mint ={EmpleadoUser}";
                                    db.UpdateDeleteInsert(Borrar1Tabla, database, user);
                                    string Borrar2Tabla = $"DELETE from nm_soltr where cod_resp ={EmpleadoUser} and tip_apli = '{TipSoli}'";
                                    db.UpdateDeleteInsert(Borrar2Tabla, database, user);

                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES EN DINERO NUEVA SOLICITUD
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'Mis vacaciones en Dinero')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mis vacaciones en Dinero", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Screenshot("Nueva solicitud", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtDiaTomd']");
                                    Thread.Sleep(2000);
                                    //DIAS TOMADOS
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtDiaTomd']", DiasTomadosDin);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Días tomados", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(10000);
                                    //FECHA INICIO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaInicial);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fechas", true, file);
                                    SendKeys.SendWait("{TAB}");
                                    //APLICAR
                                    selenium.Click("//*[@id='btnGuardar']");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES EN DINERO NUEVA SOLICITUD
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'Mis vacaciones en Dinero')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mis vacaciones en Dinero Registrada", true, file);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void NM_EnvíoCorreoHorasExtra()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoHorasExtra")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&

                                rows["HoraInicio"].ToString().Length != 0 && rows["HoraInicio"].ToString() != null &&
                                rows["HoraInicioSeg"].ToString().Length != 0 && rows["HoraInicioSeg"].ToString() != null &&
                                rows["HoraFinal"].ToString().Length != 0 && rows["HoraFinal"].ToString() != null &&
                                rows["HoraFinalSeg"].ToString().Length != 0 && rows["HoraFinalSeg"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["Justificacion"].ToString().Length != 0 && rows["Justificacion"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &
                                rows["FechaAnio"].ToString().Length != 0 && rows["FechaAnio"].ToString() != null &
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string HoraInicio = rows["HoraInicio"].ToString();
                                string HoraInicioSeg = rows["HoraInicioSeg"].ToString();
                                string HoraFinal = rows["HoraFinal"].ToString();
                                string HoraFinalSeg = rows["HoraFinalSeg"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string Justificacion = rows["Justificacion"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string url = rows["url"].ToString();
                                string FechaAnio = rows["FechaAnio"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    string BorrarSolicitud = $"DELETE from NM_SOLTR where COD_EMPR ='{CodEmpresa}' and COD_RESP ='{EmpleadoUser}' and ACT_USUA ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(BorrarSolicitud, database, user);

                                    string BorrarDetalle = $"Delete from NM_ORPRE where COD_EMPL= '{EmpleadoUser}' AND COD_EMPR ='{CodEmpresa}' and ACT_USUA ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(BorrarDetalle, database, user);

                                    if (database == "ORA")
                                    {
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Solicitud Horas Extras", true, file);
                                        //NUEVA SOLICITUD
                                        selenium.Click("//a[@id='ctl00_btnNuevo']/i");
                                        selenium.Screenshot("Nueva solicitud", true, file);

                                        //FECHA INICIO AÑO MES DIAS
                                        selenium.Scroll("//select[contains(@id,'ddlFecInicA')]");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFecInicA')]", FechaAnio);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//select[contains(@id,'ddlFecInicM')]");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFecInicM')]", FechaInicio);
                                        selenium.Screenshot("Fechas Inicio", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_DiasProg_ctl02_C20']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_DiasProg_ctl02_C20']");
                                        Thread.Sleep(2000);
                                        //HORA INICIO
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraInicio, "AM", 4);
                                        Thread.Sleep(5000);
                                        //HORA FINAL
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraFinal, "AM", 5);
                                        Thread.Sleep(5000);
                                        //MOTIVO
                                        selenium.Scroll("//select[contains(@id,'ddlCodMhoe')]");
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodMhoe')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //CONCEPTO
                                        selenium.Scroll("//select[contains(@id,'ddlCodConc')]");
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodConc')]", Concepto);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Concepto", true, file);
                                        //JUSTIFICACION
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]");
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]", Justificacion);
                                        selenium.Screenshot("Registro Horas Extras", true, file);
                                        Thread.Sleep(2000);
                                        //GUARDAR 
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Noificación", true, file);
                                        Thread.Sleep(3000);
                                        for (int i = 0; i < 2; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(3000);
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Horas Extras Registrada", true, file);

                                    }
                                    else
                                    {
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Solicitud Horas Extras", true, file);
                                        //NUEVA
                                        selenium.Click("//a[@id='ctl00_btnNuevo']/i");
                                        selenium.Screenshot("Nueva solicitud", true, file);
                                        Thread.Sleep(1500);
                                        //SELECCIONAR EMPLEADO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgNmOrpre_ctl02_chcod']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgNmOrpre_ctl02_chcod']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Empleado", true, file);
                                        //REGISTRAR
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnProgramar']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnProgramar']");
                                        Thread.Sleep(2000);

                                        //FECHA INICIO AÑO MES DIAS
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_ddlFecInicA']");
                                        selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecInicA']", FechaAnio);
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_ddlFecInicM']");
                                        selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecInicM']", FechaInicio);
                                        selenium.Screenshot("Fecha Inicio", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_DiasProg_ctl02_C20']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_DiasProg_ctl02_C20']");
                                        Thread.Sleep(2000);
                                        //HORA INICIO
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraInicio, "AM", 4);
                                        Thread.Sleep(5000);
                                        //HORA FINAL
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraFinal, "AM", 5);
                                        Thread.Sleep(5000);
                                        //MOTIVO
                                        selenium.Scroll("//select[contains(@id,'ddlCodMhoe')]");
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodMhoe')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //CONCEPTO
                                        selenium.Scroll("//select[contains(@id,'ddlCodConc')]");
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodConc')]", Concepto);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Concepto", true, file);
                                        //JUSTIFICACION
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]");
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]", Justificacion);
                                        selenium.Screenshot("Registro Horas Extras", true, file);
                                        Thread.Sleep(2000);
                                        //GUARDAR 
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Noificación", true, file);
                                        Thread.Sleep(3000);
                                        for (int i = 0; i < 2; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(3000);
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Horas Extras Registrada", true, file);
                                    }

                                    Thread.Sleep(8000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                    Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void NM_EnvíoCorreoCesantías()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();


            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoCesantías")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Cesantias
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["MotivoSolicitud"].ToString().Length != 0 && rows["MotivoSolicitud"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["Observacion1"].ToString().Length != 0 && rows["Observacion1"].ToString() != null &&
                                rows["Observacion2"].ToString().Length != 0 && rows["Observacion2"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string MotivoSolicitud = rows["MotivoSolicitud"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string Observacion1 = rows["Observacion1"].ToString();
                                string Observacion2 = rows["Observacion2"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTROS PREVIOS

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarConflicto = $"Delete from NM_REQCE where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarConflicto, database, user);

                                    string eliminarCesantia = $"Delete from NM_CESPA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarCesantia, database, user);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS CESANTIAS
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    selenium.Click("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(2000);
                                    //Motivo solicitud 
                                    selenium.Scroll("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMces')]");
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMces')]", MotivoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //Tipo de solicitud 
                                    selenium.Scroll("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipSoli')]");
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipSoli')]", TipoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Solicitud", true, file);
                                    //Valor solicitado 
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]");
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]", ValorSolicitado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargar Datos Iniciales", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'txtObsSeva_txtTexto')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[contains(@id,'txtObsSeva_txtTexto')]", Observacion1);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys(("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]"), Observacion2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Observaciones Finales", true, file);
                                    //GUARDAR EDICION
                                    selenium.Click("//a[@id='btnGuardar']/i");
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Registrada con Éxito", true, file);
                                    Thread.Sleep(5000);
                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS CESANTIAS
                                    Thread.Sleep(200);
                                    selenium.Scroll("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    selenium.Click("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    Thread.Sleep(200);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(12000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]

        public void NM_FlujoAprobaciónLicenciasCalamidadesRolLider()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónLicenciasCalamidadesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Solicitud Licencias y Calamidades Aprobacion
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["NumContrato"].ToString().Length != 0 && rows["NumContrato"].ToString() != null &&
                                rows["CodLicencia"].ToString().Length != 0 && rows["CodLicencia"].ToString() != null &&
                                 rows["EstadoSolicitud"].ToString().Length != 0 && rows["EstadoSolicitud"].ToString() != null



                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string NumContrato = rows["NumContrato"].ToString();
                                string CodLicencia = rows["CodLicencia"].ToString();
                                string EstadoSolicitud = rows["EstadoSolicitud"].ToString();
                                string Nombre = rows["Nombre"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(6000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //NUEVO
                                        selenium.Click("//span[@id='ctl00_lblNuevo']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Agregar Nuevo", true, file);
                                        Thread.Sleep(2000);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //FECHA
                                        //FECHA
                                        //selenium.Scroll("//a[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_imgCalendario']/span");
                                        //selenium.Click("//a[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_imgCalendario']/span");
                                        //Thread.Sleep(2000);
                                        //selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_cetxtFecha_day_5_6']");
                                        //Thread.Sleep(4000);
                                        //selenium.Screenshot("Fecha", true, file);
                                        //FECHA
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']");
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']", Fecha);
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("Fecha", true, file);
                                        //OBSERVACIONES
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]");
                                        selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                        Thread.Sleep(3000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        selenium.Screenshot("Datos ingresados", true, file);
                                        selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                        Thread.Sleep(3000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        //GUARDAR
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(1000);
                                        Screenshot("Notificación Registro Exitoso", true, file);
                                        Thread.Sleep(3000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(1000);

                                    }
                                    else
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(1500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //NUEVO
                                        selenium.Click("//span[@id='ctl00_lblNuevo']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Agregar Nuevo", true, file);
                                        Thread.Sleep(2000);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        ////FECHA
                                        //selenium.Click("//a[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_imgCalendario']/span");
                                        //Thread.Sleep(2000);
                                        //selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_cetxtFecha_day_5_6']");
                                        //Thread.Sleep(4000);
                                        //selenium.Screenshot("Fecha", true, file);
                                        //FECHA
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']", Fecha);
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("Fecha", true, file);
                                        //OBSERVACIONES
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]");
                                        Thread.Sleep(2500);
                                        selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]");
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        selenium.Screenshot("Datos ingresados", true, file);
                                        Thread.Sleep(2500);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        //GUARDAR
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(1000);
                                        Screenshot("Notificación Registro Exitoso", true, file);
                                        Thread.Sleep(3000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(1000);
                                    }
                                    //VALIDACION REGISTRO
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Solicitud Radicada", true, file);
                                    selenium.AcceptAlert();
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //Abrir en Rol Lider para Aprobar Licencia y/o Calamidad
                                    Thread.Sleep(2000);
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(500);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);
                                        Thread.Sleep(2500);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);
                                    }

                                    //BUSCAR
                                    selenium.SendKeys("//div[@id='tableLicencias_filter']/label/input", Nombre);
                                    Thread.Sleep(2500);
                                    if (selenium.ExistControl("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i"))
                                    {
                                        //SELECCIONAR REGISTRO
                                        selenium.Screenshot("Seleccionar Registro Licencias y Calamidades", true, file);
                                        Thread.Sleep(2500);
                                        selenium.Scroll("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                        Thread.Sleep(2500);
                                        selenium.Click("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                        Thread.Sleep(2500);
                                        //REGISTRO POR APROBAR
                                        selenium.Screenshot("Registro para Aprobar", true, file);
                                        Thread.Sleep(2500);
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl02_LinkButton1']/i");
                                        Thread.Sleep(2500);
                                        //APROBACION
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2500);
                                        selenium.Click("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(2000);
                                        Screenshot("Solicitud Aprobada", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(5000);
                                        //ENVIO CORREO
                                        selenium.Screenshot("Envia Correo Aprobación", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(5000);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    Thread.Sleep(5000);

                                    //VERIFICACION ESTADO APROBACION SOLICITUD
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //DETALLE
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Estado Aprobado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Close();

                                    }
                                    else
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(1500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //DETALLE
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Estado Aprobado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Close();
                                    }
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]

        public void NM_FlujoRechazoLicenciasCalamidadesRolLider()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoRechazoLicenciasCalamidadesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Solicitud Licencias y Calamidades Rechazo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["NumContrato"].ToString().Length != 0 && rows["NumContrato"].ToString() != null &&
                                rows["CodLicencia"].ToString().Length != 0 && rows["CodLicencia"].ToString() != null &&
                                rows["EstadoSolicitud"].ToString().Length != 0 && rows["EstadoSolicitud"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string NumContrato = rows["NumContrato"].ToString();
                                string CodLicencia = rows["CodLicencia"].ToString();
                                string EstadoSolicitud = rows["EstadoSolicitud"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Licencias y calamidades", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMaus')]", Motivo);
                                    Thread.Sleep(2000);
                                    //FECHA
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']");
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']", Fecha);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Fecha", true, file);
                                    Thread.Sleep(4000);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]", Observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Datos ingresados", true, file);
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos ingresados", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    Screenshot("Notificación Guardado Exitoso", true, file);
                                    Thread.Sleep(3000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(3000);
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1500);
                                    Screenshot("Solicitud Radicada", true, file);
                                    selenium.AcceptAlert();
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //Abrir en Rol Lider para Aprobar Licencia y/o Calamidad
                                    Thread.Sleep(2000);
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(5000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Líder", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(2000);
                                    }

                                    //BUSCAR
                                    selenium.SendKeys("//div[@id='tableLicencias_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(2500);
                                    if (selenium.ExistControl("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i"))
                                    {
                                        //SELECCIONAR REGISTRO
                                        selenium.Screenshot("Seleccionar Registro Licencias y Calamidades", true, file);
                                        Thread.Sleep(2500);
                                        selenium.Scroll("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                        Thread.Sleep(2500);
                                        selenium.Click("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                        Thread.Sleep(2500);
                                        //REGISTRO POR APROBAR
                                        selenium.Screenshot("Registro para Rechazo", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl02_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        //APROBACION
                                        selenium.Screenshot("Rechazo", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[contains(@id,'Rechaza')]");
                                        Thread.Sleep(2000);
                                        Screenshot("Alerta de Rechazo Exitosa", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(5000);
                                        //ENVIO CORREO
                                        selenium.Screenshot("Envia Correo Rechazo", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(5000);

                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //VERIFICAR ESTADO SOLICITUD
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl03_LinkButton1']/i");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Estado Solicitud", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                   
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                    Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]

        public void NM_RegistroDeducibleVivienda()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_RegistroDeducibleVivienda")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Deducible"].ToString().Length != 0 && rows["Deducible"].ToString() != null &&
                                rows["ValAnual"].ToString().Length != 0 && rows["ValAnual"].ToString() != null &&
                                rows["FechaFinalMes"].ToString().Length != 0 && rows["FechaFinalMes"].ToString() != null &&
                                rows["FechaInicialMes"].ToString().Length != 0 && rows["FechaInicialMes"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Deducible = rows["Deducible"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string FechaFinalMes = rows["FechaFinalMes"].ToString();
                                string FechaInicialMes = rows["FechaInicialMes"].ToString();
                                string ValAnual = rows["ValAnual"].ToString();
                                string Ruta = rows["Ruta"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        selenium.Click("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                        selenium.Click("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");

                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dedicibles", true, file);
                                    Thread.Sleep(2000);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //SELECCIONAR DEDUCIBLE
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipDeduAux')]", Deducible);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Deducible Vivienda", true, file);
                                    //TERMINOS CONDICIONES
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Términos Condiciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnConDeduSi')]");
                                    Thread.Sleep(2000);
                                    //DECLARACION JURAMENTADA
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Declaración Juramentada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnSi')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Si_Acepto')]");
                                    Thread.Sleep(2000);
                                    //AGREGAR NUEVA DEDUCIBLE
                                    selenium.Screenshot("Agregar Nuevo Deducible", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(2000);
                                    //FECHAS INICIALES
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']", FechaInicialMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    //FECHAS FINALES
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']", FechaFinalMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    //VALOR ANUAL
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtValAnua']", ValAnual);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Valor anual", true, file);
                                    //COMPARTE CREDITO CON OTROS
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_NoDeppor')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_NoDeppor')]");
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{PGDN}");
                                    Thread.Sleep(500);
                                    SendKeys.SendWait("{PGDN}");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='toolContex']/div/div/div[2]/div/div");
                                    Thread.Sleep(500);
                              
                                    Thread.Sleep(2000);
                                    //ADICIONAR REGISTRO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_btnAdiBene')]");
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnAdiBene')]");
                                    Thread.Sleep(1000);
                                    
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Adicionado", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardada Registro Deducible", true, file);
                                    Thread.Sleep(1000);
                                    Thread.Sleep(6000);
                                    fv.ConvertWordToPDF(file, database);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_RegistroDeducibleSalud()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_RegistroDeducibleSalud")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Deducible"].ToString().Length != 0 && rows["Deducible"].ToString() != null &&
                                rows["ValAnual"].ToString().Length != 0 && rows["ValAnual"].ToString() != null &&
                                rows["FechaFinalMes"].ToString().Length != 0 && rows["FechaFinalMes"].ToString() != null &&
                                rows["FechaInicialMes"].ToString().Length != 0 && rows["FechaInicialMes"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Deducible = rows["Deducible"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string FechaFinalMes = rows["FechaFinalMes"].ToString();
                                string FechaInicialMes = rows["FechaInicialMes"].ToString();
                                string ValAnual = rows["ValAnual"].ToString();
                                string Ruta = rows["Ruta"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        selenium.Click("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                        selenium.Click("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");

                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dedicibles", true, file);
                                    Thread.Sleep(2000);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //SELECCIONAR DEDUCIBLE
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipDeduAux')]", Deducible);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Deducible Salud", true, file);
                                    //TERMINOS CONDICIONES
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Términos Condiciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnConDeduSi')]");
                                    Thread.Sleep(2000);
                                    //DECLARACION JURAMENTADA
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Declaración Juramentada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnSi')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Si_Acepto')]");
                                    Thread.Sleep(2000);
                                    //AGREGAR NUEVA DEDUCIBLE
                                    selenium.Screenshot("Agregar Nuevo Deducible", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    Thread.Sleep(2000);
                                    //FECHAS INICIALES
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']", FechaInicialMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    //FECHAS FINALES
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']", FechaFinalMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    //VALOR ANUAL
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtValAnua']", ValAnual);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Valor anual", true, file);
                                    //COMPARTE CREDITO CON OTROS
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{PGDN}");
                                    Thread.Sleep(500);
                                    SendKeys.SendWait("{PGDN}");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='toolContex']/div/div/div[2]/div/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(2000);
                                    //ADICIONAR REGISTRO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_btnAdiBene')]");
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnAdiBene')]");
                                    Thread.Sleep(1000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Adicionado", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardada Registro Deducible", true, file);
                                    Thread.Sleep(1000);
                                    Thread.Sleep(6000);
                                    fv.ConvertWordToPDF(file, database);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_EnvíoCorreoNovedades()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoNovedades")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&

                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["Novedad"].ToString().Length != 0 && rows["Novedad"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Novedad = rows["Novedad"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    string eliminarRegistro = $"DELETE NM_RENOV where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Pruebas')]");
                                    selenium.Click("//a[contains(.,'Novedades Pruebas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("NOVEDADES PRUEBAS", true, file);
                                    //NUEVO
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //EMPLEADO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtcodempl']", EmpleadoUser);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_Consultar']");
                                    //NOVEDADES
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlTiposNovedad']", Novedad);
                                    Thread.Sleep(2000);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValM1_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValM1_txtTexto']", Observacion);
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{PGDN}");
                                    Thread.Sleep(500);
                                    SendKeys.SendWait("{PGDN}");
                                    Thread.Sleep(500);
                                    //ADJUNTO
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait("{ENTER}");
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    //GUARDAR
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Novedad Guardada", true, file);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Pruebas')]");
                                    selenium.Click("//a[contains(.,'Novedades Pruebas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Exitoso", true, file);

                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    Thread.Sleep(2000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]

        public void NM_EnvíoCorreoNovedadesTemporales()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoNovedadesTemporales")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&

                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["VCuota"].ToString().Length != 0 && rows["VCuota"].ToString() != null &&
                                rows["NumCuota"].ToString().Length != 0 && rows["NumCuota"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["VTotal"].ToString().Length != 0 && rows["VTotal"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string VCuota = rows["VCuota"].ToString();
                                string NumCuota = rows["NumCuota"].ToString();
                                string VTotal = rows["VTotal"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    string eliminarRegistro = $"DELETE NM_NOVTE where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    string eliminar = $"DELETE Nm_Soltr WHERE COD_EMPR = '{CodEmpresa}' AND ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminar, database, user);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales colaborador", true, file);
                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //CONCEPTO

                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                    Thread.Sleep(2000);
                                    //CANTIDAD
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtCanNove']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad); SendKeys.SendWait("{TAB}");
                                    //CUOTA
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", VCuota); SendKeys.SendWait("{TAB}");
                                    //NUM CUOTA
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtNumCuot']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuota); SendKeys.SendWait("{TAB}");
                                    //VALOR TOTAL
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", VTotal); SendKeys.SendWait("{TAB}");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", VTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    //CUOTA
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", VCuota); SendKeys.SendWait("{TAB}");
                                    //OBSERVACIONES 1
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", "PRUEBA");
                                    //OBSERVACIONES 2
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", "PRUEBA");

                                    //adjunto
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    for (int i = 0; i < 2; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedad Temporal Agregada", true, file);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("NOVEDADES TEMPORALES REGISTRADO", true, file);
                                    Thread.Sleep(7000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_EnvíoCorreoPermisos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoPermisos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["HoraInicio"].ToString().Length != 0 && rows["HoraInicio"].ToString() != null &&
                                rows["HoraFin"].ToString().Length != 0 && rows["HoraFin"].ToString() != null &&
                                rows["JornadaInicio"].ToString().Length != 0 && rows["JornadaInicio"].ToString() != null &&
                                rows["JornadaFin"].ToString().Length != 0 && rows["JornadaFin"].ToString() != null &&
                                rows["ObservaPer"].ToString().Length != 0 && rows["ObservaPer"].ToString() != null &&
                                rows["ObservaSol"].ToString().Length != 0 && rows["ObservaSol"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["FechaFin"].ToString().Length != 0 && rows["FechaFin"].ToString() != null &&
                                rows["CantidadDias"].ToString().Length != 0 && rows["CantidadDias"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string HoraInicio = rows["HoraInicio"].ToString();
                                string HoraFin = rows["HoraFin"].ToString();
                                string JornadaInicio = rows["JornadaInicio"].ToString();
                                string JornadaFin = rows["JornadaFin"].ToString();
                                string ObservaPer = rows["ObservaPer"].ToString();
                                string ObservaSol = rows["ObservaSol"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string CantidadDias = rows["CantidadDias"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTRO
                                    string eliminarRegistro2 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'P' and COD_RESP = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    
                                    Thread.Sleep(2000);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(10000);
                                    //INGRESO A MIS PERMISOS
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(5000);
                                    selenium.Scroll("//a[contains(.,'Mis Permisos')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Mis Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Permiso", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodMaus']", Motivo);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //FECHA
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha']");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha']", FechaInicio);
                                    Thread.Sleep(6000);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        Thread.Sleep(2000);
                                    }
                                    
                                    // Selecciona la Hora de Inicio
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(HoraInicio, JornadaInicio, 4);
                                    Thread.Sleep(5000);
                                    // Selecciona la Hora de Fin
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(HoraFin, JornadaFin, 5);
                                    //OBSERVACIONES 1
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservaPer);
                                    //OBSERVACIONES 2
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservaSol);
                                    //adjunto
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    for (int i = 0; i < 2; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(2000);
                                    Screenshot("Permiso Ingresado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud registrada", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    Thread.Sleep(4000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(4000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_EnvíoCorreoLicenciasCalamidades()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_EnvíoCorreoLicenciasCalamidades")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodMaus']", Motivo);
                                    Thread.Sleep(2000);
                                    ////FECHA
                                    //selenium.Click("//a[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_imgCalendario']/span");
                                    //Thread.Sleep(2000);
                                    //selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_cetxtFecha_day_5_6']");
                                    //Thread.Sleep(4000);
                                    //selenium.Screenshot("Fecha", true, file);
                                    //FECHA
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']", Fecha);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Fecha", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']");
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observacion);
                                    Thread.Sleep(4000);
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observacion);

                                    //Adjunto Documento
                                    Thread.Sleep(2000);
                                    selenium.Click("//span[contains(@id,'lblAdjunto')]");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(3000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos ingresados", true, file);
                                    //GUARDAR
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(6000);
                                    Screenshot("Notificación", true, file);
                                    Thread.Sleep(3000);
                                    selenium.AcceptAlert();
                                    

                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(5000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES REGISTRADA", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(4000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_FlujoAprobaciónNovedadesTemporalesRolRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónNovedadesTemporalesRolRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    for (int i = 0; i < 1; i++)
                                    {
                                        selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                        Thread.Sleep(2000);
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro1 = $"DELETE NM_NOVTE WHERE COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE  COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='{TipApli}'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                        string eliminarRegistro4 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser1}'";
                                        db.UpdateDeleteInsert(eliminarRegistro4, database, user);
                                        string eliminarRegistro5 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser2}'";
                                        db.UpdateDeleteInsert(eliminarRegistro5, database, user);
                                        Thread.Sleep(2000);
                                        //NOVEDADES
                                        selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                        selenium.Click("//a[contains(.,'NOVEDADES')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                        selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Novedades Temporales colaborador", true, file); Thread.Sleep(2000);
                                        selenium.Click("//a[@id='ctl00_btnNuevo']"); Thread.Sleep(2000);
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlNomConc']"); Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto); Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtCanNove']"); Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad);
                                        SendKeys.SendWait("{TAB}"); Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']"); Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}"); Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtNumCuot']"); Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas); SendKeys.SendWait("{TAB}"); Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']"); Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal);
                                        Thread.Sleep(3000);
                                        SendKeys.SendWait("{TAB}");
                                        //CUOTA
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[@id='btnGuardar']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Novedad Registrada", true, file);
                                        Thread.Sleep(7000);
                                        selenium.Close();

                                        //Aprobador RRHH
                                        selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                        Thread.Sleep(2000);
                                        if (database == "ORA")
                                        {
                                            selenium.Click("//button[contains(.,'GESTION HUMANA')]");
                                        }
                                        else
                                        {
                                            selenium.Click("//button[contains(.,'Rol RRHH')]");
                                        }
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        }

                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                        selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Novedades Temporales RRHH')]");
                                        selenium.Click("//a[contains(.,'Novedades Temporales RRHH')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Novedades Temporales RRHH", true, file);
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tablaSolicitudes_filter']/label/input", EmpleadoUser);
                                        Thread.Sleep(5000);
                                        selenium.Scroll("//*[@id='tablaSolicitudes']/tbody/tr/td[11]/a");
                                        Thread.Sleep(5000);
                                        selenium.Click("//*[@id='tablaSolicitudes']/tbody/tr/td[11]/a");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Novedad", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Close();

                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónNovedadesTemporalesRolLider()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónNovedadesTemporalesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    string eliminarRegistro1 = $"DELETE NM_NOVTE WHERE COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='{TipApli}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    string eliminarRegistro4 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser1}'";
                                    db.UpdateDeleteInsert(eliminarRegistro4, database, user);
                                    string eliminarRegistro5 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser2}'";
                                    db.UpdateDeleteInsert(eliminarRegistro5, database, user);
                                    Thread.Sleep(2000);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Novedades Temporales colaborador", true, file); Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_btnNuevo']"); Thread.Sleep(2000);
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlNomConc']"); Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto); Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtCanNove']"); Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad);
                                    SendKeys.SendWait("{TAB}"); Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']"); Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}"); Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtNumCuot']"); Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas); SendKeys.SendWait("{TAB}"); Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']"); Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); 
                                    Thread.Sleep(3000);
                                    SendKeys.SendWait("{TAB}");
                                    //CUOTA
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(7000);
                                    selenium.Screenshot("Novedad Registrada", true, file);
                                    Thread.Sleep(7000);
                                    selenium.Close();

                                    //Aprobador Lider
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales Lider')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales Lider')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Novedades Temporales Lider", true, file);
                                    //BUSCAR
                                    selenium.SendKeys("//*[@id='tblNmNovte_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(5000);
                                    selenium.Scroll("//*[@id='tblNmNovte']/tbody/tr/td[10]/a");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='tblNmNovte']/tbody/tr/td[10]/a");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Novedad", true, file);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Detalle solicitud", true, file);
                                    Thread.Sleep(4000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Solicitud Aprobada", true, file);
                                    selenium.Screenshot("Aprobación Correcta", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosHoraMinutosRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónDePermisosHoraMinutosRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["PerMoAusentismo"].ToString().Length != 0 && rows["PerMoAusentismo"].ToString() != null &&
                                rows["PerFecIniAno"].ToString().Length != 0 && rows["PerFecIniAno"].ToString() != null &&
                                rows["PerFecIniMes"].ToString().Length != 0 && rows["PerFecIniMes"].ToString() != null &&
                                rows["PerFecIniDia"].ToString().Length != 0 && rows["PerFecIniDia"].ToString() != null &&
                                rows["PerFecIniHra"].ToString().Length != 0 && rows["PerFecIniHra"].ToString() != null &&
                                rows["PerFecIniMin"].ToString().Length != 0 && rows["PerFecIniMin"].ToString() != null &&
                                rows["PerFecIniUso"].ToString().Length != 0 && rows["PerFecIniUso"].ToString() != null &&
                                rows["PerFecFinAno"].ToString().Length != 0 && rows["PerFecFinAno"].ToString() != null &&
                                rows["PerFecFinMes"].ToString().Length != 0 && rows["PerFecFinMes"].ToString() != null &&
                                rows["PerFecFinDia"].ToString().Length != 0 && rows["PerFecFinDia"].ToString() != null &&
                                rows["PerFecFinHra"].ToString().Length != 0 && rows["PerFecFinHra"].ToString() != null &&
                                rows["PerFecFinMin"].ToString().Length != 0 && rows["PerFecFinMin"].ToString() != null &&
                                rows["PerFecFinUso"].ToString().Length != 0 && rows["PerFecFinUso"].ToString() != null &&
                                rows["PerObservacion"].ToString().Length != 0 && rows["PerObservacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["RmtPerm"].ToString().Length != 0 && rows["RmtPerm"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["CodSoli"].ToString().Length != 0 && rows["CodSoli"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string PerMoAusentismo = rows["PerMoAusentismo"].ToString();
                                string PerFecIniAno = rows["PerFecIniAno"].ToString();
                                string PerFecIniMes = rows["PerFecIniMes"].ToString();
                                string PerFecIniDia = rows["PerFecIniDia"].ToString();
                                string PerFecIniHra = rows["PerFecIniHra"].ToString();
                                string PerFecIniMin = rows["PerFecIniMin"].ToString();
                                string PerFecIniUso = rows["PerFecIniUso"].ToString();
                                string PerFecFinAno = rows["PerFecFinAno"].ToString();
                                string PerFecFinMes = rows["PerFecFinMes"].ToString();
                                string PerFecFinDia = rows["PerFecFinDia"].ToString();
                                string PerFecFinHra = rows["PerFecFinHra"].ToString();
                                string PerFecFinMin = rows["PerFecFinMin"].ToString();
                                string PerFecFinUso = rows["PerFecFinUso"].ToString();
                                string PerObservacion = rows["PerObservacion"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string RmtPerm = rows["RmtPerm"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string CodSoli = rows["CodSoli"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTRO
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    string eliminarRegistro3 = $"DELETE NM_AUSEN where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(4000);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Nuevo Permiso", true, file);
                                    //AUSENTISMO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", PerMoAusentismo);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Screenshot("Ausentismo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    string FechaInicio = $"{PerFecIniDia}/{PerFecIniMes}/{PerFecIniAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(500);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        Thread.Sleep(2000);
                                    }
                                    
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Salida
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecIniHra, PerFecIniUso, 4);
                                    Thread.Sleep(1500);
                                    string FechaFinal = $"{PerFecFinDia}/{PerFecFinMes}/{PerFecFinAno}";
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//input[contains(@id,'kcfFechaFinPermiso')]");
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaFinPermiso')]", FechaFinal);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    // Selecciona la Hora de Entrada
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecFinHra, PerFecFinUso, 5);
                                    selenium.Scroll("//textarea[contains(@name,'txtTexto')]");
                                    selenium.SendKeys("//textarea[contains(@name,'txtTexto')]", PerObservacion);
                                    //adjunto
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                               
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    selenium.Screenshot("Datos", true, file);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);
                                    //BUSCAR
                                    selenium.SendKeys("//*[@id='tblNmCtper_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(2000);

                                    if (selenium.ExistControl("//*[@id='tblNmCtper']/tbody/tr/td[9]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");

                                        }
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    ///////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesRolLiderRolJefeEspecífico()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónVacacionesRolLiderRolJefeEspecífico")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                // Data Documentos  RL/////////////////////
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                //rows["rmt3"].ToString().Length != 0 && rows["rmt3"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["FechaHasta"].ToString().Length != 0 && rows["FechaHasta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                //rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["FechaDesde"].ToString().Length != 0 && rows["FechaDesde"].ToString() != null &&
                                rows["FechaDesde2"].ToString().Length != 0 && rows["FechaDesde2"].ToString() != null &&
                                rows["FechaHasta2"].ToString().Length != 0 && rows["FechaHasta2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                string JefeUser3 = rows["JefeUser3"].ToString();
                                string JefePass3 = rows["JefePass3"].ToString();
                                // Data Documentos  RL/////////////////////
                                string user = rows["user"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                //string rmt3 = rows["rmt3"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string FechaHasta = rows["FechaHasta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                //string url = rows["url"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDesde = rows["FechaDesde"].ToString();
                                string FechaDesde2 = rows["FechaDesde2"].ToString();
                                string FechaHasta2 = rows["FechaHasta2"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //eliminar registros previos
                                    if (database == "SQL")
                                    {
                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                        string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                        string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser3}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);

                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='13'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                    }

                                    if (database == "ORA")
                                    {
                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                        string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                        string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser3}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);

                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='45511322'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                    }

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //FECHA DESDE
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    //Fecha hasta
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaHasta);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    //APLICAR
                                    selenium.Click("//*[@id='btnGuardar']");
                                    Thread.Sleep(5000);
                                    Screenshot("Guardar", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud Ingresada", true, file);
                                    //VERIFICAR REGISTRO
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Guardado", true, file);
                                    Thread.Sleep(4000);
                                    selenium.Close();

                                    //Ingreso jefe1
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //Ingreso jefe del jefe
                                    selenium.LoginApps(app, JefeUser2, JefePass2, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Específico", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //Ingreso jefe especifico
                                    selenium.LoginApps(app, JefeUser3, JefePass3, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Específico", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACIONES
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobaciones en Solicitud", true, file);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesLiderJefeDelLider()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónVacacionesLiderJefeDelLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                // Data Documentos  RL/////////////////////
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                rows["Cod_care"].ToString().Length != 0 && rows["Cod_care"].ToString() != null &&
                                rows["NroCont"].ToString().Length != 0 && rows["NroCont"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["FechaHasta"].ToString().Length != 0 && rows["FechaHasta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["FechaDesde"].ToString().Length != 0 && rows["FechaDesde"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                // Data Documentos  RL/////////////////////
                                string user = rows["user"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                string Cod_care = rows["Cod_care"].ToString();
                                string NroCont = rows["NroCont"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string FechaHasta = rows["FechaHasta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDesde = rows["FechaDesde"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                    if (database == "SQL")
                                    {
                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='124'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                     
                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='13'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='14224258'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='45511322'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);
                                    }

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //Fecha desde
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    //Fecha hasta
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaHasta);
                                    //Observaciones
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    //APLICAR
                                    selenium.Click("//*[@id='btnGuardar']");
                                    Thread.Sleep(5000);
                                    Screenshot("Alerta Registro", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud Ingresada", true, file);
                                    //Verificar registro
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Guardado", true, file);
                                    selenium.Close();

                                    //Ingreso jefe1
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }
                                    
                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']","APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //jefe del lider
                                    selenium.LoginApps(app, JefeUser2, JefePass2, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe del Lider", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobaciones en Solicitud", true, file);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónPermisoSubflujoJefeInmediato()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónPermisoSubflujoJefeInmediato")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Solicitud Licencias y Calamidades Rechazo
                                //rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                rows["JefeUser3"].ToString().Length != 0 && rows["JefeUser3"].ToString() != null &&
                                rows["JefePass3"].ToString().Length != 0 && rows["JefePass3"].ToString() != null &&
                                //rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["HoraInicio"].ToString().Length != 0 && rows["HoraInicio"].ToString() != null &&
                                rows["Horario"].ToString().Length != 0 && rows["Horario"].ToString() != null &&
                                rows["FechaFin"].ToString().Length != 0 && rows["FechaFin"].ToString() != null &&
                                rows["HoraFin"].ToString().Length != 0 && rows["HoraFin"].ToString() != null &&
                                rows["Observa"].ToString().Length != 0 && rows["Observa"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                string JefeUser3 = rows["JefeUser3"].ToString();
                                string JefePass3 = rows["JefePass3"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string HoraInicio = rows["HoraInicio"].ToString();
                                string Horario = rows["Horario"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string HoraFin = rows["HoraFin"].ToString();
                                string Observa = rows["Observa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTRO
                                    string eliminarRegistro5 = $"DELETE FROM NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro5, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE FROM NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE FROM NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistro2 = $"DELETE FROM NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser1}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistro3 = $"DELETE FROM NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser2}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistro4 = $"DELETE FROM NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser3}'";
                                    db.UpdateDeleteInsert(eliminarRegistro4, database, user);
                                    Thread.Sleep(4000);
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    //Selecciona la opción de Mis Permisos
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1000);

                                    if (database == "ORA")
                                    {
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Mis Permisos", true, file);
                                        //Agrega un nuevo registro
                                        selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Nuevo Registro", true, file);
                                        Thread.Sleep(1000);
                                        //Selecciona el Motivo
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        //Selecciona Fecha de Inicio
                                        selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha')]");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha')]", FechaInicio);
                                        Thread.Sleep(2000);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                            Thread.Sleep(2000);
                                        }
                                        // Selecciona la Hora de Salida
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraInicio, Horario, 4);
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]");
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]", FechaFin);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraFin, Horario, 5);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//*[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", Observa);
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", Observa);
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        //ADJUNTO Y TIPO DOCUMENTO
                                        for (int i = 0; i < 1; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(2000);
                                        SendKeys.SendWait(Ruta);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Archivo adjunto", true, file);
                                        //GUARDAR
                                        Thread.Sleep(5000);
                                        selenium.Click("//*[@id='btnGuardar']");
                                        Thread.Sleep(1000);
                                  
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        //Selecciona la opción de Mis Permisos
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'Mis Permisos')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Registro Guardado Exitosamente", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                    }
                                    else
                                    {
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Mis Permisos", true, file);

                                        //Agrega un nuevo registro
                                        selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Nuevo Registro", true, file);
                                        Thread.Sleep(1000);

                                        //Selecciona el Motivo
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        //Selecciona Fecha de Inicio
                                        selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha')]");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha')]", FechaInicio);
                                        Thread.Sleep(2000);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                            Thread.Sleep(2000);
                                        }
                                        // Selecciona la Hora de Salida
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraInicio, Horario, 4);
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]", FechaFin);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraFin, Horario, 5);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        Thread.Sleep(1000);
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsErva_txtTexto')]");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsErva_txtTexto')]", Observa);
                                        selenium.Screenshot("Datos Ingresados", true, file);

                                        //adjunto
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                       
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(2000);
                                        SendKeys.SendWait(Ruta);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Archivo adjunto", true, file);
                                        Thread.Sleep(5000);
                                        //GUARDAR
                                        selenium.Click("//*[@id='btnGuardar']");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(3000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'Mis Permisos')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro Guardado Exitosamente", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Close();

                                    }

                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud

                                    Thread.Sleep(2000);
                                    //BUSCAR
                                    selenium.SendKeys("//*[@id='tblNmCtper_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//*[@id='tblNmCtper']/tbody/tr/td[9]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                       
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");

                                        }

                                
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);

                                    selenium.Close();
                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    //Selecciona la opción de Mis Permisos
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1000);
                                    //Detalle
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aprobación registrada", true, file);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesLiderJefeEspecíficoÁrbolNómina()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónVacacionesLiderJefeEspecíficoÁrbolNómina")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                rows["JefeUser3"].ToString().Length != 0 && rows["JefeUser3"].ToString() != null &&
                                rows["JefePass3"].ToString().Length != 0 && rows["JefePass3"].ToString() != null &&

                                // Data Documentos 
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                //rows["Cod_care"].ToString().Length != 0 && rows["Cod_care"].ToString() != null &&
                                rows["NroCont"].ToString().Length != 0 && rows["NroCont"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["FechaHasta"].ToString().Length != 0 && rows["FechaHasta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["FechaDesde"].ToString().Length != 0 && rows["FechaDesde"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                string JefeUser3 = rows["JefeUser3"].ToString();
                                string JefePass3 = rows["JefePass3"].ToString();
                                string JefeUser4 = rows["JefeUser4"].ToString();
                                string JefePass4 = rows["JefePass4"].ToString();

                                // Data Documentos  RL/////////////////////
                                string user = rows["user"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                //string Cod_care = rows["Cod_care"].ToString();
                                string NroCont = rows["NroCont"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string FechaHasta = rows["FechaHasta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDesde = rows["FechaDesde"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //eliminar registros previos

                                    if (database == "SQL")
                                    {
                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                        string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                        string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser3}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);

                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser4}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                    }
                                    if (database == "ORA")
                                    {
                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                        string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                        string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser3}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);

                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser4}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                    }

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //Nuevo
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");

                                    //FECHAS
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Fecha hasta
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaHasta);
                                    //Observaciones
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(500);
                                    //OBSERVACIONES
                                    selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    //APLICAR
                                    selenium.Click("//*[@id='btnGuardar']");
                                    Thread.Sleep(5000);
                                    Screenshot("Alerta Guardar", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Solicitud Ingresada", true, file);

                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Guardado", true, file);

                                    selenium.Close();

                                    //Flujo Autorizacion Lider
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //Flujo Autorizacion Jefe del Jefe
                                    selenium.LoginApps(app, JefeUser2, JefePass2, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Especifico", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //Flujo Autorizacion Especifico

                                    selenium.LoginApps(app, JefeUser3, JefePass3, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //Flujo Autorizacion Arbol
                                    selenium.LoginApps(app, JefeUser4, JefePass4, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Especifico", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //VERIFICAR APROBACIONES
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobaciones en Solicitud", true, file);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }



        [TestMethod]
        public void NM_ReporteNivelEndeudamientoNóminaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoNóminaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE NOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nómina Resumido", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    ////Abrir pdf
                                    //if (database == "ORA")
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/deisyl/Downloads/ArchivoKNmRnien_20220706122240614.PDF");
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);
                                    //}
                                    //else
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + @"/Downloads/ArchivoKNmRnien_20220706122121178.PDF");
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);

                                    //}

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_ReporteNivelEndeudamientoNóminaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoNóminaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
      
                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE NOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE DETALLADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nómina Detallado", true, file);
                                    //GENERAR
                                    
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    string date = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);

                                    //string pdfsql = @"C:\Users\" + username + @"\Downloads\ArchivoKNmRnien_" + date + ".PDF";
                                    //string pdfora = @"C:\Users\" + username + @"\Downloads\ArchivoKNmRnien_" + date + ".PDF";
                                    ////Abrir pdf
                                    //if (database == "ORA")
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, pdfora);
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);
                                    //}
                                    //else
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, pdfsql);
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);

                                    //}

                                    //Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(2000);
                                    //selenium.Close();
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPrimaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoPrimaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Resumido", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    ////Abrir pdf
                                    //if (database == "ORA")
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + @"/Downloads/ArchivoKNmRnien_20220706141355964.PDF");
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);
                                    //}
                                    //else
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + @"/Downloads/ArchivoKNmRnien_20220706141553801.PDF");
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);

                                    //}

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPrimaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoPrimaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE DETALLE
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Detalle", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    ////Abrir pdf
                                    //if (database == "ORA")
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + @"/Downloads/ArchivoKNmRnien_20220706151601425.PDF");
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);
                                    //}
                                    //else
                                    //{
                                    //    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + @"/Downloads/ArchivoKNmRnien_20220706151113228.PDF");
                                    //    Process.Start(pdfPath);
                                    //    Thread.Sleep(60000);

                                    //}

                                    //Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }



        [TestMethod]
        public void NM_FlujoAprobaciónCesantíasRolRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónCesantíasRolRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoPass1"].ToString().Length != 0 && rows["EmpleadoPass1"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                //Variables
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["Valor"].ToString().Length != 0 && rows["Valor"].ToString() != null &&
                                rows["TipoDocumento"].ToString().Length != 0 && rows["TipoDocumento"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string user = rows["user"].ToString();
                                //Variables
                                string Motivo = rows["Motivo"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string Valor = rows["Valor"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTROS PREVIOS

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarConflicto = $"Delete from NM_REQCE where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarConflicto, database, user);

                                    string eliminarCesantia = $"Delete from NM_CESPA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarCesantia, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    //NUEVO
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    selenium.Screenshot("Nuevo", true, file);
                                    //MOTIVO
                                    selenium.Scroll("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMces')]");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMces')]", Motivo);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(1000);
                                    //TIPO SOLICITUD
                                    selenium.Scroll("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipSoli')]");
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipSoli')]", TipoSolicitud);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo Solicitud", true, file);
                                    Thread.Sleep(1000);
                                    //VALOR
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]", Valor);
                                    Thread.Sleep(1500);
                                    
                                   
                                    selenium.Screenshot("Valores Ingresados", true, file);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']");
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']",TipoDocumento);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]");
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]");
                                    SendKeys.SendWait("{TAB}");
                                    SendKeys.SendWait("{TAB}");
                                    SendKeys.SendWait("{TAB}");
                                    SendKeys.SendWait("{TAB}");
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(6000);
                                    SendKeys.SendWait(Ruta);
                                    Thread.Sleep(6000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(6000);
                                    //OBSERVACIONES
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_txtTexto')]", Observaciones);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    Thread.Sleep(1000);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Alerta Registro", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(10000);
                                    Screenshot("Alerta Registro", true, file);
                                    selenium.AcceptAlert();
                                    //VERIFICACION REGISTRO
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cesantía Registrada", true, file);
                                    selenium.Close();


                                    //Aprobacion rhh
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Aprobador", true, file);
                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//*[@id='pRRHH']");
                                    }
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    //CESANTIAS COLABORADORES
                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Cesantias')]");
                                    selenium.Click("//a[contains(.,'Cesantias')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Cesantías de Mis Colaboradores", true, file);
                                    Thread.Sleep(1500);
                                    //DETALLE
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Detalle de la Solicitud", true, file);
                                    Thread.Sleep(1500);
                                   
                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i"))
                                    {
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Solicitud", true, file);
                                        Thread.Sleep(1500);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl02_LinkButton1']/i[1]");
                                        Thread.Sleep(1500);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(3000);
                                        Screenshot("Cesantía Aprobada", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");

                                    }

                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION RRHH EN COLABORADOR

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobación Rol RRHH Registrada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_AprobaciónVacacionesRolRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_AprobaciónVacacionesRolRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoPass1"].ToString().Length != 0 && rows["EmpleadoPass1"].ToString() != null &&
                                rows["DiasTomados"].ToString().Length != 0 && rows["DiasTomados"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["FechaFinal"].ToString().Length != 0 && rows["FechaFinal"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string DiasTomados = rows["DiasTomados"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string FechaFinal = rows["FechaFinal"].ToString();
                                string user = rows["user"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //NUEVO
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaInicio);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Fecha inicio", true, file);
                                    Thread.Sleep(3000);
                                    SendKeys.SendWait("{TAB}");
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaFinal);
                                    Thread.Sleep(3000);
                                    SendKeys.SendWait("{TAB}");
                                    selenium.Screenshot("Fecha final", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    Thread.Sleep(1000);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Vacaciones Registrada", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    try
                                    {
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        }
                                        else
                                        {
                                            selenium.Screenshot("Registro exitoso", true, file);
                                        }
                                    }
                                    catch (Exception e)
                                    {

                                    }
                                    //MIS VACACIONES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Vacaciones registrada", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //Aprobador 1
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Aprobador RRHH", true, file);
                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pRRHH']/span");
                                    }

                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Vacaciones')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Detalle de la Solicitud", true, file);
                                    Thread.Sleep(5000);
                                    //BUSCAR
                                    selenium.Scroll("//*[@id='tableVacaciones_filter']/label/input");
                                    selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(5000);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[10]/a");
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[10]/a");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    selenium.Close();
                                    Thread.Sleep(1000);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //detalle
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    selenium.Screenshot("Aprobacion RRHH", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Close();
                                    Thread.Sleep(1000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }



        [TestMethod]
        public void NM_ReporteDeVacacionesColaboradores()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteDeVacacionesColaboradores")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["Id"].ToString().Length != 0 && rows["Id"].ToString() != null &&
                                rows["Nombre"].ToString().Length != 0 && rows["Nombre"].ToString() != null &&
                                rows["Apellido"].ToString().Length != 0 && rows["Apellido"].ToString() != null
                                //rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null 
                                )

                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string Id = rows["Id"].ToString();
                                string Nombre = rows["Nombre"].ToString();
                                string Apellido = rows["Apellido"].ToString();
                                //string Ruta = rows["Ruta"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/Reporte De Vacaciones..pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                    }

                                    selenium.Screenshot("Rol Lider", true, file);
                                    //REPORTE POR ID
                                    Thread.Sleep(1500);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'Reporte de Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'Reporte de Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Reporte de Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]", Id);
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_btnConsulCed')]/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Reporte Consulta por Identificación", true, file);
                                    Thread.Sleep(500);
                                    //REPORTE POR NOMBRE
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuNomEmpl')]", Nombre);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_btnConsulNom')]/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Consulta por Nombres", true, file);
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuAplEmpl')]", Apellido);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_btnConsulApe')]/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Consulta por Apellidos", true, file);
                                    Thread.Sleep(500);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_lnkAll']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Generar Todos", true, file);
                                    Thread.Sleep(1000);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(7000);
                                    Screenshot("Imprimir PDF", true, file);
                                    SendKeys.SendWait("{ESC}");

                                    //PDF
                                    selenium.Click("//a[@id='ctl00_btnImprimirPDFToolbar']");
                                    Thread.Sleep(7000);
                                    Screenshot("PDF", true, file);

                                    //ABRIR PDF DESCARGADO
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/Reporte De Vacaciones..pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(30000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(7000);
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(7000);
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_FlujoDeAprobaciónCesantíasRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoDeAprobaciónCesantíasRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            if (//Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Cesantias
                                rows["MotivoSolicitud"].ToString().Length != 0 && rows["MotivoSolicitud"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["FechaCorte"].ToString().Length != 0 && rows["FechaCorte"].ToString() != null &&
                                rows["ObsCesantia"].ToString().Length != 0 && rows["ObsCesantia"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                ///Datos Cesantias
                                string MotivoSolicitud = rows["MotivoSolicitud"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string FechaCorte = rows["FechaCorte"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string ObsCesantia = rows["ObsCesantia"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina2 = rows["Maquina"].ToString();
                                string user = rows["user"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTROS PREVIOS

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    string eliminarConflicto = $"Delete from NM_REQCE where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarConflicto, database, user);

                                    string eliminarCesantia = $"Delete from NM_CESPA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarCesantia, database, user);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);

                                    //Process: Solicitud de cesantias
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nueva Solicitud Cesantías", true, file);
                                    //MOTIVO SOLICITUD
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMces')]", MotivoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //TIPO SOLICITUD
                                    selenium.Scroll("//select[contains(@id,'ddlTipSoli')]");
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipSoli')]", TipoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Solicitud", true, file);
                                    //VALOR SOLICITADO
                                    selenium.Scroll("//input[contains(@id,'txtValCesp')]");
                                    selenium.SendKeys("//input[contains(@id,'txtValCesp')]", ValorSolicitado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Valor Solicitado", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'txtObsSeva_txtTexto')]");
                                    selenium.SendKeys("//textarea[contains(@id,'txtObsSeva_txtTexto')]", ObsCesantia);
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]", ObsCesantia);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos nueva cesantía", true, file);

                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']");
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']", "COPIA DE LA CEDULA");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo DOcumento", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(3000);
                                    try
                                    {
                                        Screenshot("Alerta 1", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(3000);
                                        Screenshot("Alerta 2", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Cesantías Registrada", true, file);
                                    selenium.Close();


                                    //Aprobacion Lider
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Aprobador", true, file);
                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    //CESANTIAS COLABORADORES
                                    selenium.Scroll("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Cesantias de Mis Colaboradores')]");
                                    selenium.Click("//a[contains(.,'Cesantias de Mis Colaboradores')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Cesantías de Mis Colaboradores", true, file);
                                    Thread.Sleep(1500);
                                    //DETALLE
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Detalle de la Solicitud", true, file);
                                    Thread.Sleep(1500);

                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i"))
                                    {
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Solicitud", true, file);
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(3000);
                                        Screenshot("Alerta Aprobador", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");

                                    }

                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION LIDER EN COLABORADOR

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobación Rol Lider Registrada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_FlujoAprobaciónLicenciasyCalamidadesRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónLicenciasyCalamidadesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos licencias y calamidades
                                rows["TipoCalamidad"].ToString().Length != 0 && rows["TipoCalamidad"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["ObsCalami"].ToString().Length != 0 && rows["ObsCalami"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["EmpleadoPass2"].ToString().Length != 0 && rows["EmpleadoPass2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos licencias y calamidades
                                string TipoCalamidad = rows["TipoCalamidad"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string ObsCalami = rows["ObsCalami"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string Nombre = rows["Nombre"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    string user = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);

                                    //Process: Calamidades y Licencias
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(200);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Licencias y calamidades", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ingresar calamidad", true, file);
                                    //TIPO CALAMIDAD
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMaus')]", TipoCalamidad);
                                    Thread.Sleep(500);
                                    ////FECHA
                                    //selenium.Click("//a[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_imgCalendario']/span");
                                    //Thread.Sleep(2000);
                                    //selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_cetxtFecha_day_5_6']");
                                    //Thread.Sleep(4000);
                                    //selenium.Screenshot("Fecha", true, file);
                                    //FECHA
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']");
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']", FechaInicio);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Fecha", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]");
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", ObsCalami);
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Datos ingresados", true, file);
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", ObsCalami);
                                    Thread.Sleep(2500);
              
                         
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Notificación Registro Exitoso", true, file);
                                    Thread.Sleep(3000);
                                    selenium.AcceptAlert();

                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(200);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Licencias y calamidades Registrada", true, file);
                                    selenium.Close();

                                    //Abrir en Rol Lider para Aprobar Licencia y/o Calamidad
                                    Thread.Sleep(2000);
                                    selenium.LoginApps(app, EmpleadoUser2, EmpleadoPass2, url, file);
                                    Thread.Sleep(500);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);

                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);

                                        Thread.Sleep(2500);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);

                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);
                                    }

                                    //BUSCAR
                                    selenium.SendKeys("//div[@id='tableLicencias_filter']/label/input", Nombre);
                                    Thread.Sleep(2500);
                                    if (selenium.ExistControl("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i"))
                                    {
                                        //SELECCIONAR REGISTRO
                                        selenium.Screenshot("Seleccionar Registro Licencias y Calamidades", true, file);
                                        Thread.Sleep(2500);
                                        selenium.Scroll("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                        Thread.Sleep(2500);
                                        selenium.Click("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                        Thread.Sleep(2500);
                                        //REGISTRO POR APROBAR
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl02_LinkButton1']/i");
                                        selenium.Screenshot("Registro para Aprobar", true, file);
                                        Thread.Sleep(2500);
                                        //APROBACION
                                        selenium.Click("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(2000);
                                        Screenshot("Aprobar", true, file);
                                        selenium.AcceptAlert();
                                        selenium.Screenshot("Alerta de Aprobación Exitosa", true, file);
                                        Thread.Sleep(5000);
                                        //ENVIO CORREO
                                        selenium.Screenshot("Envia Correo Aprobación", true, file);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(5000);

                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    Thread.Sleep(1000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteListadoPermisosLíderesAsigNiveles()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteListadoPermisosLíderesAsigNiveles")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ListadoLideres.pdf");
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);

                                    selenium.Click("//button[contains(@id,'pAsistente')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Listado Permisos Lideres')]");
                                    selenium.Click("//a[contains(.,'Listado Permisos Lideres')]");

                                    Thread.Sleep(500);
                                    selenium.Screenshot("Listado de Permisos Lideres", true, file);


                                    selenium.Click("//input[contains(@id,'KCtrlFecInic')]");
                                    selenium.SendKeys("//input[contains(@id,'KCtrlFecInic')]", FechaInicio);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_chkAprobado']");
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_chkRechazado']");
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_rblAgruparPor_1']");
                                        Thread.Sleep(1000);
                                    }
                                    selenium.Click("//input[contains(@id,'btnConsultar')]");
                                    selenium.Click("//input[contains(@id,'btnConsultar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Listado", true, file);
                                    selenium.SetImplicitTimeoutSeconds(5);
                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        string Error = selenium.GetText("//span[contains(@id,'lblError')]");
                                        Assert.Fail("ERROR AL CONSULTAR LOS PERMISOS DEL LIDER\n" + Error +
                                                    "\nNO EXISTEN PERMISOS DE LOS LIDERES DESDE LA FECHA " + FechaInicio + " HASTA EL MES EN CURSO");
                                    }
                                    else
                                    {
                                        selenium.Click("//input[contains(@id,'btnReporte')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Reporte", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='ctl00_btnImprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{DOWN}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 6; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("ListadoLideres");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ListadoLideres.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        //LimpiarProcesos();

                                    }
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(7000);
                                    LimpiarProcesos();
                                    //////
                                    ////////////////////////////////////////////////////
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteManualFuncionesAprobados()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteManualFuncionesAprobados")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["Cargo"].ToString().Length != 0 && rows["Cargo"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string Cargo = rows["Cargo"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ManualFunciones.pdf");
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);

                                    //////REPORTES FUNCIONES APROBADOS\\\\\\
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'ANALISIS Y COMPETENCIAS')]");
                                    selenium.Click("//a[contains(.,'ANALISIS Y COMPETENCIAS')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Listado Manual Funciones Aprobadas')]");
                                    selenium.SendKeys("//input[contains(@id,'txtConsuNomCarg')]", Cargo);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Consulta por nombre", true, file);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_btnConsulNom']/span[1]");
                                    Thread.Sleep(3000);
                                    selenium.Click("//td[7]/a/i");

                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Error", true, file);

                                        string Error = selenium.GetText("//span[contains(@id,'lblError')]");
                                        Assert.Fail(Error);
                                    }
                                    else
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Reporte manual de funciones aprobados", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='ctl00_btnImprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{DOWN}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 6; i++)
                                        {
                                            SendKeys.SendWait("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("ManualFunciones");
                                        Thread.Sleep(5000);
                                        SendKeys.SendWait("{ENTER}");
                                        Thread.Sleep(5000);
                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ManualFunciones.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        //LimpiarProcesos();
                                    }
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(7000);
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    ///////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }

                                    if (e.ToString().IndexOf("chrome not reachable") == -1)
                                    {
                                        Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    }

                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosHoraRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónDePermisosHoraRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["PerMoAusentismo"].ToString().Length != 0 && rows["PerMoAusentismo"].ToString() != null &&
                                rows["PerFecIniAno"].ToString().Length != 0 && rows["PerFecIniAno"].ToString() != null &&
                                rows["PerFecIniMes"].ToString().Length != 0 && rows["PerFecIniMes"].ToString() != null &&
                                rows["PerFecIniDia"].ToString().Length != 0 && rows["PerFecIniDia"].ToString() != null &&
                                rows["PerFecIniHra"].ToString().Length != 0 && rows["PerFecIniHra"].ToString() != null &&
                                rows["PerFecIniMin"].ToString().Length != 0 && rows["PerFecIniMin"].ToString() != null &&
                                rows["PerFecIniUso"].ToString().Length != 0 && rows["PerFecIniUso"].ToString() != null &&
                                rows["PerFecFinAno"].ToString().Length != 0 && rows["PerFecFinAno"].ToString() != null &&
                                rows["PerFecFinMes"].ToString().Length != 0 && rows["PerFecFinMes"].ToString() != null &&
                                rows["PerFecFinDia"].ToString().Length != 0 && rows["PerFecFinDia"].ToString() != null &&
                                rows["PerFecFinHra"].ToString().Length != 0 && rows["PerFecFinHra"].ToString() != null &&
                                rows["PerFecFinMin"].ToString().Length != 0 && rows["PerFecFinMin"].ToString() != null &&
                                rows["PerFecFinUso"].ToString().Length != 0 && rows["PerFecFinUso"].ToString() != null &&
                                rows["PerObservacion"].ToString().Length != 0 && rows["PerObservacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["RmtPerm"].ToString().Length != 0 && rows["RmtPerm"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["CodSoli"].ToString().Length != 0 && rows["CodSoli"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string PerMoAusentismo = rows["PerMoAusentismo"].ToString();
                                string PerFecIniAno = rows["PerFecIniAno"].ToString();
                                string PerFecIniMes = rows["PerFecIniMes"].ToString();
                                string PerFecIniDia = rows["PerFecIniDia"].ToString();
                                string PerFecIniHra = rows["PerFecIniHra"].ToString();
                                string PerFecIniMin = rows["PerFecIniMin"].ToString();
                                string PerFecIniUso = rows["PerFecIniUso"].ToString();
                                string PerFecFinAno = rows["PerFecFinAno"].ToString();
                                string PerFecFinMes = rows["PerFecFinMes"].ToString();
                                string PerFecFinDia = rows["PerFecFinDia"].ToString();
                                string PerFecFinHra = rows["PerFecFinHra"].ToString();
                                string PerFecFinMin = rows["PerFecFinMin"].ToString();
                                string PerFecFinUso = rows["PerFecFinUso"].ToString();
                                string PerObservacion = rows["PerObservacion"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string RmtPerm = rows["RmtPerm"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string CodSoli = rows["CodSoli"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTRO
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistroPrevio1 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nuevo Permiso", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", PerMoAusentismo);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Scroll("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    string FechaInicio = $"{PerFecIniDia}/{PerFecIniMes}/{PerFecIniAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(500);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        Thread.Sleep(2000);
                                    }
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Salida
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecIniHra, PerFecIniUso, 4);
                                    Thread.Sleep(500);
                                    string FechaFinal = $"{PerFecFinDia}/{PerFecFinMes}/{PerFecFinAno}";
                                    selenium.Scroll("//input[contains(@id,'kcfFechaFinPermiso')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaFinPermiso')]", FechaFinal);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Entrada
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecFinHra, PerFecFinUso, 5);
                                    selenium.Scroll("//textarea[contains(@name,'txtTexto')]");
                                    selenium.SendKeys("//textarea[contains(@name,'txtTexto')]", PerObservacion);
                                    //adjunto
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]");
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    selenium.Screenshot("Datos", true, file);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);
                                    //BUSCAR
                                    selenium.SendKeys("//*[@id='tblNmCtper_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//*[@id='tblNmCtper']/tbody/tr/td[9]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");

                                        }
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónDePermisosRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["PerMoAusentismo"].ToString().Length != 0 && rows["PerMoAusentismo"].ToString() != null &&
                                rows["PerFecIniAno"].ToString().Length != 0 && rows["PerFecIniAno"].ToString() != null &&
                                rows["PerFecIniMes"].ToString().Length != 0 && rows["PerFecIniMes"].ToString() != null &&
                                rows["PerFecIniDia"].ToString().Length != 0 && rows["PerFecIniDia"].ToString() != null &&
                                rows["PerFecIniHra"].ToString().Length != 0 && rows["PerFecIniHra"].ToString() != null &&
                                rows["PerFecIniMin"].ToString().Length != 0 && rows["PerFecIniMin"].ToString() != null &&
                                rows["PerFecIniUso"].ToString().Length != 0 && rows["PerFecIniUso"].ToString() != null &&
                                rows["PerFecFinAno"].ToString().Length != 0 && rows["PerFecFinAno"].ToString() != null &&
                                rows["PerFecFinMes"].ToString().Length != 0 && rows["PerFecFinMes"].ToString() != null &&
                                rows["PerFecFinDia"].ToString().Length != 0 && rows["PerFecFinDia"].ToString() != null &&
                                rows["PerFecFinHra"].ToString().Length != 0 && rows["PerFecFinHra"].ToString() != null &&
                                rows["PerFecFinMin"].ToString().Length != 0 && rows["PerFecFinMin"].ToString() != null &&
                                rows["PerFecFinUso"].ToString().Length != 0 && rows["PerFecFinUso"].ToString() != null &&
                                rows["PerObservacion"].ToString().Length != 0 && rows["PerObservacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["RmtPerm"].ToString().Length != 0 && rows["RmtPerm"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["CodSoli"].ToString().Length != 0 && rows["CodSoli"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string PerMoAusentismo = rows["PerMoAusentismo"].ToString();
                                string PerFecIniAno = rows["PerFecIniAno"].ToString();
                                string PerFecIniMes = rows["PerFecIniMes"].ToString();
                                string PerFecIniDia = rows["PerFecIniDia"].ToString();
                                string PerFecIniHra = rows["PerFecIniHra"].ToString();
                                string PerFecIniMin = rows["PerFecIniMin"].ToString();
                                string PerFecIniUso = rows["PerFecIniUso"].ToString();
                                string PerFecFinAno = rows["PerFecFinAno"].ToString();
                                string PerFecFinMes = rows["PerFecFinMes"].ToString();
                                string PerFecFinDia = rows["PerFecFinDia"].ToString();
                                string PerFecFinHra = rows["PerFecFinHra"].ToString();
                                string PerFecFinMin = rows["PerFecFinMin"].ToString();
                                string PerFecFinUso = rows["PerFecFinUso"].ToString();
                                string PerObservacion = rows["PerObservacion"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string RmtPerm = rows["RmtPerm"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string CodSoli = rows["CodSoli"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTRO
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistroPrevio1 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nuevo Permiso", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", PerMoAusentismo);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Scroll("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    string FechaInicio = $"{PerFecIniDia}/{PerFecIniMes}/{PerFecIniAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(500);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        Thread.Sleep(2000);
                                    }
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Salida
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecIniHra, PerFecIniUso, 4);
                                    Thread.Sleep(500);
                                    string FechaFinal = $"{PerFecFinDia}/{PerFecFinMes}/{PerFecFinAno}";
                                    Thread.Sleep(500);
                                    selenium.Scroll("//input[contains(@id,'kcfFechaFinPermiso')]");
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaFinPermiso')]", FechaFinal);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Entrada
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecFinHra, PerFecFinUso, 5);
                                    selenium.Scroll("//textarea[contains(@name,'txtTexto')]");
                                    selenium.SendKeys("//textarea[contains(@name,'txtTexto')]", PerObservacion);
                                    //adjunto
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                    SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(1000);
                                   
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]");
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    selenium.Screenshot("Datos", true, file);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);
                                    //BUSCAR
                                    selenium.SendKeys("//*[@id='tblNmCtper_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//*[@id='tblNmCtper']/tbody/tr/td[9]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");

                                        }
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }//LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }



        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosCompensatoriosHoraRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();

            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónDePermisosCompensatoriosHoraRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["Hora1"].ToString().Length != 0 && rows["Hora1"].ToString() != null &&
                                rows["Jornada1"].ToString().Length != 0 && rows["Jornada1"].ToString() != null &&
                                rows["Hora2"].ToString().Length != 0 && rows["Hora2"].ToString() != null &&
                                rows["HoraCompensar1"].ToString().Length != 0 && rows["HoraCompensar1"].ToString() != null &&
                                rows["HoraCompensar2"].ToString().Length != 0 && rows["HoraCompensar2"].ToString() != null &&
                                rows["Jornada2"].ToString().Length != 0 && rows["Jornada2"].ToString() != null &&
                                rows["ObservacionesPermiso"].ToString().Length != 0 && rows["ObservacionesPermiso"].ToString() != null &&
                                rows["ObservacionesSolicitud"].ToString().Length != 0 && rows["ObservacionesSolicitud"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string url = rows["url"].ToString();
                                string user = rows["user"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string Hora1 = rows["Hora1"].ToString();
                                string Jornada1 = rows["Jornada1"].ToString();
                                string Hora2 = rows["Hora2"].ToString();
                                string HoraCompensar1 = rows["HoraCompensar1"].ToString();
                                string HoraCompensar2 = rows["HoraCompensar2"].ToString();
                                string Jornada2 = rows["Jornada2"].ToString();
                                string ObservacionesPermiso = rows["ObservacionesPermiso"].ToString();
                                string ObservacionesSolicitud = rows["ObservacionesSolicitud"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTROS
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro3 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(2000);

                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //MOTIVO AUSENTISMO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", Motivo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //FECHA INICIO
                                    selenium.Scroll("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    Thread.Sleep(7000);
                                    selenium.Click("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(5000);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        Thread.Sleep(2000);
                                    }
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    Thread.Sleep(7000);

                                    //HORA INICIO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(Hora1, Jornada1, 4);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Inicio", true, file);
                                    //HORA FINAL
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(Hora2, Jornada1, 5);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Final", true, file);
                                    if (database == "ORA")
                                    {
                                        //COMPENSATORIO DIA
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Día Compensatorio", true, file);
                                        //HORA INICIO COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar1, Jornada2, 6);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Inicio Compensatorio", true, file);
                                        //HORA FIN COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar2, Jornada2, 7);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Fin Compensatorio", true, file);
                                        //AGREGAR COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        Thread.Sleep(5000);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Compensatorio Agregado", true, file);
                                        //OBSERVACIONES DE PERMISOS
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservacionesPermiso);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Permiso", true, file);
                                        //OBSERVACIONES SOLICITUD
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservacionesSolicitud);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Solicitud", true, file);
                                    }
                                    else
                                    {
                                        //COMPENSATORIO DIA
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Día Compensatorio", true, file);
                                        //HORA INICIO COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar1, Jornada2, 6);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Inicio Compensatorio", true, file);
                                        //HORA FIN COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar2, Jornada2, 7);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Fin Compensatorio", true, file);
                                        //AGREGAR COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        Thread.Sleep(5000);
                                        selenium.ScrollTo("0", "700");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Compensatorio Agregado", true, file);
                                        //OBSERVACIONES DE PERMISOS
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservacionesPermiso);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Permiso", true, file);
                                        //OBSERVACIONES SOLICITUD
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservacionesSolicitud);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Solicitud", true, file);
                                    }
                                    //ADJUNTO
                                    for (int i = 0; i < 1; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Screenshot("Alerta Permiso Guardado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //APROBACION ROL LIDER
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Lider", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);
                                    //BUSCAR
                                    selenium.SendKeys("//*[@id='tblNmCtper_filter']/label/input", EmpleadoUser);
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//*[@id='tblNmCtper']/tbody/tr/td[9]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");

                                        }
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();
                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //////////////////////////////////////////////////
                                    ///////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosCompensatoriosHoraMinutosRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();

            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónDePermisosCompensatoriosHoraMinutosRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["Hora1"].ToString().Length != 0 && rows["Hora1"].ToString() != null &&
                                rows["Jornada1"].ToString().Length != 0 && rows["Jornada1"].ToString() != null &&
                                rows["Hora2"].ToString().Length != 0 && rows["Hora2"].ToString() != null &&
                                rows["HoraCompensar1"].ToString().Length != 0 && rows["HoraCompensar1"].ToString() != null &&
                                rows["HoraCompensar2"].ToString().Length != 0 && rows["HoraCompensar2"].ToString() != null &&
                                rows["Jornada2"].ToString().Length != 0 && rows["Jornada2"].ToString() != null &&
                                rows["ObservacionesPermiso"].ToString().Length != 0 && rows["ObservacionesPermiso"].ToString() != null &&
                                rows["ObservacionesSolicitud"].ToString().Length != 0 && rows["ObservacionesSolicitud"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string url = rows["url"].ToString();
                                string user = rows["user"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string Hora1 = rows["Hora1"].ToString();
                                string Jornada1 = rows["Jornada1"].ToString();
                                string Hora2 = rows["Hora2"].ToString();
                                string HoraCompensar1 = rows["HoraCompensar1"].ToString();
                                string HoraCompensar2 = rows["HoraCompensar2"].ToString();
                                string Jornada2 = rows["Jornada2"].ToString();
                                string ObservacionesPermiso = rows["ObservacionesPermiso"].ToString();
                                string ObservacionesSolicitud = rows["ObservacionesSolicitud"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTROS
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro3 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(2000);

                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //MOTIVO AUSENTISMO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", Motivo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //FECHA INICIO
                                    selenium.Scroll("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    Thread.Sleep(7000);
                                    selenium.Click("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(5000);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                        Thread.Sleep(2000);
                                    }
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    Thread.Sleep(7000);

                                    //HORA INICIO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(2000);

                                    selenium.ClockAut(Hora1, Jornada1, 4);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Inicio", true, file);
                                    //HORA FINAL
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(Hora2, Jornada1, 5);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Final", true, file);
                                    if (database == "ORA")
                                    {
                                        //COMPENSATORIO DIA
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Día Compensatorio", true, file);
                                        //HORA INICIO COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar1, Jornada2, 6);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Inicio Compensatorio", true, file);
                                        //HORA FIN COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar2, Jornada2, 7);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Fin Compensatorio", true, file);
                                        //AGREGAR COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Compensatorio Agregado", true, file);
                                        //OBSERVACIONES DE PERMISOS
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservacionesPermiso);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Permiso", true, file);
                                        //OBSERVACIONES SOLICITUD
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservacionesSolicitud);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Solicitud", true, file);
                                    }
                                    else
                                    {
                                        //COMPENSATORIO DIA
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C26']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Día Compensatorio", true, file);
                                        //HORA INICIO COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar1, Jornada2, 6);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Inicio Compensatorio", true, file);
                                        //HORA FIN COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                        Thread.Sleep(2000);
                                        selenium.ClockAut(HoraCompensar2, Jornada2, 7);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Hora Fin Compensatorio", true, file);
                                        //AGREGAR COMPENSATORIO
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Compensatorio Agregado", true, file);
                                        //OBSERVACIONES DE PERMISOS
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservacionesPermiso);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Permiso", true, file);
                                        //OBSERVACIONES SOLICITUD
                                        selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservacionesSolicitud);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Observaciones Solicitud", true, file);
                                    }
                                    //ADJUNTO
                                    for (int i = 0; i < 1; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait(Ruta);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Screenshot("Alerta Permiso Guardado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //APROBACION ROL LIDER
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Lider", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);
                                    //BUSCAR
                                    selenium.SendKeys("//*[@id='tblNmCtper_filter']/label/input",EmpleadoUser);
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//*[@id='tblNmCtper']/tbody/tr/td[9]/a"))
                                       {
                                        selenium.Scroll("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tblNmCtper']/tbody/tr/td[9]/a");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                        {
                                            selenium.Click("/html/body/div[1]/div/div[4]/div/button");

                                        }
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //////////////////////////////////////////////////
                                    ///////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_NovedadesTemporalesAprobacionMasivaRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_NovedadesTemporalesAprobacionMasivaRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}' AND COD_CONC = '{CodConc}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_SOLI='232' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_SOLI='49' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales colaborador", true, file);

                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000); 
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados", true, file);

                                    selenium.Click("//a[@id='btnGuardar']");

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Novedad Registrada", true, file);


                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //RRHH

                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//button[contains(.,'GESTION HUMANA')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[contains(.,'Rol RRHH')]");
                                    }
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales RRHH')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales RRHH')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales RRHH", true, file);

                                   
                                    //APREOBACION MASIVA
                                    selenium.Click("//button[@id='btnAprobacionMasiva']");
                                    Thread.Sleep(3000);

                                    //SELECCIONAR
                                    selenium.Click("(//input[@type='checkbox'])[5]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("APROBACION MASIVA", true, file);
                                    Thread.Sleep(2000);
                                    //PROESAR
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnProcesarTodos']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Aprobada", true, file);
                                    Thread.Sleep(5000);

                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_NovedadesTemporalesAprobacionRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_NovedadesTemporalesAprobacionRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}' AND COD_CONC = '{CodConc}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_SOLI='232' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_SOLI='49' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales colaborador", true, file);

                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Datos Ingresados", true, file);

                                    selenium.Click("//a[@id='btnGuardar']");

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Novedad Registrada", true, file);

                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //RRHH

                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//button[contains(.,'GESTION HUMANA')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[contains(.,'Rol RRHH')]");
                                    }
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol RRHH", true, file);

                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales RRHH')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales RRHH')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales RRHH", true, file);
                                    //BUSCAR
                                    selenium.Scroll("//*[@id='tablaSolicitudes_filter']/label/input");
                                    selenium.SendKeys("//*[@id='tablaSolicitudes_filter']/label/input",EmpleadoUser);
                                    //DETALLE
                                    selenium.Scroll("//*[@id='tablaSolicitudes']/tbody/tr/td[11]/a");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='tablaSolicitudes']/tbody/tr/td[11]/a");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedad", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Aprobada", true, file);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Envio Correo", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_NovedadesTemporalesExportarRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_NovedadesTemporalesExportarRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string username = Environment.UserName;
                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}' AND COD_CONC = '{CodConc}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    File.Delete("C:/Users/" + username + "/Downloads/ReporteProcesos.xls");
                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales colaborador", true, file);

                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados", true, file);

                                    selenium.Click("//a[@id='btnGuardar']");

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Novedad Registrada", true, file);


                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //RRHH

                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//button[contains(.,'GESTION HUMANA')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[contains(.,'Rol RRHH')]");
                                    }
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales RRHH')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales RRHH')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales RRHH", true, file);

                                    //EXPORTAR
                                    selenium.Click("//div[@id='divExportar']/input");
                                    Thread.Sleep(5000);
                                    Screenshot("Excel Descargado", true, file);


                                    //Abrir Excel
                                    string excelPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ReporteProcesos.xls");
                                    Process.Start(excelPath);
                                    Thread.Sleep(10000);
                                    SendKeys.SendWait("{LEFT}");
                                    Thread.Sleep(3000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(30000);
                                    Screenshot("EXCEL ABIERTO", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    KillProcesos("EXCEL.EXE");
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_NovedadesTemporalesFiltroRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_NovedadesTemporalesFiltroRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string FechaIni = rows["FechaIni"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string FiltroTabla = rows["FiltroTabla"].ToString();
                                string ConceptoFiltro = rows["ConceptoFiltro"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}' AND COD_CONC = '{CodConc}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }

                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales colaborador", true, file);

                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota); SendKeys.SendWait("{TAB}");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados", true, file);

                                    selenium.Click("//a[@id='btnGuardar']");

                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Novedad Registrada", true, file);


                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //RRHH

                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//button[contains(.,'GESTION HUMANA')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[contains(.,'Rol RRHH')]");
                                    }
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales RRHH')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales RRHH')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales RRHH", true, file);

                                    //FILTRO CONCEPTO
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlNomConc']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", ConceptoFiltro);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Filtro por Concepto", true, file);
                                    //FILTRO FECHAS
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", FechaIni);
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", FechaFin);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Filtro por fechas", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Filtro por fechas", true, file);
                                    //FILTRO DATATABLE
                                    selenium.Scroll("//div[@id='tablaSolicitudes_filter']/label/input");
                                    selenium.SendKeys("//div[@id='tablaSolicitudes_filter']/label/input", FiltroTabla);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Filtro por datatable", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_NovedadesTemporalesRegistroNuevoRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_NovedadesTemporalesRegistroNuevoRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}' AND COD_CONC = '{CodConc}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '421' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='T'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    }
                                    //INICIO PRUEBA                                 
                                    //RRHH
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//button[contains(.,'GESTION HUMANA')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[contains(.,'Rol RRHH')]");
                                    }
                                    if (selenium.ExistControl("/html/body/div[1]/div/div[4]/div/button"))
                                    {
                                        selenium.Click("/html/body/div[1]/div/div[4]/div/button");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol RRHH", true, file);

                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales RRHH')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales RRHH')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales RRHH", true, file);

                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nuevo", true, file);
                                    //BUSCAR EMPLEADO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtConsuCedEmpl']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtConsuCedEmpl']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtConsuCedEmpl']", EmpleadoUser);
                                    selenium.Screenshot("Empleado a Buscar", true, file);
                                    //CLICK DETALLE
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_btnConsulCed']");
                                    Thread.Sleep(5000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_dgBiEmple_ctl03_btnVer']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dgBiEmple_ctl03_btnVer']");
                                    Thread.Sleep(5000);
                                    //concepto
                                    selenium.Scroll("//select[@id='ctl00_ContenidoPagina_ddlNomConc']");
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                    Thread.Sleep(2000);
                                    //cantidad
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtCanNove']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad);
                                    Thread.Sleep(2000);
                                    //Cuotas
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota);
                                    Thread.Sleep(2000);
                                    //numero cuotas
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtNumCuot']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas);
                                    Thread.Sleep(2000);
                                    //Valor total
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal);
                                    Thread.Sleep(2000);
                                    //Saldo
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtSalNove']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtSalNove']", ValTotal);
                                    Thread.Sleep(2000);
                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Novedad Registrada", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Scroll("//*[@id='tablaSolicitudes']/tbody/tr/td[11]/a");
                                    selenium.Close();


                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }




        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPedWebcNominaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoPedWebcNominaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);

                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);

                                    //TIPO DE REPORTE NOMINA
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE DETALLADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);

                                    selenium.Screenshot("Nomina Detallado", true, file);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPedWebcPrimaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoPedWebcPrimaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE DETALLADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Detallado", true, file);
                                    Thread.Sleep(2000);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);

                                   
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPedWebcNominaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoPedWebcNominaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);

                                    //TIPO DE REPORTE NOMINA
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nomina Resumido", true, file);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);

                                   
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPedWebcPrimaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoPedWebcPrimaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Resumido", true, file);
                                    Thread.Sleep(2000);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoWebConfigNominaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoWebConfigNominaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE NOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);

                                    //FORMA REPORTE DETALLADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nomina Detallado", true, file);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoWebConfigNominaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoWebConfigNominaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE NOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nomina Resumido", true, file);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                   
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoWebConfigPrimaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoWebConfigPrimaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE DETALLADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Detallado", true, file);
                                    Thread.Sleep(2000);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoWebConfigPrimaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteNivelEndeudamientoWebConfigPrimaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Resumido", true, file);
                                    Thread.Sleep(2000);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void NM_SolicitudDePrórrogasRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_SolicitudDePrórrogasRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Prorroga
                                rows["EmpleadoPro"].ToString().Length != 0 && rows["EmpleadoPro"].ToString() != null &&
                                rows["TipoProrroga"].ToString().Length != 0 && rows["TipoProrroga"].ToString() != null &&
                                rows["DiasProrroga"].ToString().Length != 0 && rows["DiasProrroga"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Prorroga
                                string EmpleadoPro = rows["EmpleadoPro"].ToString();
                                string TipoProrroga = rows["TipoProrroga"].ToString();
                                string DiasProrroga = rows["DiasProrroga"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string user = "";
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTRO
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_PRORR where COD_EMPL = '{EmpleadoPro}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'PR' and ACT_USUA = '{EmpleadoPro}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);


                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    ////////////////////////////////////////////////////
                                    /////Rol Lider
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    selenium.Screenshot("Rol Lider", true, file);
                                    Thread.Sleep(5000);
                                    if (database == "SQL")
                                    {
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(5000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(5000);
                                    }
                                    selenium.Screenshot("Prórrogas de contratos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                    {
                                        selenium.Click("//a[@id='ctl00_btnCerrar']");

                                    }
                                    selenium.Screenshot("Nueva Prórroga", true, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtCodEmplAux']", EmpleadoPro);
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_txtCodEmpl']");
                                        selenium.Click("//input[contains(@id,'btnCargar')]");
                                        Thread.Sleep(3000);

                                    }
                                    else
                                    {
                                        selenium.SendKeys("//input[contains(@id,'txtCodEmplAux')]", EmpleadoPro);
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_txtCodEmpl']");
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_btnCargar']");
                                        Thread.Sleep(3000);
                                    }
                                    //TIPO PRORROGA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipPror')]", TipoProrroga);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Prórroga", true, file);
                                    Thread.Sleep(2000);
                                    //OBSERVACIONES
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", "PRUEBA PRORROGAS POR LIDER");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prórroga de contratos Diligenciada", false, file);
                                    //GUARDAR PRORROGA
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro Ingresado Correctamente", false, file);
                                    //VERIFICAR REGISTRO
                                    if (database == "SQL")
                                    {
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(5000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(5000);
                                    }
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Prórrogas de contratos Registrada", true, file);

                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);  //LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_VisualizaciónInfCuentasRolRRHHDelColaborador()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_VisualizaciónInfCuentasRolRRHHDelColaborador")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoBuscar = rows["EmpleadoBuscar"].ToString();
                                //Datos
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string user = "";
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(3000);
                                    ////////////////////////////////////////////////////
                                    //ROL RRHH
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//button[@id='ctl00_pRRHH']/span");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Rol RRHH", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='ctl00_pRRHH']/span");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Rol RRHH", true, file);
                                    }
                                   
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/a");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/a");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(@href, 'frmRHNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(@href, 'frmRHNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Info cuentas Rol RRHH", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCodEmpl']",EmpleadoBuscar);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empleado a buscar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnFiltro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado buscado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//span[@id='ctl00_lblCanTot']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado buscado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //Consulta base de datos
                                    string verA = string.Empty;
                                    string verB = string.Empty;
                                  
                                    if (database == "SQL")
                                    {
                                        string consulta = $"SELECT  count (*) Cantidad FROM NM_CUENT WHERE COD_EMPR = 9 AND COD_EMPL ="+"'"+EmpleadoBuscar+"'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["Cantidad"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"SELECT  count (*) Cantidad FROM NM_CUENT WHERE COD_EMPR = 421 AND COD_EMPL =" + "'" + EmpleadoBuscar + "'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["Cantidad"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_VisualizaciónInfCuentasRolColaboradorTipoEntidadCoorporacion()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_VisualizaciónInfCuentasRolColaboradorTipoEntidadCoorporacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null)
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string user = "";
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(3000);
                                    ////////////////////////////////////////////////////
                                    //INFORMACION CUENTAS
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(@href, 'frmNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(@href, 'frmNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Info cuentas Rol COlaborador", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_dtgcuentas']/tbody/tr[23]/td[2]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //Consulta base de datos
                                    string verA = string.Empty;
                                    string verB = string.Empty;

                                    if (database == "SQL")
                                    {
                                        string consulta = $"SELECT  count (*) Cantidad FROM NM_CUENT WHERE COD_EMPR = 9 AND COD_EMPL =" + "'" + EmpleadoUser + "'"+ "AND tip_enti='COR'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["Cantidad"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"SELECT  count (*) Cantidad FROM NM_CUENT WHERE COD_EMPR = 421 AND COD_EMPL =" + "'" + EmpleadoUser + "'" + "AND tip_enti='COR'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["Cantidad"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_VisualizaciónInfCuentasRolColaboradorTipoEntidadBanco()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_VisualizaciónInfCuentasRolColaboradorTipoEntidadBanco")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null)
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos
                                string url = rows["url"].ToString();

                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string user = "";
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(3000);
                                    ////////////////////////////////////////////////////
                                    //INFORMACION CUENTAS
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(@href, 'frmNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(@href, 'frmNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Info cuentas Rol COlaborador", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_dtgcuentas']/tbody/tr[23]/td[2]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //Consulta base de datos
                                    string verA = string.Empty;
                                    string verB = string.Empty;

                                    if (database == "SQL")
                                    {
                                        string consulta = $"SELECT  count (*) Cantidad FROM NM_CUENT WHERE COD_EMPR = 9 AND COD_EMPL =" + "'" + EmpleadoUser + "'" + "AND tip_enti='BAN'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["Cantidad"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    else
                                    {
                                        string consulta = $"SELECT  count (*) Cantidad FROM NM_CUENT WHERE COD_EMPR = 421 AND COD_EMPL =" + "'" + EmpleadoUser + "'" + "AND tip_enti='BAN'";
                                        DataTable resultado = db.Select(consulta, user, database);
                                        if (resultado.Rows.Count > 0)
                                        {
                                            foreach (DataRow rw in resultado.Rows)
                                            {
                                                verA = rw["Cantidad"].ToString();

                                            }
                                        }

                                        APIFuncionesVitales.InsertConsulta(file, verA, consulta);
                                    }
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void NM_VisualizaciónInfCuentasRolRRHHDelColaboradorActualizarRegistro()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_VisualizaciónInfCuentasRolRRHHDelColaboradorActualizarRegistro")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {


                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null)
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoBuscar = rows["EmpleadoBuscar"].ToString();
                                //Datos
                                string url = rows["url"].ToString();
                                string Entidad = rows["Entidad"].ToString();
                                string Sucursal = rows["Sucursal"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }

                                try
                                {
                                    string user = "";
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //REGISTRO
                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"UPDATE nm_cuent SET cod_enti='1', cod_sucu='1'  WHERE cod_empl='60' AND tip_enti='FC2'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        string eliminarRegistro = $"UPDATE nm_cuent SET cod_enti='1', cod_sucu='1'  WHERE cod_empl='60' AND tip_enti='FC2'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        Thread.Sleep(2000);
                                    }
                                    

                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(3000);
                                    ////////////////////////////////////////////////////
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//button[@id='ctl00_pRRHH']/span");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Rol RRHH", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='ctl00_pRRHH']/span");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Rol RRHH", true, file);
                                    }

                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/a");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/a");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(@href, 'frmRHNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(@href, 'frmRHNmCuentL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Info cuentas Rol RRHH", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCodEmpl']", EmpleadoBuscar);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empleado a buscar", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnFiltro']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado buscado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//span[@id='ctl00_lblCanTot']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cuentas del empleado buscado", true, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        //Actualizar detalle
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dtgNmCuent_ctl09_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle a Actualizar FC2", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCuent_ctl09_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        //Editar registro
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomEnti']");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomEnti']", Entidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Edicion Entidad FC2", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomSucu']");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomSucu']", Sucursal);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Edicion Sucursal FC2", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Actualizacion de detalle FC2", true, file);
                                        if (selenium.ExistControl("//span[contains(.,'Registro actualizado correctamente.')]"))
                                        {
                                            string texto = selenium.GetText("//span[contains(.,'Registro actualizado correctamente.')]");
                                            if (texto.Contains("correctamente"))
                                            {

                                            }
                                            else
                                            {
                                                Assert.Fail("No se actualizo correctamente");
                                            }
                                        }
                                        Thread.Sleep(3000);
                                        selenium.Click("//a[@id='ctl00_btnRetornar']/i");
                                        Thread.Sleep(5000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCodEmpl']", EmpleadoBuscar);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Empleado a buscar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnFiltro']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Cuentas del empleado buscado", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dtgNmCuent_ctl09_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle Actualizado", true, file);
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //Actualizar detalle
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dtgNmCuent_ctl17_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle a Actualizar FC2", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCuent_ctl17_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        //Editar registro
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomEnti']");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomEnti']", Entidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Edicion Entidad FC2", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomSucu']");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_TabContainer1_TabPanel1_ddlNomSucu']", Sucursal);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Edicion Sucursal FC2", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnActualizar']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Actualizacion de detalle FC2", true, file);
                                        if (selenium.ExistControl("//span[contains(.,'Registro actualizado correctamente.')]"))
                                        {
                                            string texto = selenium.GetText("//span[contains(.,'Registro actualizado correctamente.')]");
                                            if (texto.Contains("correctamente"))
                                            {

                                            }
                                            else
                                            {
                                                Assert.Fail("No se actualizo correctamente");
                                            }
                                        }
                                        Thread.Sleep(3000);
                                        selenium.Click("//a[@id='ctl00_btnRetornar']/i");
                                        Thread.Sleep(5000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCodEmpl']", EmpleadoBuscar);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Empleado a buscar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnFiltro']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Cuentas del empleado buscado", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dtgNmCuent_ctl17_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle Actualizado FC2", true, file);
                                        Thread.Sleep(2000);
                                    }
                                   
                                    selenium.Close();
                                    //////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void NM_ReporteManualdeFuncionesPorCargo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1"; 

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteManualdeFuncionesPorCargo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ManualFunciones.pdf");

                                    ////LOGIN APP////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////


                                    ///////////////////REPORTE
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Reporte Manual de Funciones')]");

                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        Assert.Fail(selenium.GetText("//span[contains(@id,'lblError')]"));
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Manual Funciones", true, file);

                                    Thread.Sleep(2000);

                                    //Ventana Emergente
                                    selenium.ChangeAuxWindow();
                                    selenium.SelectElementByName("//select[@id='ctl00_ContentPopapModel_ddlTipReporte']", "Por Cargo");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Seleccionar Por CARGO", true, file);

                                    Thread.Sleep(5000);
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnGenerar']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ManualFunciones");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ManualFunciones.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();


                                    //////
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(7000);
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteManualdeFuncionesPorRol()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1"; 

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_ReporteManualdeFuncionesPorRol")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    string username = Environment.UserName;
                                    File.Delete("C:/Users/" + username + "/Downloads/ManualFunciones1.pdf");
                                    ////LOGIN APP////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////


                                    ///////////////////REPORTE
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Reporte Manual de Funciones')]");

                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        Assert.Fail(selenium.GetText("//span[contains(@id,'lblError')]"));
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Manual Funciones", true, file);

                                    Thread.Sleep(2000);

                                    //Ventana Emergente
                                    selenium.ChangeAuxWindow();
                                    selenium.SelectElementByName("//select[@id='ctl00_ContentPopapModel_ddlTipReporte']", "Por Rol");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Seleccionar Por ROL", true, file);

                                    Thread.Sleep(5000);
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnGenerar']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{DOWN}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        SendKeys.SendWait("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("ManualFunciones1");
                                    Thread.Sleep(5000);
                                    SendKeys.SendWait("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/" + username + "/Downloads/ManualFunciones1.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    //LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();


                                    //////
                                    KillProcesos("Acrobat.exe");
                                    Thread.Sleep(7000);
                                    LimpiarProcesos();
                                    ////////////////////////////////////////////////////
                                    ///////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.Modulo_NM.NM_FlujoAprobaciónVacacionesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["VacFecDesdeAno"].ToString().Length != 0 && rows["VacFecDesdeAno"].ToString() != null &&
                                rows["VacFecDesdeMes"].ToString().Length != 0 && rows["VacFecDesdeMes"].ToString() != null &&
                                rows["VacFecDesdeDia"].ToString().Length != 0 && rows["VacFecDesdeDia"].ToString() != null &&
                                rows["VacFecHastaAno"].ToString().Length != 0 && rows["VacFecHastaAno"].ToString() != null &&
                                rows["VacFecHastaMes"].ToString().Length != 0 && rows["VacFecHastaMes"].ToString() != null &&
                                rows["VacFecHastaDia"].ToString().Length != 0 && rows["VacFecHastaDia"].ToString() != null &&
                                rows["VacFecRegresoAno"].ToString().Length != 0 && rows["VacFecRegresoAno"].ToString() != null &&
                                rows["VacFecRegresoKMes"].ToString().Length != 0 && rows["VacFecRegresoKMes"].ToString() != null &&
                                rows["VacFecRegresoDia"].ToString().Length != 0 && rows["VacFecRegresoDia"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string VacFecDesdeAno = rows["VacFecDesdeAno"].ToString();
                                string VacFecDesdeMes = rows["VacFecDesdeMes"].ToString();
                                string VacFecDesdeDia = rows["VacFecDesdeDia"].ToString();
                                string VacFecHastaAno = rows["VacFecHastaAno"].ToString();
                                string VacFecHastaMes = rows["VacFecHastaMes"].ToString();
                                string VacFecHastaDia = rows["VacFecHastaDia"].ToString();
                                string VacFecRegresoAno = rows["VacFecRegresoAno"].ToString();
                                string VacFecRegresoKMes = rows["VacFecRegresoKMes"].ToString();
                                string VacFecRegresoDia = rows["VacFecRegresoDia"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                //limpiar procesos
                                Process[] processes = Process.GetProcessesByName("chromedriver");
                                if (processes.Length > 0)
                                {
                                    for (int i = 0; i < processes.Length; i++)
                                    {
                                        processes[i].Kill();
                                    }
                                }
                                try
                                {
                                    string database = "";
                                    string user = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }

                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //eliminar registros previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);
                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);
                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);
                                    if (database == "SQL")
                                    {
                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='11'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='124'";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);
                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='13'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='45504088'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='14224258'";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);
                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='45511322'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);
                                    }

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES
                                    Thread.Sleep(2500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //NUEVO
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Screenshot("Ingreso Vacaciones", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(2000);
                                    string FechaDesde = $"{VacFecDesdeDia}/{VacFecDesdeMes}/{VacFecDesdeAno}";
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    selenium.Screenshot("Fecha Desde", true, file);

                                   
                                    string FechaHasta = $"{VacFecHastaDia}/{VacFecHastaMes}/{VacFecHastaAno}";
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Hasta", true, file);
                                    Thread.Sleep(1000);
                                    //Fecha hasta
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaHasta);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//textarea[contains(@id,'KtxtObserSoli')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//textarea[contains(@id,'KtxtObserSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli')]","PRUEBAS");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli')]", "PRUEBAS");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Datos de vacaciones", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    Screenshot("Vacaciones Registro", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //VERIFICAR REGISTRO
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mis vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //-------------------------------APROBAR REGISTRO-------------------------------------------------
                                    //Ingreso jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    if (database == "SQL")
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JORGE");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        //BUSCAR
                                        selenium.SendKeys("//*[@id='tableVacaciones_filter']/label/input", "JAIME");
                                        Thread.Sleep(2000);
                                    }

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a"))
                                    {
                                        selenium.Scroll("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[1]/input");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_btnAprobar']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//*[@id='ctl00_ContentPopapModel_kcmObservaciones_txtTexto']", "APROBACION SOLICITUD");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContentPopapModel_btnProcesaObservacion']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Aprobado", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //Verificar estado solicitud
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES
                                    Thread.Sleep(2500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    Thread.Sleep(2500);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Estado Flujo", true, file);
                                    selenium.Close();
                                    ////////////////////////////////////////////////////
                                    //limpiar procesos
                                    Process[] processes1 = Process.GetProcessesByName("chromedriver");
                                    if (processes1.Length > 0)
                                    {
                                        for (int i = 0; i < processes1.Length; i++)
                                        {
                                            processes1[i].Kill();
                                        }
                                    }
                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


    }
}