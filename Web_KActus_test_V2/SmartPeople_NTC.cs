using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Input;
using System.Windows.Forms;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium.Chrome;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Support.UI;
using System.Data;
using APITest;
using Keys = OpenQA.Selenium.Keys;
using System.IO;
using System.Management;
using System.Diagnostics;


namespace Web_Kactus_Test_V2
{
    /// <summary>
    /// Descripción resumida de SmartPeople_NTC
    /// </summary>
    [TestClass]
    public class SmartPeople_NTC : FuncionesVitales
    {

        string app = "SmartPeople";

        APISelenium selenium = new APISelenium();
        APIFuncionesVitales fv = new APIFuncionesVitales();
        APIDatabase db = new APIDatabase();

        public SmartPeople_NTC()
        {
        }

       
        [TestMethod]
        public void SmartPeople_MiEducFormalNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MiEducFormalNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["ModalidadEsp"].ToString().Length != 0 && rows["ModalidadEsp"].ToString() != null &&
                                rows["NomEstEsp"].ToString().Length != 0 && rows["NomEstEsp"].ToString() != null &&
                                rows["NomEspeEsp"].ToString().Length != 0 && rows["NomEspeEsp"].ToString() != null &&
                                rows["InstitEsp"].ToString().Length != 0 && rows["InstitEsp"].ToString() != null &&
                                rows["CiudadEsp"].ToString().Length != 0 && rows["CiudadEsp"].ToString() != null &&
                                rows["MetodoEsp"].ToString().Length != 0 && rows["MetodoEsp"].ToString() != null &&
                                rows["TituConvEsp"].ToString().Length != 0 && rows["TituConvEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["TimeEstEsp"].ToString().Length != 0 && rows["TimeEstEsp"].ToString() != null &&
                                rows["EstTermEsp"].ToString().Length != 0 && rows["EstTermEsp"].ToString() != null &&
                                rows["EstActuEsp"].ToString().Length != 0 && rows["EstActuEsp"].ToString() != null &&
                                rows["EstInteEsp"].ToString().Length != 0 && rows["EstInteEsp"].ToString() != null &&
                                rows["GraduEsp"].ToString().Length != 0 && rows["GraduEsp"].ToString() != null &&
                                rows["FechaGradEsp"].ToString().Length != 0 && rows["FechaGradEsp"].ToString() != null &&
                                rows["PromEsp"].ToString().Length != 0 && rows["PromEsp"].ToString() != null &&
                                rows["MatProfEsp"].ToString().Length != 0 && rows["MatProfEsp"].ToString() != null &&
                                rows["FechaExpeEsp"].ToString().Length != 0 && rows["FechaExpeEsp"].ToString() != null &&
                                rows["CertifEsp"].ToString().Length != 0 && rows["CertifEsp"].ToString() != null &&
                                rows["TipoDocEsp"].ToString().Length != 0 && rows["TipoDocEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string ModalidadEsp = rows["ModalidadEsp"].ToString();
                                string NomEstEsp = rows["NomEstEsp"].ToString();
                                string NomEspeEsp = rows["NomEspeEsp"].ToString();
                                string InstitEsp = rows["InstitEsp"].ToString();
                                string CiudadEsp = rows["CiudadEsp"].ToString();
                                string MetodoEsp = rows["MetodoEsp"].ToString();
                                string TituConvEsp = rows["TituConvEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string TimeEstEsp = rows["TimeEstEsp"].ToString();
                                string EstTermEsp = rows["EstTermEsp"].ToString();
                                string EstActuEsp = rows["EstActuEsp"].ToString();
                                string EstInteEsp = rows["EstInteEsp"].ToString();
                                string GraduEsp = rows["GraduEsp"].ToString();
                                string FechaGradEsp = rows["FechaGradEsp"].ToString();
                                string PromEsp = rows["PromEsp"].ToString();
                                string MatProfEsp = rows["MatProfEsp"].ToString();
                                string FechaExpeEsp = rows["FechaExpeEsp"].ToString();
                                string CertifEsp = rows["CertifEsp"].ToString();
                                string TipoDocEsp = rows["TipoDocEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);


                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(10);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(10);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);


                                    Thread.Sleep(10);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(10);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(10);

                                    //Validación Emergentes campos

                                    string Modalidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomModi')]", "Modalidad", file);
                                    Thread.Sleep(10);
                                    if (Modalidad != ModalidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ModalidadEsp + " y el encontrado es: " + Modalidad);
                                    }
                                    Thread.Sleep(10);

                                    string NomEst = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEstu')]", "Nombre de los Estudios", file);
                                    Thread.Sleep(100);
                                    if (NomEst != NomEstEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEstEsp + " y el encontrado es: " + NomEst);
                                    }
                                    Thread.Sleep(10);

                                    string NomEspe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtValMNomEspe_lblTexto')]", "Nombre Específico", file);
                                    Thread.Sleep(100);
                                    if (NomEspe != NomEspeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEspeEsp + " y el encontrado es: " + NomEspe);
                                    }
                                    Thread.Sleep(10);

                                    string Instit = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomInst')]", "Institución", file);
                                    Thread.Sleep(100);
                                    if (Instit != InstitEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InstitEsp + " y el encontrado es: " + Instit);
                                    }
                                    Thread.Sleep(10);

                                    string Ciudad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_lblDivPoli')]", "Ciudad", file);
                                    Thread.Sleep(100);
                                    if (Ciudad != CiudadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadEsp + " y el encontrado es: " + Ciudad);
                                    }
                                    Thread.Sleep(10);

                                    string Metodo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodItem')]", "Metodología", file);
                                    Thread.Sleep(10);
                                    if (Metodo != MetodoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MetodoEsp + " y el encontrado es: " + Metodo);
                                    }
                                    Thread.Sleep(10);

                                    for (int i = 1; i <= 10; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(100);
                                    }

                                    string TituConv = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTitConv')]", "Título convalidado ante el MEN MINISTERIO DE EDUCACION NACIONA", file);
                                    Thread.Sleep(10);
                                    if (TituConv != TituConvEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TituConvEsp + " y el encontrado es: " + TituConv);
                                    }
                                    Thread.Sleep(10);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecInic_lblFecha')]", "Fecha Inicio", file);
                                    Thread.Sleep(10);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(10);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecTerm_lblFecha')]", "Fecha Fin", file);
                                    Thread.Sleep(10);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(10);

                                    string TimeEst = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblUniTiem')]", "Tiempo Estudio", file);
                                    Thread.Sleep(10);
                                    if (TimeEst != TimeEstEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeEstEsp + " y el encontrado es: " + TimeEst);
                                    }
                                    Thread.Sleep(10);

                                    string EstTerm = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstTerm')]", "Terminado", file);
                                    Thread.Sleep(10);
                                    if (EstTerm != EstTermEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstTermEsp + " y el encontrado es: " + EstTerm);
                                    }
                                    Thread.Sleep(10);

                                    string EstActu = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstActu')]", "Estudia Actualmente", file);
                                    Thread.Sleep(10);
                                    if (EstActu != EstActuEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstActuEsp + " y el encontrado es: " + EstActu);
                                    }
                                    Thread.Sleep(10);

                                    string EstInte = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstInte')]", "Estudio Interrumpido", file);
                                    Thread.Sleep(10);
                                    if (EstInte != EstInteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstInteEsp + " y el encontrado es: " + EstInte);
                                    }
                                    Thread.Sleep(10);

                                    string Gradu = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblGraDuad')]", "Graduado", file);
                                    Thread.Sleep(10);
                                    if (Gradu != GraduEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GraduEsp + " y el encontrado es: " + Gradu);
                                    }
                                    Thread.Sleep(10);

                                    string FechaGrad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecGrad_lblFecha')]", "Fecha de Grado", file);
                                    Thread.Sleep(100);
                                    if (FechaGrad != FechaGradEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaGradEsp + " y el encontrado es: " + FechaGrad);
                                    }
                                    Thread.Sleep(10);

                                    string Prom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblProCarr')]", "Promedio", file);
                                    Thread.Sleep(10);
                                    if (Prom != PromEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PromEsp + " y el encontrado es: " + Prom);
                                    }
                                    Thread.Sleep(10);

                                    string MatProf = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMatProf')]", "Matricula Profesional", file);
                                    Thread.Sleep(10);
                                    if (MatProf != MatProfEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MatProfEsp + " y el encontrado es: " + MatProf);
                                    }
                                    Thread.Sleep(10);

                                    string FechaExpe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecExtp_lblFecha')]", "Fecha Expedición", file);
                                    Thread.Sleep(10);
                                    if (FechaExpe != FechaExpeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaExpeEsp + " y el encontrado es: " + FechaExpe);
                                    }
                                    Thread.Sleep(10);

                                    string Certif = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjunto')]", "Certificaciones y Diplomas", file);
                                    Thread.Sleep(10);
                                    if (Certif != CertifEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CertifEsp + " y el encontrado es: " + Certif);
                                    }
                                    Thread.Sleep(10);

                                    string TipoDoc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]", "Tipo de Documento", file);
                                    Thread.Sleep(10);
                                    if (TipoDoc != TipoDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocEsp + " y el encontrado es: " + TipoDoc);
                                    }
                                    Thread.Sleep(10);
                                    for (int i = 1; i <= 10; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                        Thread.Sleep(100);
                                    }
                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        //selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);
                                        selenium.AcceptAlert();
                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {
                                                Thread.Sleep(800);
                                                SendKeys.Send("{TAB}");
                                                selenium.Screenshot("TAB", true, file);


                                                Thread.Sleep(100);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_IngresoSancionesJefeNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_IngresoSancionesJefeNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["CentroCostEsp"].ToString().Length != 0 && rows["CentroCostEsp"].ToString() != null &&
                                rows["CodFaltaEsp"].ToString().Length != 0 && rows["CodFaltaEsp"].ToString() != null &&
                                rows["FechaFalEsp"].ToString().Length != 0 && rows["FechaFalEsp"].ToString() != null &&
                                rows["HechosEsp"].ToString().Length != 0 && rows["HechosEsp"].ToString() != null &&
                                rows["FechaSanEsp"].ToString().Length != 0 && rows["FechaSanEsp"].ToString() != null &&
                                rows["NumSanEsp"].ToString().Length != 0 && rows["NumSanEsp"].ToString() != null &&
                                rows["FechaCitEsp"].ToString().Length != 0 && rows["FechaCitEsp"].ToString() != null &&
                                rows["ClaseNomEsp"].ToString().Length != 0 && rows["ClaseNomEsp"].ToString() != null &&
                                rows["NomServEsp"].ToString().Length != 0 && rows["NomServEsp"].ToString() != null &&
                                rows["FuncionEsp"].ToString().Length != 0 && rows["FuncionEsp"].ToString() != null &&
                                rows["FechaAsigEsp"].ToString().Length != 0 && rows["FechaAsigEsp"].ToString() != null &&
                                rows["TimeRetEsp"].ToString().Length != 0 && rows["TimeRetEsp"].ToString() != null &&
                                rows["TimeAusEsp"].ToString().Length != 0 && rows["TimeAusEsp"].ToString() != null &&
                                rows["CargArEsp"].ToString().Length != 0 && rows["CargArEsp"].ToString() != null &&
                                rows["TipoDocEsp"].ToString().Length != 0 && rows["TipoDocEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string CentroCostEsp = rows["CentroCostEsp"].ToString();
                                string CodFaltaEsp = rows["CodFaltaEsp"].ToString();
                                string FechaFalEsp = rows["FechaFalEsp"].ToString();
                                string HechosEsp = rows["HechosEsp"].ToString();
                                string FechaSanEsp = rows["FechaSanEsp"].ToString();
                                string NumSanEsp = rows["NumSanEsp"].ToString();
                                string FechaCitEsp = rows["FechaCitEsp"].ToString();
                                string ClaseNomEsp = rows["ClaseNomEsp"].ToString();
                                string NomServEsp = rows["NomServEsp"].ToString();
                                string FuncionEsp = rows["FuncionEsp"].ToString();
                                string FechaAsigEsp = rows["FechaAsigEsp"].ToString();
                                string TimeRetEsp = rows["TimeRetEsp"].ToString();
                                string TimeAusEsp = rows["TimeAusEsp"].ToString();
                                string CargArEsp = rows["CargArEsp"].ToString();
                                string TipoDocEsp = rows["TipoDocEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    if (database == "ORA")
                                    {
                                        string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                        Thread.Sleep(100);
                                        if (CodEmple != CodEmpleEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                        }
                                        Thread.Sleep(100);

                                        string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                        Thread.Sleep(100);
                                        if (NomApe != NomApeEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                        }
                                        Thread.Sleep(100);

                                        string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                        Thread.Sleep(100);
                                        if (NumCont != NumContEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                        }
                                        Thread.Sleep(100);

                                        string CodCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                        Thread.Sleep(100);
                                        if (CodCarg != CodCargEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                        }
                                        Thread.Sleep(100);

                                        string CentroCost = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]", "Centro de Costo", file);
                                        Thread.Sleep(100);
                                        if (CentroCost != CentroCostEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostEsp + " y el encontrado es: " + CentroCost);
                                        }
                                        Thread.Sleep(100);

                                        string CodFalta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodFalt')]", "Falta", file);
                                        Thread.Sleep(100);
                                        if (CodFalta != CodFaltaEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodFaltaEsp + " y el encontrado es: " + CodFalta);
                                        }
                                        Thread.Sleep(100);

                                        string FechaFal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecHech_lblFecha')]", "Fecha Hechos", file);
                                        Thread.Sleep(100);
                                        if (FechaFal != FechaFalEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFalEsp + " y el encontrado es: " + FechaFal);
                                        }
                                        Thread.Sleep(100);

                                        for (int i = 0; i <= 9; i++)
                                        {
                                            SendKeys.Send("{DOWN}");
                                            Thread.Sleep(100);
                                        }

                                        string Hechos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrltxtTexSanc_lblTexto')]", "Hechos", file);
                                        Thread.Sleep(100);
                                        if (Hechos != HechosEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HechosEsp + " y el encontrado es: " + Hechos);
                                        }
                                        Thread.Sleep(100);

                                        string FechaSan = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecReso_lblFecha')]", "Fecha Sancion", file);
                                        Thread.Sleep(100);
                                        if (FechaSan != FechaSanEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSanEsp + " y el encontrado es: " + FechaSan);
                                        }
                                        Thread.Sleep(100);

                                        string NumSan = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumReso')]", "Numero Sanción", file);
                                        Thread.Sleep(100);
                                        if (NumSan != NumSanEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumSanEsp + " y el encontrado es: " + NumSan);
                                        }
                                        Thread.Sleep(100);

                                        string FechaCit = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecCita_lblFecha')]", "Fecha Citación", file);
                                        Thread.Sleep(100);
                                        if (FechaCit != FechaCitEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaCitEsp + " y el encontrado es: " + FechaCit);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//a[@id='nav-proceso-tab']");
                                        Thread.Sleep(100);

                                        for (int i = 0; i <= 9; i++)
                                        {
                                            SendKeys.Send("{DOWN}");
                                            Thread.Sleep(100);
                                        }


                                        string ClaseNom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodTnom')]", "Clase de Nomina", file);
                                        Thread.Sleep(100);
                                        if (ClaseNom != ClaseNomEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClaseNomEsp + " y el encontrado es: " + ClaseNom);
                                        }
                                        Thread.Sleep(100);

                                        string NomServ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomServ')]", "Nombre del Servicio", file);
                                        Thread.Sleep(100);
                                        if (NomServ != NomServEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomServEsp + " y el encontrado es: " + NomServ);
                                        }
                                        Thread.Sleep(100);


                                        string Funcion = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblGteDpto')]", "Funcionario Quien Reporta", file);
                                        Thread.Sleep(100);
                                        if (Funcion != FuncionEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FuncionEsp + " y el encontrado es: " + Funcion);
                                        }
                                        Thread.Sleep(100);

                                        string FechaAsig = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecAsig_lblFecha')]", "Fecha Asignación", file);
                                        Thread.Sleep(100);
                                        if (FechaAsig != FechaAsigEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAsigEsp + " y el encontrado es: " + FechaAsig);
                                        }
                                        Thread.Sleep(100);

                                        string TimeRet = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTieReta')]", "Tiempo Retardo", file);
                                        Thread.Sleep(100);
                                        if (TimeRet != TimeRetEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeRetEsp + " y el encontrado es: " + TimeRet);
                                        }
                                        Thread.Sleep(100);

                                        string TimeAus = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTieAuse')]", "Tiempo Auscencia", file);
                                        Thread.Sleep(100);
                                        if (TimeAus != TimeAusEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeAusEsp + " y el encontrado es: " + TimeAus);
                                        }
                                        Thread.Sleep(100);

                                        string CargAr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblArcAdju')]", "Cargue Archivos", file);
                                        Thread.Sleep(100);
                                        if (CargAr != CargArEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargArEsp + " y el encontrado es: " + CargAr);
                                        }
                                        Thread.Sleep(100);

                                        string TipoDoc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]", "Tipo Documento", file);
                                        Thread.Sleep(100);
                                        if (TipoDoc != TipoDocEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocEsp + " y el encontrado es: " + TipoDoc);
                                        }
                                        Thread.Sleep(100);

                                        for (int i = 0; i <= 21; i++)
                                        {
                                            SendKeys.Send("{UP}");
                                            Thread.Sleep(100);
                                        }

                                    }

                                    else
                                    {

                                        string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                        Thread.Sleep(100);
                                        if (CodEmple != CodEmpleEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                        }
                                        Thread.Sleep(100);

                                        string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                        Thread.Sleep(100);
                                        if (NomApe != NomApeEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                        }
                                        Thread.Sleep(100);

                                        string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                        Thread.Sleep(100);
                                        if (NumCont != NumContEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                        }
                                        Thread.Sleep(100);

                                        string CodCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                        Thread.Sleep(100);
                                        if (CodCarg != CodCargEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                        }
                                        Thread.Sleep(100);

                                        string CentroCost = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]", "Centro de Costo", file);
                                        Thread.Sleep(100);
                                        if (CentroCost != CentroCostEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostEsp + " y el encontrado es: " + CentroCost);
                                        }
                                        Thread.Sleep(100);

                                        string CodFalta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodFalt')]", "Falta", file);
                                        Thread.Sleep(100);
                                        if (CodFalta != CodFaltaEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodFaltaEsp + " y el encontrado es: " + CodFalta);
                                        }
                                        Thread.Sleep(100);

                                        string FechaFal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecHech_lblFecha')]", "Fecha Hechos", file);
                                        Thread.Sleep(100);
                                        if (FechaFal != FechaFalEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFalEsp + " y el encontrado es: " + FechaFal);
                                        }
                                        Thread.Sleep(100);

                                        for (int i = 0; i <= 13; i++)
                                        {
                                            SendKeys.Send("{DOWN}");
                                            Thread.Sleep(100);
                                        }

                                        string Hechos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrltxtTexSanc_lblTexto')]", "Hechos", file);
                                        Thread.Sleep(100);
                                        if (Hechos != HechosEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HechosEsp + " y el encontrado es: " + Hechos);
                                        }
                                        Thread.Sleep(100);

                                        string FechaSan = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecReso_lblFecha')]", "Fecha Sancion", file);
                                        Thread.Sleep(100);
                                        if (FechaSan != FechaSanEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSanEsp + " y el encontrado es: " + FechaSan);
                                        }
                                        Thread.Sleep(100);

                                        string NumSan = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumReso')]", "Numero Sanción", file);
                                        Thread.Sleep(100);
                                        if (NumSan != NumSanEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumSanEsp + " y el encontrado es: " + NumSan);
                                        }
                                        Thread.Sleep(100);

                                        string FechaCit = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecCita_lblFecha')]", "Fecha Citación", file);
                                        Thread.Sleep(100);
                                        if (FechaCit != FechaCitEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaCitEsp + " y el encontrado es: " + FechaCit);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//a[contains(text(),'Procesos Disciplinarios')]");
                                        Thread.Sleep(1000);

                                        for (int i = 0; i <= 13; i++)
                                        {
                                            SendKeys.Send("{DOWN}");
                                            Thread.Sleep(100);
                                        }

                                        string ClaseNom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodTnom')]", "Clase de Nomina", file);
                                        Thread.Sleep(100);
                                        if (ClaseNom != ClaseNomEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClaseNomEsp + " y el encontrado es: " + ClaseNom);
                                        }
                                        Thread.Sleep(100);

                                        string NomServ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomServ')]", "Nombre del Servicio", file);
                                        Thread.Sleep(100);
                                        if (NomServ != NomServEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomServEsp + " y el encontrado es: " + NomServ);
                                        }
                                        Thread.Sleep(100);


                                        string Funcion = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblGteDpto')]", "Funcionario Quien Reporta", file);
                                        Thread.Sleep(100);
                                        if (Funcion != FuncionEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FuncionEsp + " y el encontrado es: " + Funcion);
                                        }
                                        Thread.Sleep(100);

                                        string FechaAsig = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecAsig_lblFecha')]", "Fecha Asignación", file);
                                        Thread.Sleep(100);
                                        if (FechaAsig != FechaAsigEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAsigEsp + " y el encontrado es: " + FechaAsig);
                                        }
                                        Thread.Sleep(100);

                                        string TimeRet = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTieReta')]", "Tiempo Retardo", file);
                                        Thread.Sleep(100);
                                        if (TimeRet != TimeRetEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeRetEsp + " y el encontrado es: " + TimeRet);
                                        }
                                        Thread.Sleep(100);

                                        string TimeAus = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTieAuse')]", "Tiempo Auscencia", file);
                                        Thread.Sleep(100);
                                        if (TimeAus != TimeAusEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeAusEsp + " y el encontrado es: " + TimeAus);
                                        }
                                        Thread.Sleep(100);

                                        string CargAr = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblArcAdju')]", "Cargue Archivos", file);
                                        Thread.Sleep(100);
                                        if (CargAr != CargArEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargArEsp + " y el encontrado es: " + CargAr);
                                        }
                                        Thread.Sleep(100);

                                        string TipoDoc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]", "Tipo Documento", file);
                                        Thread.Sleep(100);
                                        if (TipoDoc != TipoDocEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocEsp + " y el encontrado es: " + TipoDoc);
                                        }
                                        Thread.Sleep(100);

                                        for (int i = 0; i <= 25; i++)
                                        {
                                            SendKeys.Send("{UP}");
                                            Thread.Sleep(100);
                                        }
                                    }
                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ApruebaRechazaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ApruebaRechazaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["LugAdmEsp"].ToString().Length != 0 && rows["LugAdmEsp"].ToString() != null &&
                                rows["CodAreaEsp"].ToString().Length != 0 && rows["CodAreaEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["ObjGenEsp"].ToString().Length != 0 && rows["ObjGenEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["IdJefeEsp"].ToString().Length != 0 && rows["IdJefeEsp"].ToString() != null &&
                                rows["NomJefeEsp"].ToString().Length != 0 && rows["NomJefeEsp"].ToString() != null &&
                                rows["IdAutoEsp"].ToString().Length != 0 && rows["IdAutoEsp"].ToString() != null &&
                                rows["NomAutoEsp"].ToString().Length != 0 && rows["NomAutoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string LugAdmEsp = rows["LugAdmEsp"].ToString();
                                string CodAreaEsp = rows["CodAreaEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string ObjGenEsp = rows["ObjGenEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string IdJefeEsp = rows["IdJefeEsp"].ToString();
                                string NomJefeEsp = rows["NomJefeEsp"].ToString();
                                string IdAutoEsp = rows["IdAutoEsp"].ToString();
                                string NomAutoEsp = rows["NomAutoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    if (selenium.ExistControl("//a[contains(.,'Cerrar')]"))
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(500);

                                    }
                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string LugAdm = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Lugar Administrativo", file);
                                    Thread.Sleep(100);
                                    if (LugAdm != LugAdmEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LugAdmEsp + " y el encontrado es: " + LugAdm);
                                    }
                                    Thread.Sleep(100);

                                    string CodArea = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl0')]", "Area", file);
                                    Thread.Sleep(100);
                                    if (CodArea != CodAreaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodAreaEsp + " y el encontrado es: " + CodArea);
                                    }
                                    Thread.Sleep(100);

                                    string Estado = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstApro')]", "Estado", file);
                                    Thread.Sleep(100);
                                    if (Estado != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + Estado);
                                    }
                                    Thread.Sleep(100);

                                    string FechaSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecSol_lblFecha')]", "Fecha Solicitud", file);
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIni_lblFecha')]", "Fecha Inicial", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechFin_lblFecha')]", "Fecha Final", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string ObjGen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsGral_lblTexto')]", "Objetivos Generales", file);
                                    Thread.Sleep(100);
                                    if (ObjGen != ObjGenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObjGenEsp + " y el encontrado es: " + ObjGen);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 8; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(200);
                                    }


                                    string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl5')]", "Empleados", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    string IdJefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lbljefInm')]", "Identificación Jefe", file);
                                    Thread.Sleep(100);
                                    if (IdJefe != IdJefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdJefeEsp + " y el encontrado es: " + IdJefe);
                                    }
                                    Thread.Sleep(100);

                                    string NomJefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomFeje')]", "Nombre Jefe", file);
                                    Thread.Sleep(100);
                                    if (NomJefe != NomJefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomJefeEsp + " y el encontrado es: " + NomJefe);
                                    }
                                    Thread.Sleep(100);

                                    string IdAuto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAutor')]", "Identificación Autorización", file);
                                    Thread.Sleep(100);
                                    if (IdAuto != IdAutoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdAutoEsp + " y el encontrado es: " + IdAuto);
                                    }
                                    Thread.Sleep(100);

                                    string NomAuto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomAutor')]", "Nombre Autorizador", file);
                                    Thread.Sleep(100);
                                    if (NomAuto != NomAutoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomAutoEsp + " y el encontrado es: " + NomAuto);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 8; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                        Thread.Sleep(200);
                                    }

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_FlujoIncapacidadesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_FlujoIncapacidadesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodInteEsp"].ToString().Length != 0 && rows["CodInteEsp"].ToString() != null &&
                                rows["NumdiasEsp"].ToString().Length != 0 && rows["NumdiasEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["NombreAPEsp"].ToString().Length != 0 && rows["NombreAPEsp"].ToString() != null &&
                                rows["FechaNotEsp"].ToString().Length != 0 && rows["FechaNotEsp"].ToString() != null &&
                                rows["CodEpsEsp"].ToString().Length != 0 && rows["CodEpsEsp"].ToString() != null &&
                                rows["NomEpsEsp"].ToString().Length != 0 && rows["NomEpsEsp"].ToString() != null &&
                                rows["CodAfpEsp"].ToString().Length != 0 && rows["CodAfpEsp"].ToString() != null &&
                                rows["NomAfpEsp"].ToString().Length != 0 && rows["NomAfpEsp"].ToString() != null &&
                                rows["CodArlEsp"].ToString().Length != 0 && rows["CodArlEsp"].ToString() != null &&
                                rows["NomArlEsp"].ToString().Length != 0 && rows["NomArlEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&
                                rows["AddDocEsp"].ToString().Length != 0 && rows["AddDocEsp"].ToString() != null &&
                                rows["TipoDocEsp"].ToString().Length != 0 && rows["TipoDocEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodInteEsp = rows["CodInteEsp"].ToString();
                                string NumdiasEsp = rows["NumdiasEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string NombreAPEsp = rows["NombreAPEsp"].ToString();
                                string FechaNotEsp = rows["FechaNotEsp"].ToString();
                                string CodEpsEsp = rows["CodEpsEsp"].ToString();
                                string NomEpsEsp = rows["NomEpsEsp"].ToString();
                                string CodAfpEsp = rows["CodAfpEsp"].ToString();
                                string NomAfpEsp = rows["NomAfpEsp"].ToString();
                                string CodArlEsp = rows["CodArlEsp"].ToString();
                                string NomArlEsp = rows["NomArlEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();
                                string AddDocEsp = rows["AddDocEsp"].ToString();
                                string TipoDocEsp = rows["TipoDocEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_btnConsuTodos']");
                                    Thread.Sleep(1000);

                                    selenium.Click("//*[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string CodInte = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]", "Codigo Interno", file);
                                    Thread.Sleep(100);
                                    if (CodInte != CodInteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInteEsp + " y el encontrado es: " + CodInte);
                                    }
                                    Thread.Sleep(100);

                                    string Numdias = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumDias')]", "Número de días", file);
                                    Thread.Sleep(100);
                                    if (Numdias != NumdiasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumdiasEsp + " y el encontrado es: " + Numdias);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecInic_lblFecha')]", "Fecha Inicial", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCFFecFina_lblFecha')]", "Fecha Final", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmre')]", "Código Empresa", file);
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    string NombreAP = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEnre')]", "Nombres Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NombreAP != NombreAPEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreAPEsp + " y el encontrado es: " + NombreAP);
                                    }
                                    Thread.Sleep(100);

                                    string FechaNot = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecNoti_lblFecha')]", "Fecha Notificación", file);
                                    Thread.Sleep(100);
                                    if (FechaNot != FechaNotEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNotEsp + " y el encontrado es: " + FechaNot);
                                    }
                                    Thread.Sleep(100);

                                    string CodEps = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEeps')]", "Codigo EPS", file);
                                    Thread.Sleep(100);
                                    if (CodEps != CodEpsEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEpsEsp + " y el encontrado es: " + CodEps);
                                    }
                                    Thread.Sleep(100);

                                    string NomEps = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEeps')]", "Nombre EPS", file);
                                    Thread.Sleep(100);
                                    if (NomEps != NomEpsEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEpsEsp + " y el encontrado es: " + NomEps);
                                    }
                                    Thread.Sleep(100);

                                    string CodAfp = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEafp')]", "Codigo AFP", file);
                                    Thread.Sleep(100);
                                    if (CodAfp != CodAfpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodAfpEsp + " y el encontrado es: " + CodAfp);
                                    }
                                    Thread.Sleep(100);

                                    string NomAfp = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEafp')]", "Nombre AFP", file);
                                    Thread.Sleep(100);
                                    if (NomAfp != NomAfpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomAfpEsp + " y el encontrado es: " + NomAfp);
                                    }
                                    Thread.Sleep(100);

                                    string CodArl = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEarl')]", "Codigo ARL", file);
                                    Thread.Sleep(100);
                                    if (CodArl != CodArlEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodArlEsp + " y el encontrado es: " + CodArl);
                                    }
                                    Thread.Sleep(100);

                                    string NomArl = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEarl')]", "Nombre ARL", file);
                                    Thread.Sleep(100);
                                    if (NomArl != NomArlEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomArlEsp + " y el encontrado es: " + NomArl);
                                    }
                                    Thread.Sleep(100);

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtValObser_lblTexto')]", "Observaciones", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 9; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }

                                    string AddDoc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjunto')]", "Adjuntar Documento", file);
                                    Thread.Sleep(100);
                                    if (AddDoc != AddDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AddDocEsp + " y el encontrado es: " + AddDoc);
                                    }
                                    Thread.Sleep(100);

                                    string TipoDoc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]", "Tipo de Documento", file);
                                    Thread.Sleep(100);
                                    if (TipoDoc != TipoDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocEsp + " y el encontrado es: " + TipoDoc);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 9; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    int cont = 0;
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            if (cont == 8)
                                            {
                                                for (int i = 1; i <= 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                    Thread.Sleep(100);
                                                }
                                            }

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_PazYSalvoPorConfirmarNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_PazYSalvoPorConfirmarNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodDepenEsp"].ToString().Length != 0 && rows["CodDepenEsp"].ToString() != null &&
                                rows["CodArbolEsp"].ToString().Length != 0 && rows["CodArbolEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&
                                rows["ValOtrosEsp"].ToString().Length != 0 && rows["ValOtrosEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodDepenEsp = rows["CodDepenEsp"].ToString();
                                string CodArbolEsp = rows["CodArbolEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();
                                string ValOtrosEsp = rows["ValOtrosEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(100);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblIden')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomApe')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodDepen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Dependencia", file);
                                    Thread.Sleep(100);
                                    if (CodDepen != CodDepenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodDepenEsp + " y el encontrado es: " + CodDepen);
                                    }
                                    Thread.Sleep(100);

                                    string CodArbol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Árbol", file);
                                    Thread.Sleep(100);
                                    if (CodArbol != CodArbolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodArbolEsp + " y el encontrado es: " + CodArbol);
                                    }
                                    Thread.Sleep(100);

                                    string CodCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label15')]", "Cargo", file);
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]", "Centro de Costo", file);
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_OBS_SERV_lblTexto')]", "Observaciones", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 6; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(100);
                                    }

                                    string ValOtros = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblVAL_OTRS')]", "Valor Otros", file);
                                    Thread.Sleep(100);
                                    if (ValOtros != ValOtrosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValOtrosEsp + " y el encontrado es: " + ValOtros);
                                    }
                                    Thread.Sleep(100);

                                    string Estado = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEST_DPAZ')]", "Estados", file);
                                    Thread.Sleep(100);
                                    if (Estado != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + Estado);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 6; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                        Thread.Sleep(100);
                                    }

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReportesDeMiColaboradorNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReportesDeMiColaboradorNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(500);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroContra')]", "Número de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();
                                    //Thread.Sleep(800);
                                    //elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //if (elementList.Count > 0)
                                    //{
                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);

                                    //    foreach (IWebElement pageEle in elementList)
                                    //    {
                                    //        SendKeys.Send("{TAB}");
                                    //        selenium.Screenshot("TAB", true, file);

                                    //        Thread.Sleep(100);
                                    //    }
                                    //}

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_CambiarClaveNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_CambiarClaveNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ContAntEsp"].ToString().Length != 0 && rows["ContAntEsp"].ToString() != null &&
                                rows["NewPassEsp"].ToString().Length != 0 && rows["NewPassEsp"].ToString() != null &&
                                rows["CNewPassEsp"].ToString().Length != 0 && rows["CNewPassEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ContAntEsp = rows["ContAntEsp"].ToString();
                                string NewPassEsp = rows["NewPassEsp"].ToString();
                                string CNewPassEsp = rows["CNewPassEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string ContAnt = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblContAnte')]", "Contraseña Anterior", file);
                                    Thread.Sleep(100);
                                    if (ContAnt != ContAntEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContAntEsp + " y el encontrado es: " + ContAnt);
                                    }
                                    Thread.Sleep(100);

                                    string NewPass = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblContNue')]", "Nueva Contraseña", file);
                                    Thread.Sleep(100);
                                    if (NewPass != NewPassEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NewPassEsp + " y el encontrado es: " + NewPass);
                                    }
                                    Thread.Sleep(100);

                                    string CNewPass = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblContNueConf')]", "Confirmar Nueva Contraseña", file);
                                    Thread.Sleep(100);
                                    if (CNewPass != CNewPassEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CNewPassEsp + " y el encontrado es: " + CNewPass);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void SmartPeople_RequisicionesCerradasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RequisicionesCerradasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodGrupEsp"].ToString().Length != 0 && rows["CodGrupEsp"].ToString() != null &&
                                rows["RequisEsp"].ToString().Length != 0 && rows["RequisEsp"].ToString() != null &&
                                rows["CodFilEsp"].ToString().Length != 0 && rows["CodFilEsp"].ToString() != null &&
                                rows["DetRequiEsp"].ToString().Length != 0 && rows["DetRequiEsp"].ToString() != null &&
                                rows["DivPoliEsp"].ToString().Length != 0 && rows["DivPoliEsp"].ToString() != null &&
                                rows["CargoProEsp"].ToString().Length != 0 && rows["CargoProEsp"].ToString() != null &&
                                rows["TipoContEsp"].ToString().Length != 0 && rows["TipoContEsp"].ToString() != null &&
                                rows["HoraSemEsp"].ToString().Length != 0 && rows["HoraSemEsp"].ToString() != null &&
                                rows["SalBasEsp"].ToString().Length != 0 && rows["SalBasEsp"].ToString() != null &&
                                rows["PerfilEsp"].ToString().Length != 0 && rows["PerfilEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                rows["url3"].ToString().Length != 0 && rows["url3"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodGrupEsp = rows["CodGrupEsp"].ToString();
                                string RequisEsp = rows["RequisEsp"].ToString();
                                string CodFilEsp = rows["CodFilEsp"].ToString();
                                string DetRequiEsp = rows["DetRequiEsp"].ToString();
                                string DivPoliEsp = rows["DivPoliEsp"].ToString();
                                string CargoProEsp = rows["CargoProEsp"].ToString();
                                string TipoContEsp = rows["TipoContEsp"].ToString();
                                string HoraSemEsp = rows["HoraSemEsp"].ToString();
                                string SalBasEsp = rows["SalBasEsp"].ToString();
                                string PerfilEsp = rows["PerfilEsp"].ToString();

                                string url2 = rows["url2"].ToString();
                                string url3 = rows["url3"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    Thread.Sleep(5000);

                                    ChromeDriver driver3 = selenium.returnDriver();

                                    driver3.Navigate().GoToUrl(url3);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodGrup = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrse')]", "Grupo Selección", file);
                                    Thread.Sleep(100);
                                    if (CodGrup != CodGrupEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodGrupEsp + " y el encontrado es: " + CodGrup);
                                    }
                                    Thread.Sleep(100);

                                    string Requis = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodReqs')]", "Requisición", file);
                                    Thread.Sleep(100);
                                    if (Requis != RequisEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RequisEsp + " y el encontrado es: " + Requis);
                                    }
                                    Thread.Sleep(100);

                                    string CodFil = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]", "Filtro", file);
                                    Thread.Sleep(100);
                                    if (CodFil != CodFilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodFilEsp + " y el encontrado es: " + CodFil);
                                    }
                                    Thread.Sleep(100);

                                    string DetRequi = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDetRequ')]", "Detalle Requisición", file);
                                    Thread.Sleep(100);
                                    if (DetRequi != DetRequiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DetRequiEsp + " y el encontrado es: " + DetRequi);
                                    }
                                    Thread.Sleep(100);

                                    string DivPoli = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivipLugTrab_lblDivPoli')]", "Ciudad", file);
                                    Thread.Sleep(100);
                                    if (DivPoli != DivPoliEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DivPoliEsp + " y el encontrado es: " + DivPoli);
                                    }
                                    Thread.Sleep(100);

                                    string CargoPro = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]", "Cargo a Proveer", file);
                                    Thread.Sleep(100);
                                    if (CargoPro != CargoProEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoProEsp + " y el encontrado es: " + CargoPro);
                                    }
                                    Thread.Sleep(100);

                                    string TipoCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]", "Tipo de Contrato", file);
                                    Thread.Sleep(100);
                                    if (TipoCont != TipoContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoContEsp + " y el encontrado es: " + TipoCont);
                                    }
                                    Thread.Sleep(100);

                                    string HoraSem = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]", "Horas a la Semana", file);
                                    Thread.Sleep(100);
                                    if (HoraSem != HoraSemEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraSemEsp + " y el encontrado es: " + HoraSem);
                                    }
                                    Thread.Sleep(100);

                                    string SalBas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label7')]", "Sueldo Propuesto", file);
                                    Thread.Sleep(100);
                                    if (SalBas != SalBasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalBasEsp + " y el encontrado es: " + SalBas);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 6; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(100);
                                    }

                                    string Perfil = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label9')]", "Requisitos", file);
                                    Thread.Sleep(100);
                                    if (Perfil != PerfilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerfilEsp + " y el encontrado es: " + Perfil);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 6; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                        Thread.Sleep(100);
                                    }

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[2].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteDeValicacionCumplimientoPerfilNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReporteDeValicacionCumplimientoPerfilNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["GrupSelecEsp"].ToString().Length != 0 && rows["GrupSelecEsp"].ToString() != null &&
                                rows["RequisEsp"].ToString().Length != 0 && rows["RequisEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string GrupSelecEsp = rows["GrupSelecEsp"].ToString();
                                string RequisEsp = rows["RequisEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    if (database == "ORA")
                                    {
                                        string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                        Thread.Sleep(100);
                                        if (CodEmpre != CodEmpreEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                        }
                                        Thread.Sleep(100);

                                        string GrupSelec = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrse')]", "Grupo Selección", file);
                                        Thread.Sleep(100);
                                        if (GrupSelec != GrupSelecEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GrupSelecEsp + " y el encontrado es: " + GrupSelec);
                                        }
                                        Thread.Sleep(100);

                                        string Requis = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodReqs')]", "Requisición", file);
                                        Thread.Sleep(100);
                                        if (Requis != RequisEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RequisEsp + " y el encontrado es: " + Requis);
                                        }
                                        Thread.Sleep(100);
                                    }
                                    else
                                    {
                                        string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                        Thread.Sleep(100);
                                        if (CodEmpre != CodEmpreEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                        }
                                        Thread.Sleep(100);

                                        string GrupSelec = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrse')]", "Grupo Selección", file);
                                        Thread.Sleep(100);
                                        if (GrupSelec != GrupSelecEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GrupSelecEsp + " y el encontrado es: " + GrupSelec);
                                        }
                                        Thread.Sleep(100);

                                        string Requis = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodReqs')]", "Requisición", file);
                                        Thread.Sleep(100);
                                        if (Requis != RequisEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RequisEsp + " y el encontrado es: " + Requis);
                                        }
                                        Thread.Sleep(100);


                                    }
                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ConvocatoriasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ConvocatoriasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConvocaEsp"].ToString().Length != 0 && rows["ConvocaEsp"].ToString() != null &&
                                rows["FechaFijaEsp"].ToString().Length != 0 && rows["FechaFijaEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["FechaInsEsp"].ToString().Length != 0 && rows["FechaInsEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["CodGraEsp"].ToString().Length != 0 && rows["CodGraEsp"].ToString() != null &&
                                rows["TipoAspEsp"].ToString().Length != 0 && rows["TipoAspEsp"].ToString() != null &&
                                rows["NumDocEsp"].ToString().Length != 0 && rows["NumDocEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConvocaEsp = rows["ConvocaEsp"].ToString();
                                string FechaFijaEsp = rows["FechaFijaEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string FechaInsEsp = rows["FechaInsEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string CodGraEsp = rows["CodGraEsp"].ToString();
                                string TipoAspEsp = rows["TipoAspEsp"].ToString();
                                string NumDocEsp = rows["NumDocEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string Convoca = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConvoc')]", "Convocatoria", file);
                                    Thread.Sleep(100);
                                    if (Convoca != ConvocaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConvocaEsp + " y el encontrado es: " + Convoca);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFija = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecFija')]", "Fecha Fijación", file);
                                    Thread.Sleep(100);
                                    if (FechaFija != FechaFijaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFijaEsp + " y el encontrado es: " + FechaFija);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInic')]", "Fecha Inicial", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecHast')]", "Ficha Fin", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIns = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInsc')]", "Fecha Inscripción", file);
                                    Thread.Sleep(100);
                                    if (FechaIns != FechaInsEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaInsEsp + " y el encontrado es: " + FechaIns);
                                    }
                                    Thread.Sleep(100);

                                    string CodCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Cargo", file);
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    string CodGra = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Grado", file);
                                    Thread.Sleep(100);
                                    if (CodGra != CodGraEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodGraEsp + " y el encontrado es: " + CodGra);
                                    }
                                    Thread.Sleep(100);

                                    string TipoAsp = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]", "Tipo de Aspirante", file);
                                    Thread.Sleep(100);
                                    if (TipoAsp != TipoAspEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoAspEsp + " y el encontrado es: " + TipoAsp);
                                    }
                                    Thread.Sleep(100);

                                    string NumDoc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]", "Número de Documentos Aportados", file);
                                    Thread.Sleep(100);
                                    if (NumDoc != NumDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumDocEsp + " y el encontrado es: " + NumDoc);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[3].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RegistroAtelNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RegistroAtelNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFecAtep_lblFecha')]", "Desde", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFecAtepF_lblFecha')]", "Hasta", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_InspeccionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_InspeccionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFechaInsp_lblFecha')]", "Desde", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlConsuFechaInspF_lblFecha')]", "Hasta", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_NovedadesTemporalesRHNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_NovedadesTemporalesRHNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomEmpleEsp"].ToString().Length != 0 && rows["NomEmpleEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["TipoNovEsp"].ToString().Length != 0 && rows["TipoNovEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&
                                rows["ValCuotaEsp"].ToString().Length != 0 && rows["ValCuotaEsp"].ToString() != null &&
                                rows["NumCuotaEsp"].ToString().Length != 0 && rows["NumCuotaEsp"].ToString() != null &&
                                rows["ValTotalEsp"].ToString().Length != 0 && rows["ValTotalEsp"].ToString() != null &&
                                rows["SalNovEsp"].ToString().Length != 0 && rows["SalNovEsp"].ToString() != null &&
                                rows["FechaPagoEsp"].ToString().Length != 0 && rows["FechaPagoEsp"].ToString() != null &&
                                rows["FechaNovEsp"].ToString().Length != 0 && rows["FechaNovEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomEmpleEsp = rows["NomEmpleEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string TipoNovEsp = rows["TipoNovEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();
                                string ValCuotaEsp = rows["ValCuotaEsp"].ToString();
                                string NumCuotaEsp = rows["NumCuotaEsp"].ToString();
                                string ValTotalEsp = rows["ValTotalEsp"].ToString();
                                string SalNovEsp = rows["SalNovEsp"].ToString();
                                string FechaPagoEsp = rows["FechaPagoEsp"].ToString();
                                string FechaNovEsp = rows["FechaNovEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar por Identificación", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulName = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "COnsultar por Nombres", file);
                                    Thread.Sleep(100);
                                    if (ConsulName != ConsulNameEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar por Apellidos", file);
                                    Thread.Sleep(100);
                                    if (ConsulApe != ConsulApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApeEsp + " y el encontrado es: " + ConsulApe);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombre", file);
                                    Thread.Sleep(100);
                                    if (NomEmple != NomEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEmpleEsp + " y el encontrado es: " + NomEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Codigo Cargo", file);
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    string Concepto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCons')]", "Concepto", file);
                                    Thread.Sleep(100);
                                    if (Concepto != ConceptoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConceptoEsp + " y el encontrado es: " + Concepto);
                                    }
                                    Thread.Sleep(100);

                                    string TipoNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNove')]", "Tipo de Novedad", file);
                                    Thread.Sleep(100);
                                    if (TipoNov != TipoNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoNovEsp + " y el encontrado es: " + TipoNov);
                                    }
                                    Thread.Sleep(100);

                                    string Cantidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanNove')]", "Cantidad", file);
                                    Thread.Sleep(100);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);

                                    string ValCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValCuot')]", "Valor Cuota", file);
                                    Thread.Sleep(100);
                                    if (ValCuota != ValCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValCuotaEsp + " y el encontrado es: " + ValCuota);
                                    }
                                    Thread.Sleep(100);

                                    string NumCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCuot')]", "Numero de Cuotas", file);
                                    Thread.Sleep(100);
                                    if (NumCuota != NumCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumCuotaEsp + " y el encontrado es: " + NumCuota);
                                    }
                                    Thread.Sleep(100);

                                    string ValTotal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValTota')]", "Valor Total", file);
                                    Thread.Sleep(100);
                                    if (ValTotal != ValTotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValTotalEsp + " y el encontrado es: " + ValTotal);
                                    }
                                    Thread.Sleep(100);

                                    string SalNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSalNove')]", "Saldo Novedad", file);
                                    Thread.Sleep(100);
                                    if (SalNov != SalNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalNovEsp + " y el encontrado es: " + SalNov);
                                    }
                                    Thread.Sleep(100);

                                    string FechaPago = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecPago_lblFecha')]", "Fecha de Pago", file);
                                    Thread.Sleep(100);
                                    if (FechaPago != FechaPagoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaPagoEsp + " y el encontrado es: " + FechaPago);
                                    }
                                    Thread.Sleep(100);

                                    string FechaNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecReal_lblFecha')]", "Fecha de Novedad", file);
                                    Thread.Sleep(100);
                                    if (FechaNov != FechaNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNovEsp + " y el encontrado es: " + FechaNov);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        //selenium.Screenshot("Campos Requeridos", true, file);

                                        Thread.Sleep(500);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(500);
                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {
                                                Thread.Sleep(800);
                                                SendKeys.Send("{TAB}");
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_NovedadesPermisosUconcNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_NovedadesPermisosUconcNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomEmpleEsp"].ToString().Length != 0 && rows["NomEmpleEsp"].ToString() != null &&
                                rows["ApeEmpleEsp"].ToString().Length != 0 && rows["ApeEmpleEsp"].ToString() != null &&
                                rows["CodInteEsp"].ToString().Length != 0 && rows["CodInteEsp"].ToString() != null &&
                                rows["CodConEsp"].ToString().Length != 0 && rows["CodConEsp"].ToString() != null &&
                                rows["CodSecEsp"].ToString().Length != 0 && rows["CodSecEsp"].ToString() != null &&
                                rows["TipoNovEsp"].ToString().Length != 0 && rows["TipoNovEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&
                                rows["ValCuotaEsp"].ToString().Length != 0 && rows["ValCuotaEsp"].ToString() != null &&
                                rows["NumCuotaEsp"].ToString().Length != 0 && rows["NumCuotaEsp"].ToString() != null &&
                                rows["ValTotalEsp"].ToString().Length != 0 && rows["ValTotalEsp"].ToString() != null &&
                                rows["SalNovEsp"].ToString().Length != 0 && rows["SalNovEsp"].ToString() != null &&
                                rows["FechaPagoEsp"].ToString().Length != 0 && rows["FechaPagoEsp"].ToString() != null &&
                                rows["FechaNovEsp"].ToString().Length != 0 && rows["FechaNovEsp"].ToString() != null &&
                                rows["EstaNovEsp"].ToString().Length != 0 && rows["EstaNovEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomEmpleEsp = rows["NomEmpleEsp"].ToString();
                                string ApeEmpleEsp = rows["ApeEmpleEsp"].ToString();
                                string CodInteEsp = rows["CodInteEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodConEsp = rows["CodConEsp"].ToString();
                                string CodSecEsp = rows["CodSecEsp"].ToString();
                                string FechaPagoEsp = rows["FechaPagoEsp"].ToString();
                                string FechaNovEsp = rows["FechaNovEsp"].ToString();
                                string TipoNovEsp = rows["TipoNovEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();
                                string ValCuotaEsp = rows["ValCuotaEsp"].ToString();
                                string NumCuotaEsp = rows["NumCuotaEsp"].ToString();
                                string ValTotalEsp = rows["ValTotalEsp"].ToString();
                                string SalNovEsp = rows["SalNovEsp"].ToString();
                                string EstaNovEsp = rows["EstaNovEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(100);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres", file);
                                    Thread.Sleep(100);
                                    if (NomEmple != NomEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEmpleEsp + " y el encontrado es: " + NomEmple);
                                    }
                                    Thread.Sleep(100);

                                    string ApeEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]", "Apellidos", file);
                                    Thread.Sleep(100);
                                    if (ApeEmple != ApeEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApeEmpleEsp + " y el encontrado es: " + ApeEmple);
                                    }
                                    Thread.Sleep(100);

                                    string CodInte = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]", "Código Interno", file);
                                    Thread.Sleep(100);
                                    if (CodInte != CodInteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInteEsp + " y el encontrado es: " + CodInte);
                                    }
                                    Thread.Sleep(100);

                                    string CodCon = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodConc')]", "Concepto", file);
                                    Thread.Sleep(100);
                                    if (CodCon != CodConEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodConEsp + " y el encontrado es: " + CodCon);
                                    }
                                    Thread.Sleep(100);

                                    string CodSec = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSecConc')]", "Secuencial", file);
                                    Thread.Sleep(100);
                                    if (CodSec != CodSecEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodSecEsp + " y el encontrado es: " + CodSec);
                                    }
                                    Thread.Sleep(100);

                                    string TipoNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNove')]", "Tipo de Novedad", file);
                                    Thread.Sleep(100);
                                    if (TipoNov != TipoNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoNovEsp + " y el encontrado es: " + TipoNov);
                                    }
                                    Thread.Sleep(100);

                                    string Cantidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanNove')]", "Cantidad", file);
                                    Thread.Sleep(100);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);

                                    string ValCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValCuot')]", "Valor Cuota", file);
                                    Thread.Sleep(100);
                                    if (ValCuota != ValCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValCuotaEsp + " y el encontrado es: " + ValCuota);
                                    }
                                    Thread.Sleep(100);

                                    string NumCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCuot')]", "Numero de Cuotas", file);
                                    Thread.Sleep(100);
                                    if (NumCuota != NumCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumCuotaEsp + " y el encontrado es: " + NumCuota);
                                    }
                                    Thread.Sleep(100);

                                    string ValTotal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValTota')]", "Valor Total", file);
                                    Thread.Sleep(100);
                                    if (ValTotal != ValTotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValTotalEsp + " y el encontrado es: " + ValTotal);
                                    }
                                    Thread.Sleep(100);

                                    string SalNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSalNove')]", "Saldo Novedad", file);
                                    Thread.Sleep(100);
                                    if (SalNov != SalNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalNovEsp + " y el encontrado es: " + SalNov);
                                    }
                                    Thread.Sleep(100);

                                    string FechaPago = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KctrLFecPago_lblFecha')]", "Fecha de Pago", file);
                                    Thread.Sleep(100);
                                    if (FechaPago != FechaPagoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaPagoEsp + " y el encontrado es: " + FechaPago);
                                    }
                                    Thread.Sleep(100);

                                    string FechaNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KctrLFecReal_lblFecha')]", "Fecha Novedad", file);
                                    Thread.Sleep(100);
                                    if (FechaNov != FechaNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNovEsp + " y el encontrado es: " + FechaNov);
                                    }
                                    Thread.Sleep(100);

                                    string EstaNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstNove')]", "Estado Novedad", file);
                                    Thread.Sleep(100);
                                    if (EstaNov != EstaNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaNovEsp + " y el encontrado es: " + EstaNov);
                                    }
                                    Thread.Sleep(100);

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]", "Observaciones", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RegistroATELNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RegistroATELNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&
                                rows["ConsulCargEsp"].ToString().Length != 0 && rows["ConsulCargEsp"].ToString() != null &&
                                rows["DesCargEsp"].ToString().Length != 0 && rows["DesCargEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&
                                rows["CentroWorkEsp"].ToString().Length != 0 && rows["CentroWorkEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();
                                string ConsulCargEsp = rows["ConsulCargEsp"].ToString();
                                string DesCargEsp = rows["DesCargEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();
                                string CentroWorkEsp = rows["CentroWorkEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuIden')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulName = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Nombres ", file);
                                    Thread.Sleep(100);
                                    if (ConsulName != ConsulNameEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuApeEmpl')]", "Apellidos", file);
                                    Thread.Sleep(100);
                                    if (ConsulApe != ConsulApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApeEsp + " y el encontrado es: " + ConsulApe);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCargo')]", "Cargo", file);
                                    Thread.Sleep(100);
                                    if (ConsulCarg != ConsulCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulCargEsp + " y el encontrado es: " + ConsulCarg);
                                    }
                                    Thread.Sleep(100);

                                    string DesCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuDescCargo')]", "Descripcion del cargo", file);
                                    Thread.Sleep(100);
                                    if (DesCarg != DesCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DesCargEsp + " y el encontrado es: " + DesCarg);
                                    }
                                    Thread.Sleep(100);

                                    string Fecha = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuFecAtep')]", "Fecha ATEP", file);
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    string CentroWork = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomCenTra')]", "Nombre del centro de trabajo", file);
                                    Thread.Sleep(100);
                                    if (CentroWork != CentroWorkEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroWorkEsp + " y el encontrado es: " + CentroWork);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_TareasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_TareasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["CodFluEsp"].ToString().Length != 0 && rows["CodFluEsp"].ToString() != null &&
                                rows["NameEmpleEsp"].ToString().Length != 0 && rows["NameEmpleEsp"].ToString() != null &&
                                rows["LastNameEsp"].ToString().Length != 0 && rows["LastNameEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string CodFluEsp = rows["CodFluEsp"].ToString();
                                string NameEmpleEsp = rows["NameEmpleEsp"].ToString();
                                string LastNameEsp = rows["LastNameEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodFlu = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodFluj')]", "WorkFlow", file);
                                    Thread.Sleep(100);
                                    if (CodFlu != CodFluEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodFluEsp + " y el encontrado es: " + CodFlu);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NameEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres", file);
                                    Thread.Sleep(100);
                                    if (NameEmple != NameEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NameEmpleEsp + " y el encontrado es: " + NameEmple);
                                    }
                                    Thread.Sleep(100);

                                    string LastName = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]", "Apellidos", file);
                                    Thread.Sleep(100);
                                    if (LastName != LastNameEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LastNameEsp + " y el encontrado es: " + LastName);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RequisicionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RequisicionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["CodDepenEsp"].ToString().Length != 0 && rows["CodDepenEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&
                                rows["NumReqEsp"].ToString().Length != 0 && rows["NumReqEsp"].ToString() != null &&
                                rows["FechaReqEsp"].ToString().Length != 0 && rows["FechaReqEsp"].ToString() != null &&
                                rows["ToDependEsp"].ToString().Length != 0 && rows["ToDependEsp"].ToString() != null &&
                                rows["OriPerfEsp"].ToString().Length != 0 && rows["OriPerfEsp"].ToString() != null &&
                                rows["CargoSolEsp"].ToString().Length != 0 && rows["CargoSolEsp"].ToString() != null &&
                                rows["NumPlaEsp"].ToString().Length != 0 && rows["NumPlaEsp"].ToString() != null &&
                                rows["SalBasicEsp"].ToString().Length != 0 && rows["SalBasicEsp"].ToString() != null &&
                                rows["DepCarSolEsp"].ToString().Length != 0 && rows["DepCarSolEsp"].ToString() != null &&
                                rows["RolSolEsp"].ToString().Length != 0 && rows["RolSolEsp"].ToString() != null &&
                                rows["ClassContEsp"].ToString().Length != 0 && rows["ClassContEsp"].ToString() != null &&
                                rows["TimeContEsp"].ToString().Length != 0 && rows["TimeContEsp"].ToString() != null &&
                                rows["TimeTipeEsp"].ToString().Length != 0 && rows["TimeTipeEsp"].ToString() != null &&
                                rows["MotiSolEsp"].ToString().Length != 0 && rows["MotiSolEsp"].ToString() != null &&
                                rows["FechaInEsp"].ToString().Length != 0 && rows["FechaInEsp"].ToString() != null &&
                                rows["JustifEsp"].ToString().Length != 0 && rows["JustifEsp"].ToString() != null &&
                                rows["FunctionEsp"].ToString().Length != 0 && rows["FunctionEsp"].ToString() != null &&
                                rows["RequiEsp"].ToString().Length != 0 && rows["RequiEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string CodDepenEsp = rows["CodDepenEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();
                                string NumReqEsp = rows["NumReqEsp"].ToString();
                                string FechaReqEsp = rows["FechaReqEsp"].ToString();
                                string ToDependEsp = rows["ToDependEsp"].ToString();
                                string OriPerfEsp = rows["OriPerfEsp"].ToString();
                                string CargoSolEsp = rows["CargoSolEsp"].ToString();
                                string NumPlaEsp = rows["NumPlaEsp"].ToString();
                                string SalBasicEsp = rows["SalBasicEsp"].ToString();
                                string DepCarSolEsp = rows["DepCarSolEsp"].ToString();
                                string RolSolEsp = rows["RolSolEsp"].ToString();
                                string ClassContEsp = rows["ClassContEsp"].ToString();
                                string TimeContEsp = rows["TimeContEsp"].ToString();
                                string TimeTipeEsp = rows["TimeTipeEsp"].ToString();
                                string MotiSolEsp = rows["MotiSolEsp"].ToString();
                                string FechaInEsp = rows["FechaInEsp"].ToString();
                                string JustifEsp = rows["JustifEsp"].ToString();
                                string FunctionEsp = rows["FunctionEsp"].ToString();
                                string RequiEsp = rows["RequiEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodCarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    string CodDepen = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtDepe')]", "Dependencia", file);
                                    Thread.Sleep(100);
                                    if (CodDepen != CodDepenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodDepenEsp + " y el encontrado es: " + CodDepen);
                                    }
                                    Thread.Sleep(100);

                                    string Estado = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstRequ')]", "Estado", file);
                                    Thread.Sleep(100);
                                    if (Estado != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + Estado);
                                    }
                                    Thread.Sleep(100);

                                    string NumReq = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroRequ')]", "Numero Requisición", file);
                                    Thread.Sleep(100);
                                    if (NumReq != NumReqEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumReqEsp + " y el encontrado es: " + NumReq);
                                    }
                                    Thread.Sleep(100);

                                    string FechaReq = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecRequ_lblFecha')]", "Fecha Requisición", file);
                                    Thread.Sleep(100);
                                    if (FechaReq != FechaReqEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaReqEsp + " y el encontrado es: " + FechaReq);
                                    }
                                    Thread.Sleep(100);

                                    string ToDepend = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblParDepe')]", "Para Dependencia", file);
                                    Thread.Sleep(100);
                                    if (ToDepend != ToDependEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ToDependEsp + " y el encontrado es: " + ToDepend);
                                    }
                                    Thread.Sleep(100);

                                    string OriPerf = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl0')]", "Origen de Perfiles", file);
                                    Thread.Sleep(100);
                                    if (OriPerf != OriPerfEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + OriPerfEsp + " y el encontrado es: " + OriPerf);
                                    }
                                    Thread.Sleep(100);

                                    string CargoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCarSoli')]", "Cargo Solicitado", file);
                                    Thread.Sleep(100);
                                    if (CargoSol != CargoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoSolEsp + " y el encontrado es: " + CargoSol);
                                    }
                                    Thread.Sleep(100);

                                    string NumPla = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroPlaz')]", "Número de plazas", file);
                                    Thread.Sleep(100);
                                    if (NumPla != NumPlaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumPlaEsp + " y el encontrado es: " + NumPla);
                                    }
                                    Thread.Sleep(100);

                                    string SalBasic = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSueBasi')]", "Sueldo Básico", file);
                                    Thread.Sleep(100);
                                    if (SalBasic != SalBasicEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalBasicEsp + " y el encontrado es: " + SalBasic);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 10; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(100);
                                    }

                                    string DepCarSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtSoli')]", "Dependencia Cargo Solicitado", file);
                                    Thread.Sleep(100);
                                    if (DepCarSol != DepCarSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DepCarSolEsp + " y el encontrado es: " + DepCarSol);
                                    }
                                    Thread.Sleep(100);

                                    string RolSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblRolSoli')]", "Rol Solicitado", file);
                                    Thread.Sleep(100);
                                    if (RolSol != RolSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RolSolEsp + " y el encontrado es: " + RolSol);
                                    }
                                    Thread.Sleep(100);

                                    string ClassCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblClaCont')]", "Clase de Contrato", file);
                                    Thread.Sleep(100);
                                    if (ClassCont != ClassContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClassContEsp + " y el encontrado es: " + ClassCont);
                                    }
                                    Thread.Sleep(100);

                                    string TimeCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTieCont')]", "Tiempo Contrato", file);
                                    Thread.Sleep(100);
                                    if (TimeCont != TimeContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeContEsp + " y el encontrado es: " + TimeCont);
                                    }
                                    Thread.Sleep(100);

                                    string TimeTipe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipTiem')]", "Tipo Tiempo", file);
                                    Thread.Sleep(100);
                                    if (TimeTipe != TimeTipeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeTipeEsp + " y el encontrado es: " + TimeTipe);
                                    }
                                    Thread.Sleep(100);

                                    string MotiSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMoti')]", "Motivo Solicitud", file);
                                    Thread.Sleep(100);
                                    if (MotiSol != MotiSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotiSolEsp + " y el encontrado es: " + MotiSol);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIn = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIngr_lblFecha')]", "Fecha probable de ingreso", file);
                                    Thread.Sleep(100);
                                    if (FechaIn != FechaInEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaInEsp + " y el encontrado es: " + FechaIn);
                                    }
                                    Thread.Sleep(100);

                                    string Justif = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJust_lblTexto')]", "Justificación", file);
                                    Thread.Sleep(100);
                                    if (Justif != JustifEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JustifEsp + " y el encontrado es: " + Justif);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 13; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(100);
                                    }

                                    string Function = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtFunc_lblTexto')]", "Funciones", file);
                                    Thread.Sleep(100);
                                    if (Function != FunctionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FunctionEsp + " y el encontrado es: " + Function);
                                    }
                                    Thread.Sleep(100);

                                    string Requi = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtRequ_lblTexto')]", "Requisitos", file);
                                    Thread.Sleep(100);
                                    if (Requi != RequiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RequiEsp + " y el encontrado es: " + Requi);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 5; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(100);
                                    }

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]", "Observaciones", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 28; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                        Thread.Sleep(100);
                                    }

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));


                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            int cont = 0;
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {
                                                cont++;
                                                SendKeys.Send("{TAB}");
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                                if (cont == 10 || cont == 20)
                                                {
                                                    for (int i = 1; i <= 10; i++)
                                                    {
                                                        SendKeys.Send("{DOWN}");
                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ListadoPermisoLideresNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ListadoPermisoLideresNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["PendienteEsp"].ToString().Length != 0 && rows["PendienteEsp"].ToString() != null &&
                                rows["AprobadoEsp"].ToString().Length != 0 && rows["AprobadoEsp"].ToString() != null &&
                                rows["RechazadoEsp"].ToString().Length != 0 && rows["RechazadoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string PendienteEsp = rows["PendienteEsp"].ToString();
                                string AprobadoEsp = rows["AprobadoEsp"].ToString();
                                string RechazadoEsp = rows["RechazadoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]", "Fecha Inicial", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]", "Fecha Fin", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string Pendiente = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblPendiente')]", "Pendiente", file);
                                    Thread.Sleep(100);
                                    if (Pendiente != PendienteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PendienteEsp + " y el encontrado es: " + Pendiente);
                                    }
                                    Thread.Sleep(100);

                                    string Aprobado = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAprobado')]", "Aprobado", file);
                                    Thread.Sleep(100);
                                    if (Aprobado != AprobadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AprobadoEsp + " y el encontrado es: " + Aprobado);
                                    }
                                    Thread.Sleep(100);

                                    string Rechazado = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblRechazado')]", "Rechazado", file);
                                    Thread.Sleep(100);
                                    if (Rechazado != RechazadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RechazadoEsp + " y el encontrado es: " + Rechazado);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_InduccionCOlaboradorNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_InduccionCOlaboradorNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&
                                //rows["InduEsp"].ToString().Length != 0 && rows["InduEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();
                                //InduEsp
                                string InduEsp = rows["InduEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(100);
                                    }

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos


                                    if (database == "ORA")
                                    {
                                        string Indu = selenium.CamposEmergentes("//span[contains(@id,'ctl00_lblMenMarco')]", "Inducción del Colaborador", file);
                                        Thread.Sleep(100);
                                        if (Indu != InduEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InduEsp + " y el encontrado es: " + Indu);
                                        }
                                        Thread.Sleep(100);

                                    }
                                    else
                                    {
                                        string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar por Identificación", file);
                                        Thread.Sleep(100);
                                        if (ConsulId != ConsulIdEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                        }
                                        Thread.Sleep(100);

                                        string ConsulName = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar por Nombres", file);
                                        Thread.Sleep(100);
                                        if (ConsulName != ConsulNameEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                        }
                                        Thread.Sleep(100);

                                        string ConsulApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar por Apellidos", file);
                                        Thread.Sleep(100);
                                        if (ConsulApe != ConsulApeEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApeEsp + " y el encontrado es: " + ConsulApe);
                                        }
                                        Thread.Sleep(100);
                                    }
                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR
                                    if (database == "SQL")
                                    {
                                        ChromeDriver driver = selenium.returnDriver();
                                        List<IWebElement> elementList = new List<IWebElement>();
                                        Thread.Sleep(800);
                                        elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                        if (elementList.Count > 0)
                                        {
                                            elementList[0].Click();
                                            Thread.Sleep(500);

                                            foreach (IWebElement pageEle in elementList)
                                            {
                                                SendKeys.Send("{TAB}");
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                        }
                                    }
                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RegistroProalimentacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RegistroProalimentacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["DocColEsp"].ToString().Length != 0 && rows["DocColEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string DocColEsp = rows["DocColEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string DocCol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Documento del Colaborador", file);
                                    Thread.Sleep(100);
                                    if (DocCol != DocColEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DocColEsp + " y el encontrado es: " + DocCol);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReportePermisosLicenciasVacacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReportePermisosLicenciasVacacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["TipoSolEsp"].ToString().Length != 0 && rows["TipoSolEsp"].ToString() != null &&
                                rows["EstaSolEsp"].ToString().Length != 0 && rows["EstaSolEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string TipoSolEsp = rows["TipoSolEsp"].ToString();
                                string EstaSolEsp = rows["EstaSolEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string TipoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Tipo de Solicitud", file);
                                    Thread.Sleep(100);
                                    if (TipoSol != TipoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoSolEsp + " y el encontrado es: " + TipoSol);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    string EstaSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Estado de la Solicitud", file);
                                    Thread.Sleep(100);
                                    if (EstaSol != EstaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaSolEsp + " y el encontrado es: " + EstaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]", "Fecha Inicial", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]", "Fecha Final", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);



                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramarRecuperarNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramarRecuperarNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["TimeCompEsp"].ToString().Length != 0 && rows["TimeCompEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string TimeCompEsp = rows["TimeCompEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(100);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos


                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string TimeComp = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]", "Tiempo por Compensar", file);
                                    Thread.Sleep(100);
                                    if (TimeComp != TimeCompEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeCompEsp + " y el encontrado es: " + TimeComp);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));




                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(100);

                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    SendKeys.Send("{TAB}");
                                                    selenium.Screenshot("TAB", true, file);

                                                    Thread.Sleep(100);
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramacionCompensacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramacionCompensacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["TimeCompEsp"].ToString().Length != 0 && rows["TimeCompEsp"].ToString() != null &&
                                rows["TotalTimeEsp"].ToString().Length != 0 && rows["TotalTimeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string TimeCompEsp = rows["TimeCompEsp"].ToString();
                                string TotalTimeEsp = rows["TotalTimeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(100);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos


                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string TimeComp = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]", "Tiempo por Compensar", file);
                                    Thread.Sleep(100);
                                    if (TimeComp != TimeCompEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeCompEsp + " y el encontrado es: " + TimeComp);
                                    }
                                    Thread.Sleep(100);

                                    string TotalTime = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTotal')]", "Total de Horas y Minutos", file);
                                    Thread.Sleep(100);
                                    if (TotalTime != TotalTimeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TotalTimeEsp + " y el encontrado es: " + TotalTimeEsp);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramarCompensacionDelRRHHNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramarCompensacionDelRRHHNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_lblMenMarco')]", "Programar Compensación del RRHH", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_PermanenciasFueraHorarioPendientesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_PermanenciasFueraHorarioPendientesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(100);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmpleEsp);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_HostoricoHorasExtrasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_HostoricoHorasExtrasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["JefeRepEsp"].ToString().Length != 0 && rows["JefeRepEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string JefeRepEsp = rows["JefeRepEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(200);

                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnFiltro')]");
                                    Thread.Sleep(200);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Número de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]", "Centro de Costo", file);
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    string JefeRep = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Jefe a Quien Reporta", file);
                                    Thread.Sleep(100);
                                    if (JefeRep != JefeRepEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeRepEsp + " y el encontrado es: " + JefeRep);
                                    }
                                    Thread.Sleep(100);

                                    string Fecha = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecHora')]", "Fecha Hora Extra", file);
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);



                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReportesControlSobretiemposNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReportesControlSobretiemposNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulJefeEsp"].ToString().Length != 0 && rows["ConsulJefeEsp"].ToString() != null &&
                                rows["ConsulEmpleEsp"].ToString().Length != 0 && rows["ConsulEmpleEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulJefeEsp = rows["ConsulJefeEsp"].ToString();
                                string ConsulEmpleEsp = rows["ConsulEmpleEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(100);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string ConsulJefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar Por Jefe", file);
                                    Thread.Sleep(100);
                                    if (ConsulJefe != ConsulJefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulJefeEsp + " y el encontrado es: " + ConsulJefe);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar Por Empleado", file);
                                    Thread.Sleep(100);
                                    if (ConsulEmple != ConsulEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulEmpleEsp + " y el encontrado es: " + ConsulEmple);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCentroCosto')]", "Centro de Costo", file);
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReportesControlDeTiemposNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReportesControlDeTiemposNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulJefeEsp"].ToString().Length != 0 && rows["ConsulJefeEsp"].ToString() != null &&
                                rows["ConsulEmpleEsp"].ToString().Length != 0 && rows["ConsulEmpleEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulJefeEsp = rows["ConsulJefeEsp"].ToString();
                                string ConsulEmpleEsp = rows["ConsulEmpleEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(5000);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string ConsulJefe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Consultar Por Jefe", file);
                                    Thread.Sleep(100);
                                    if (ConsulJefe != ConsulJefeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulJefeEsp + " y el encontrado es: " + ConsulJefe);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Consultar Por Empleado", file);
                                    Thread.Sleep(100);
                                    if (ConsulEmple != ConsulEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulEmpleEsp + " y el encontrado es: " + ConsulEmple);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCentroCosto')]", "Centro de Costo", file);
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteEmpleadosPorMetasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReporteEmpleadosPorMetasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ConsulDateEsp"].ToString().Length != 0 && rows["ConsulDateEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ConsulDateEsp = rows["COnsulDateEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulDate = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAno')]", "Consultar Por Año", file);
                                    Thread.Sleep(100);
                                    if (ConsulDate != ConsulDateEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulDateEsp + " y el encontrado es: " + ConsulDate);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar Por Identificación", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulName = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar Por Nombres", file);
                                    Thread.Sleep(100);
                                    if (ConsulName != ConsulNameEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar por Apellidos", file);
                                    Thread.Sleep(100);
                                    if (ConsulApe != ConsulApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApeEsp + " y el encontrado es: " + ConsulApe);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_InformesConsolidadosEmpresaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_InformesConsolidadosEmpresaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_AnalisisEvaluacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_AnalisisEvaluacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EvaluEsp"].ToString().Length != 0 && rows["EvaluEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EvaluEsp = rows["EvaluEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string Evalu = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Año Evaluación", file);
                                    Thread.Sleep(100);
                                    if (Evalu != EvaluEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EvaluEsp + " y el encontrado es: " + Evalu);
                                    }
                                    Thread.Sleep(100);


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RankingColaboradoresRHNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RankingColaboradoresRHNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["DescripEsp"].ToString().Length != 0 && rows["DescripEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string DescripEsp = rows["DescripEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string Descrip = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodAcup')]", "Descripción", file);
                                    Thread.Sleep(100);
                                    if (Descrip != DescripEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DescripEsp + " y el encontrado es: " + Descrip);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInic')]", "Fecha Inicial", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFecFina')]", "Fecha Final", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_HistoricoOrganigramaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_HistoricoOrganigramaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["LabelEsp"].ToString().Length != 0 && rows["LabelEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string LabelEsp = rows["LabelEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string Label = selenium.CamposEmergentes("//span[contains(@id,'ctl00_lblMenMarco')]", "Histórico", file);
                                    Thread.Sleep(100);
                                    if (Label != LabelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LabelEsp + " y el encontrado es: " + Label);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();
                                    //Thread.Sleep(800);
                                    //elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //if (elementList.Count > 0)
                                    //{
                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);

                                    //    foreach (IWebElement pageEle in elementList)
                                    //    {
                                    //        SendKeys.Send("{TAB}");
                                    //        selenium.Screenshot("TAB", true, file);

                                    //        Thread.Sleep(100);
                                    //    }
                                    //}

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_OrganigramaEmpresaPorDependenciaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_OrganigramaEmpresaPorDependenciaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ArbolEsp"].ToString().Length != 0 && rows["ArbolEsp"].ToString() != null &&
                                rows["DependenciaEsp"].ToString().Length != 0 && rows["DependenciaEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ArbolEsp = rows["ArbolEsp"].ToString();
                                string DependenciaEsp = rows["DependenciaEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string Arbol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Árbol", file);
                                    Thread.Sleep(100);
                                    if (Arbol != ArbolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ArbolEsp + " y el encontrado es: " + Arbol);
                                    }
                                    Thread.Sleep(100);

                                    string Dependencia = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Dependencia", file);
                                    Thread.Sleep(100);
                                    if (Dependencia != DependenciaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DependenciaEsp + " y el encontrado es: " + Dependencia);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_HistorialChatColaboradoresNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_HistorialChatColaboradoresNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string ConsulId = selenium.CamposEmergentes("//span[@id='ctl00_lblMenMarco']", "Detalle de las conversaciones de los colaboradores", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database); 


                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_AdicionDeUVTNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_AdicionDeUVTNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodInteEsp"].ToString().Length != 0 && rows["CodInteEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodInteEsp = rows["CodInteEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Número de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string CodInte = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]", "Código Interno", file);
                                    Thread.Sleep(100);
                                    if (CodInte != CodInteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInteEsp + " y el encontrado es: " + CodInte);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");

                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SolicitudPermaneneciaFueraHorarioNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SolicitudPermaneneciaFueraHorarioNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["MotivoEsp"].ToString().Length != 0 && rows["MotivoEsp"].ToString() != null &&
                                rows["HorasEsp"].ToString().Length != 0 && rows["HorasEsp"].ToString() != null &&
                                rows["MotivosEsp"].ToString().Length != 0 && rows["MotivosEsp"].ToString() != null &&
                                rows["JefeInEsp"].ToString().Length != 0 && rows["JefeInEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string MotivoEsp = rows["MotivoEsp"].ToString();
                                string HorasEsp = rows["HorasEsp"].ToString();
                                string MotivosEsp = rows["MotivosEsp"].ToString();
                                string JefeInEsp = rows["JefeInEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]", "Fecha Inicial", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string FechaFin = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]", "Fecha Final", file);
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    string Motivo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMotPerm')]", "Motivo", file);
                                    Thread.Sleep(100);
                                    if (Motivo != MotivoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotivoEsp + " y el encontrado es: " + Motivo);
                                    }
                                    Thread.Sleep(100);

                                    string Horas = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblHoras')]", "Horas", file);
                                    Thread.Sleep(100);
                                    if (Horas != HorasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HorasEsp + " y el encontrado es: " + Horas);
                                    }
                                    Thread.Sleep(100);

                                    string Motivos = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtDesMoti_lblTexto')]", "Detalles del Motvo", file);
                                    Thread.Sleep(100);
                                    if (Motivos != MotivosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotivosEsp + " y el encontrado es: " + Motivos);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 8; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }

                                    string JefeIn = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodJefe')]", "Jefe Inmediato", file);
                                    Thread.Sleep(100);
                                    if (JefeIn != JefeInEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JefeInEsp + " y el encontrado es: " + JefeIn);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 8; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));


                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        SendKeys.Send("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SolicitudDeCertificacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SolicitudDeCertificacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["TipoSolEsp"].ToString().Length != 0 && rows["TipoSolEsp"].ToString() != null &&
                                rows["MotiSolEsp"].ToString().Length != 0 && rows["MotiSolEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string TipoSolEsp = rows["TipoSolEsp"].ToString();
                                string MotiSolEsp = rows["MotiSolEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string FechaSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecSoli_lblFecha')]", "Fecha de Solicitud", file);
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    string TipoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]", "Tipo de Solicitud", file);
                                    Thread.Sleep(100);
                                    if (TipoSol != TipoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoSolEsp + " y el encontrado es: " + TipoSol);
                                    }
                                    Thread.Sleep(100);

                                    string MotiSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtMotSoli_lblTexto')]", "Motivo de la Solicitud", file);
                                    Thread.Sleep(100);
                                    if (MotiSol != MotiSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotiSolEsp + " y el encontrado es: " + MotiSol);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));


                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        SendKeys.Send("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SimuladorNominaRetefuenteNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SimuladorNominaRetefuenteNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ReteFuenteEsp"].ToString().Length != 0 && rows["ReteFuenteEsp"].ToString() != null &&
                                rows["ProReteEsp"].ToString().Length != 0 && rows["ProReteEsp"].ToString() != null &&
                                rows["DecIngreEsp"].ToString().Length != 0 && rows["DecIngreEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ReteFuenteEsp = rows["ReteFuenteEsp"].ToString();
                                string ProReteEsp = rows["ProReteEsp"].ToString();
                                string DecIngreEsp = rows["DecIngreEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string ReteFuente = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi')]", "Simulador Retención en la Fuente", file);
                                    Thread.Sleep(100);
                                    if (ReteFuente != ReteFuenteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ReteFuenteEsp + " y el encontrado es: " + ReteFuente);
                                    }
                                    Thread.Sleep(100);

                                    string ProRete = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipVinc')]", "Procedimiento de Retención", file);
                                    Thread.Sleep(100);
                                    if (ProRete != ProReteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ProReteEsp + " y el encontrado es: " + ProRete);
                                    }
                                    Thread.Sleep(100);

                                    string DecIngre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipEmpl')]", "Declarante por Ingresos", file);
                                    Thread.Sleep(100);
                                    if (DecIngre != DecIngreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DecIngreEsp + " y el encontrado es: " + DecIngre);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_IngresoSimuladorDeNominaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_IngresoSimuladorDeNominaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IngresoEsp"].ToString().Length != 0 && rows["IngresoEsp"].ToString() != null &&
                                rows["SimuNomEsp"].ToString().Length != 0 && rows["SimuNomEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IngresoEsp = rows["IngresoEsp"].ToString();
                                string SimuNomEsp = rows["SimuNomEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string Ingreso = selenium.CamposEmergentes("//span[contains(@id,'ctl00_lblMenMarco')]", "Subtitulo", file);
                                    Thread.Sleep(100);
                                    if (Ingreso != IngresoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IngresoEsp + " y el encontrado es: " + Ingreso);
                                    }
                                    Thread.Sleep(100);

                                    string SimuNom = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi')]", "Simulador de Nomina", file);
                                    Thread.Sleep(100);
                                    if (SimuNom != SimuNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SimuNomEsp + " y el encontrado es: " + SimuNom);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    ////SIN BOTON DE GUARDAR

                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();
                                    //Thread.Sleep(800);
                                    //elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //if (elementList.Count > 0)
                                    //{
                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);

                                    //    foreach (IWebElement pageEle in elementList)
                                    //    {
                                    //        SendKeys.Send("{TAB}");
                                    //        selenium.Screenshot("TAB", true, file);

                                    //        Thread.Sleep(100);
                                    //    }
                                    //}

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SimuladorIndemnizacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SimuladorIndemnizacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                // rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodInteEsp"].ToString().Length != 0 && rows["CodInteEsp"].ToString() != null &&
                                rows["FechaRetEsp"].ToString().Length != 0 && rows["FechaRetEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&
                                rows["ConsultaEsp"].ToString().Length != 0 && rows["ConsultaEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                // string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodInteEsp = rows["CodInteEsp"].ToString();
                                string FechaRetEsp = rows["FechaRetEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();
                                string ConsultaEsp = rows["ConsultaEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);


                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string CodInte = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]", "Codigo Interno", file);
                                    Thread.Sleep(100);
                                    if (CodInte != CodInteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInteEsp + " y el encontrado es: " + CodInte);
                                    }
                                    Thread.Sleep(100);

                                    string FechaRet = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecCort_lblFecha')]", "Fecha Retiro", file);
                                    Thread.Sleep(100);
                                    if (FechaRet != FechaRetEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRetEsp + " y el encontrado es: " + FechaRet);
                                    }
                                    Thread.Sleep(100);

                                    string FechaSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecSoli_lblFecha')]", "Fecha Solicitud", file);
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar por Identificación", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulName = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]", "Consultar por Nombres", file);
                                    Thread.Sleep(100);
                                    if (ConsulName != ConsulNameEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]", "Consultar por Apellidos", file);
                                    Thread.Sleep(100);
                                    if (ConsulApe != ConsulApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApeEsp + " y el encontrado es: " + ConsulApe);
                                    }
                                    Thread.Sleep(100);




                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RelacionEmpleadosDepartamentosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RelacionEmpleadosDepartamentosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["SuperviEsp"].ToString().Length != 0 && rows["SuperviEsp"].ToString() != null &&
                                rows["EmpCargoEsp"].ToString().Length != 0 && rows["EmpCargoEsp"].ToString() != null &&
                                rows["MinEmplEsp"].ToString().Length != 0 && rows["MinEmplEsp"].ToString() != null &&
                                rows["MaxEmplEsp"].ToString().Length != 0 && rows["MaxEmplEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["EmplAsigEsp"].ToString().Length != 0 && rows["EmplAsigEsp"].ToString() != null &&
                                rows["ConsulId2Esp"].ToString().Length != 0 && rows["ConsulId2Esp"].ToString() != null &&
                                rows["EmplNoAsigEsp"].ToString().Length != 0 && rows["EmplNoAsigEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();
                                string SuperviEsp = rows["SuperviEsp"].ToString();
                                string EmpCargoEsp = rows["EmpCargoEsp"].ToString();
                                string MinEmplEsp = rows["MinEmplEsp"].ToString();
                                string MaxEmplEsp = rows["MaxEmplEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string EmplAsigEsp = rows["EmplAsigEsp"].ToString();
                                string ConsulId2Esp = rows["ConsulId2Esp"].ToString();
                                string EmplNoAsigEsp = rows["EmplNoAsigEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(200);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    string Nivel = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]", "Nivel", file);
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    string Supervi = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblFuncionario')]", "Supervisor", file);
                                    Thread.Sleep(100);
                                    if (Supervi != SuperviEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SuperviEsp + " y el encontrado es: " + Supervi);
                                    }
                                    Thread.Sleep(100);

                                    string EmpCargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEmpCargo')]", "Empleados a Cargo", file);
                                    Thread.Sleep(100);
                                    if (EmpCargo != EmpCargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpCargoEsp + " y el encontrado es: " + EmpCargo);
                                    }
                                    Thread.Sleep(100);

                                    string MinEmpl = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMinEmp')]", "Mínimo Empleados", file);
                                    Thread.Sleep(100);
                                    if (MinEmpl != MinEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MinEmplEsp + " y el encontrado es: " + MinEmpl);
                                    }
                                    Thread.Sleep(100);

                                    string MaxEmpl = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblMaxEmp')]", "Máximo Empleados", file);
                                    Thread.Sleep(100);
                                    if (MaxEmpl != MaxEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MaxEmplEsp + " y el encontrado es: " + MaxEmpl);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulId = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]", "Consultar por Identificación", file);
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    string EmplAsig = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Empleados Asignados a Departamentos", file);
                                    Thread.Sleep(100);
                                    if (EmplAsig != EmplAsigEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmplAsigEsp + " y el encontrado es: " + EmplAsig);
                                    }
                                    Thread.Sleep(100);

                                    string ConsulId2 = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblConsult')]", "Consultar por Identificación", file);
                                    Thread.Sleep(100);
                                    if (ConsulId2 != ConsulId2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulId2Esp + " y el encontrado es: " + ConsulId2);
                                    }
                                    Thread.Sleep(100);

                                    string EmplNoAsig = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEmpNoRel')]", "Empleados no Asignados a Departamentos", file);
                                    Thread.Sleep(100);
                                    if (EmplNoAsig != EmplNoAsigEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmplNoAsigEsp + " y el encontrado es: " + EmplNoAsig);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ResumenDeSolicitudNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ResumenDeSolicitudNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumSolEsp"].ToString().Length != 0 && rows["NumSolEsp"].ToString() != null &&
                                rows["EstActEsp"].ToString().Length != 0 && rows["EstActEsp"].ToString() != null &&
                                rows["PerActEsp"].ToString().Length != 0 && rows["PerActEsp"].ToString() != null &&
                                rows["FechaActEsp"].ToString().Length != 0 && rows["FechaActEsp"].ToString() != null &&
                                rows["NomSolEsp"].ToString().Length != 0 && rows["NomSolEsp"].ToString() != null &&
                                rows["IdSolEsp"].ToString().Length != 0 && rows["IdSolEsp"].ToString() != null &&
                                rows["CargoSolEsp"].ToString().Length != 0 && rows["CargoSolEsp"].ToString() != null &&
                                rows["ParaEsp"].ToString().Length != 0 && rows["ParaEsp"].ToString() != null &&
                                rows["CopiaEsp"].ToString().Length != 0 && rows["CopiaEsp"].ToString() != null &&
                                rows["AsuntoEsp"].ToString().Length != 0 && rows["AsuntoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NumSolEsp = rows["NumSolEsp"].ToString();
                                string EstActEsp = rows["EstActEsp"].ToString();
                                string PerActEsp = rows["PerActEsp"].ToString();
                                string FechaActEsp = rows["FechaActEsp"].ToString();
                                string NomSolEsp = rows["NomSolEsp"].ToString();
                                string IdSolEsp = rows["IdSolEsp"].ToString();
                                string CargoSolEsp = rows["CargoSolEsp"].ToString();
                                string ParaEsp = rows["ParaEsp"].ToString();
                                string CopiaEsp = rows["CopiaEsp"].ToString();
                                string AsuntoEsp = rows["AsuntoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(200);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string NumSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]", "Número de Solicitud", file);
                                    Thread.Sleep(100);
                                    if (NumSol != NumSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumSolEsp + " y el encontrado es: " + NumSol);
                                    }
                                    Thread.Sleep(100);

                                    string EstAct = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]", "Estado Actualizado", file);
                                    Thread.Sleep(100);
                                    if (EstAct != EstActEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstActEsp + " y el encontrado es: " + EstAct);
                                    }
                                    Thread.Sleep(100);

                                    string PerAct = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]", "Persona que Actualiza", file);
                                    Thread.Sleep(100);
                                    if (PerAct != PerActEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerActEsp + " y el encontrado es: " + PerAct);
                                    }
                                    Thread.Sleep(100);

                                    string FechaAct = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]", "Fecha de Actualización", file);
                                    Thread.Sleep(100);
                                    if (FechaAct != FechaActEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaActEsp + " y el encontrado es: " + FechaAct);
                                    }
                                    Thread.Sleep(100);

                                    string NomSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]", "Nombre Solicitante", file);
                                    Thread.Sleep(100);
                                    if (NomSol != NomSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomSolEsp + " y el encontrado es: " + NomSol);
                                    }
                                    Thread.Sleep(100);

                                    string IdSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]", "Identificación del Solicitante", file);
                                    Thread.Sleep(100);
                                    if (IdSol != IdSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdSolEsp + " y el encontrado es: " + IdSol);
                                    }
                                    Thread.Sleep(100);

                                    string CargoSol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label7')]", "Cargo del Solicitante", file);
                                    Thread.Sleep(100);
                                    if (CargoSol != CargoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoSolEsp + " y el encontrado es: " + CargoSol);
                                    }
                                    Thread.Sleep(100);


                                    string Para = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label9')]", "Destinatario", file);
                                    Thread.Sleep(100);
                                    if (Para != ParaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParaEsp + " y el encontrado es: " + Para);
                                    }
                                    Thread.Sleep(100);

                                    string Copia = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label10')]", "Con Copia", file);
                                    Thread.Sleep(100);
                                    if (Copia != CopiaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CopiaEsp + " y el encontrado es: " + Copia);
                                    }
                                    Thread.Sleep(100);

                                    string Asunto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_Label11')]", "Asunto", file);
                                    Thread.Sleep(100);
                                    if (Asunto != AsuntoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AsuntoEsp + " y el encontrado es: " + Asunto);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[3].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisSolicitudesDeVacacionesEnDineroNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisSolicitudesDeVacacionesEnDineroNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["DiasTomarEsp"].ToString().Length != 0 && rows["DiasTomarEsp"].ToString() != null &&
                                rows["FechaDesdeEsp"].ToString().Length != 0 && rows["FechaDesdeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["FechaRegEsp"].ToString().Length != 0 && rows["FechaRegEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string DiasTomarEsp = rows["DiasTomarEsp"].ToString();
                                string FechaDesdeEsp = rows["FechaDesdeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string FechaRegEsp = rows["FechaRegEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string DiasTomar = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaToma')]", "Dias a Tomar en Dinero", file);
                                    Thread.Sleep(100);
                                    if (DiasTomar != DiasTomarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasTomarEsp + " y el encontrado es: " + DiasTomar);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDesde = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis1_lblFecha')]", "Fecha Desde", file);
                                    Thread.Sleep(100);
                                    if (FechaDesde != FechaDesdeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDesdeEsp + " y el encontrado es: " + FechaDesde);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis2_lblFecha')]", "Fecha Hasta", file);
                                    Thread.Sleep(100);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string FechaReg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecRegr_lblFecha')]", "Fecha Regreso", file);
                                    Thread.Sleep(100);
                                    if (FechaReg != FechaRegEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRegEsp + " y el encontrado es: " + FechaReg);
                                    }
                                    Thread.Sleep(100);



                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisSolicitudesDeVacacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisSolicitudesDeVacacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["DiasTomarEsp"].ToString().Length != 0 && rows["DiasTomarEsp"].ToString() != null &&
                                rows["FechaDesdeEsp"].ToString().Length != 0 && rows["FechaDesdeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["FechaRegEsp"].ToString().Length != 0 && rows["FechaRegEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string DiasTomarEsp = rows["DiasTomarEsp"].ToString();
                                string FechaDesdeEsp = rows["FechaDesdeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string FechaRegEsp = rows["FechaRegEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(200);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string DiasTomar = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDiaToma')]", "Dias a Tomar", file);
                                    Thread.Sleep(100);
                                    if (DiasTomar != DiasTomarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasTomarEsp + " y el encontrado es: " + DiasTomar);
                                    }
                                    Thread.Sleep(100);

                                    string FechaDesde = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis1_lblFecha')]", "Fecha Desde", file);
                                    Thread.Sleep(100);
                                    if (FechaDesde != FechaDesdeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDesdeEsp + " y el encontrado es: " + FechaDesde);
                                    }
                                    Thread.Sleep(100);

                                    string FechaHasta = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecDis2_lblFecha')]", "Fecha Hasta", file);
                                    Thread.Sleep(100);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    string FechaReg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecRegr_lblFecha')]", "Fecha Regreso", file);
                                    Thread.Sleep(100);
                                    if (FechaReg != FechaRegEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRegEsp + " y el encontrado es: " + FechaReg);
                                    }
                                    Thread.Sleep(100);

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]", "Observaciones de la Solicitud", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SolicitudDeCompensatorioNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SolicitudDeCompensatorioNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["NomcargEsp"].ToString().Length != 0 && rows["NomcargEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["CantDiasEsp"].ToString().Length != 0 && rows["CantDiasEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string NomcargEsp = rows["NomcargEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string CantDiasEsp = rows["CantDiasEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string Nomcarg = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCarg')]", "Cargo", file);
                                    Thread.Sleep(100);
                                    if (Nomcarg != NomcargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomcargEsp + " y el encontrado es: " + Nomcarg);
                                    }
                                    Thread.Sleep(100);

                                    string FechaIni = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]", "Fecha Inicial de Disfrute", file);
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    string CantDias = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumDias')]", "Cantidad de Días", file);
                                    Thread.Sleep(100);
                                    if (CantDias != CantDiasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantDiasEsp + " y el encontrado es: " + CantDias);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));


                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        String id = pageEle.GetAttribute("id");
                                                        if (id == "ctl00_ContenidoPagina_KCtrlFecExpe_txtFecha" || id == "ctl00_ContenidoPagina_KCtrlFecNaci_txtFecha" || id == "ctl00_ContenidoPagina_txtDirResi" || id == "ctl00_ContenidoPagina_KCtrlFecGrad_txtFecha ")
                                                        {
                                                            //errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + id + " no debe permitir la opcion de tabular");
                                                        }

                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        SendKeys.Send("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisSolicitudesPazySalvosFLujoAprobacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisSolicitudesPazySalvosFLujoAprobacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["DependEsp"].ToString().Length != 0 && rows["DependEsp"].ToString() != null &&
                                rows["ArbolEsp"].ToString().Length != 0 && rows["ArbolEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["CentroCostEsp"].ToString().Length != 0 && rows["CentroCostEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string DependEsp = rows["DependEsp"].ToString();
                                string ArbolEsp = rows["ArbolEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string CentroCostEsp = rows["CentroCostEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string Depend = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblDependencia')]", "Dependencia", file);
                                    Thread.Sleep(100);
                                    if (Depend != DependEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DependEsp + " y el encontrado es: " + Depend);
                                    }
                                    Thread.Sleep(100);

                                    string Arbol = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblArbol')]", "Árbol", file);
                                    Thread.Sleep(100);
                                    if (Arbol != ArbolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ArbolEsp + " y el encontrado es: " + Arbol);
                                    }
                                    Thread.Sleep(100);

                                    string Cargo = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]", "Cargo", file);
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    string CentroCost = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]", "Centro de Costo", file);
                                    Thread.Sleep(100);
                                    if (CentroCost != CentroCostEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostEsp + " y el encontrado es: " + CentroCost);
                                    }
                                    Thread.Sleep(100);

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_txtObsErvaSoli_lblTexto')]", "Observaciones", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_FrmnmoptrolNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_FrmnmoptrolNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();



                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmpre = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]", "Empresa", file);
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);



                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_NovedadesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_NovedadesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["IdentifEsp"].ToString().Length != 0 && rows["IdentifEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["TipoNovEsp"].ToString().Length != 0 && rows["TipoNovEsp"].ToString() != null &&
                                rows["FechaNovEsp"].ToString().Length != 0 && rows["FechaNovEsp"].ToString() != null &&
                                rows["SoporteEsp"].ToString().Length != 0 && rows["SoporteEsp"].ToString() != null &&
                                rows["TipoDocEsp"].ToString().Length != 0 && rows["TipoDocEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string IdentifEsp = rows["IdentifEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string TipoNovEsp = rows["TipoNovEsp"].ToString();
                                string FechaNovEsp = rows["FechaNovEsp"].ToString();
                                string SoporteEsp = rows["SoporteEsp"].ToString();
                                string TipoDocEsp = rows["TipoDocEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string Identif = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCedula')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (Identif != IdentifEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentifEsp + " y el encontrado es: " + Identif);
                                    }
                                    Thread.Sleep(100);

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCOD_EMPL')]", "Código Empleado", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNombre')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNRO_CONT')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string TipoNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipoNovedad')]", "Tipo de Novedad", file);
                                    Thread.Sleep(100);
                                    if (TipoNov != TipoNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoNovEsp + " y el encontrado es: " + TipoNov);
                                    }
                                    Thread.Sleep(100);

                                    string FechaNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecini_lblFecha')]", "Fecha Novedad", file);
                                    Thread.Sleep(100);
                                    if (FechaNov != FechaNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNovEsp + " y el encontrado es: " + FechaNov);
                                    }
                                    Thread.Sleep(100);

                                    string Soporte = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjunto')]", "Soportes Evidencias", file);
                                    Thread.Sleep(100);
                                    if (Soporte != SoporteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SoporteEsp + " y el encontrado es: " + Soporte);
                                    }
                                    Thread.Sleep(100);

                                    string TipoDoc = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_lblTIP_DOCU')]", "TIpo Documento", file);
                                    Thread.Sleep(100);
                                    if (TipoDoc != TipoDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocEsp + " y el encontrado es: " + TipoDoc);
                                    }
                                    Thread.Sleep(100);

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtValM1_lblTexto')]", "Observaciones de la Novedad", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisNovedadesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisNovedadesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["ConsecuEsp"].ToString().Length != 0 && rows["ConsecuEsp"].ToString() != null &&
                                rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["SecuencialEsp"].ToString().Length != 0 && rows["SecuencialEsp"].ToString() != null &&
                                rows["TipoNovEsp"].ToString().Length != 0 && rows["TipoNovEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&
                                rows["ValCuotaEsp"].ToString().Length != 0 && rows["ValCuotaEsp"].ToString() != null &&
                                rows["NumCuotaEsp"].ToString().Length != 0 && rows["NumCuotaEsp"].ToString() != null &&
                                rows["ValTotalEsp"].ToString().Length != 0 && rows["ValTotalEsp"].ToString() != null &&
                                rows["SalNovEsp"].ToString().Length != 0 && rows["SalNovEsp"].ToString() != null &&
                                rows["EstaNovEsp"].ToString().Length != 0 && rows["EstaNovEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string ConsecuEsp = rows["ConsecuEsp"].ToString();
                                string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string SecuencialEsp = rows["SecuencialEsp"].ToString();
                                string TipoNovEsp = rows["TipoNovEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();
                                string ValCuotaEsp = rows["ValCuotaEsp"].ToString();
                                string NumCuotaEsp = rows["NumCuotaEsp"].ToString();
                                string ValTotalEsp = rows["ValTotalEsp"].ToString();
                                string SalNovEsp = rows["SalNovEsp"].ToString();
                                string EstaNovEsp = rows["EstaNovEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    string CodEmple = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]", "Identificación", file);
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    string NomApe = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]", "Nombres y Apellidos", file);
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    string NumCont = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]", "Numero de Contrato", file);
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    string Consecu = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtNove')]", "Consecutivo", file);
                                    Thread.Sleep(100);
                                    if (Consecu != ConsecuEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsecuEsp + " y el encontrado es: " + Consecu);
                                    }
                                    Thread.Sleep(100);

                                    string Concepto = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCodConc')]", "Concepto", file);
                                    Thread.Sleep(100);
                                    if (Concepto != ConceptoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConceptoEsp + " y el encontrado es: " + Concepto);
                                    }
                                    Thread.Sleep(100);

                                    string Secuencial = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSecConc')]", "Secuencial", file);
                                    Thread.Sleep(100);
                                    if (Secuencial != SecuencialEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SecuencialEsp + " y el encontrado es: " + Secuencial);
                                    }
                                    Thread.Sleep(100);

                                    string TipoNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNove')]", "Tipo de Novedad", file);
                                    Thread.Sleep(100);
                                    if (TipoNov != TipoNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoNovEsp + " y el encontrado es: " + TipoNov);
                                    }
                                    Thread.Sleep(100);

                                    string Cantidad = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblCanNove')]", "Cantidad", file);
                                    Thread.Sleep(100);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);

                                    string ValCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValCuot')]", "Valor Cuota", file);
                                    Thread.Sleep(100);
                                    if (ValCuota != ValCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValCuotaEsp + " y el encontrado es: " + ValCuota);
                                    }
                                    Thread.Sleep(100);

                                    string NumCuota = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCuot')]", "Numero de Cuotas", file);
                                    Thread.Sleep(100);
                                    if (NumCuota != NumCuotaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumCuotaEsp + " y el encontrado es: " + NumCuota);
                                    }
                                    Thread.Sleep(100);

                                    string ValTotal = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblValTota')]", "Valor Total", file);
                                    Thread.Sleep(100);
                                    if (ValTotal != ValTotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValTotalEsp + " y el encontrado es: " + ValTotal);
                                    }
                                    Thread.Sleep(100);

                                    string SalNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblSalNove')]", "Saldo Novedad", file);
                                    Thread.Sleep(100);
                                    if (SalNov != SalNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalNovEsp + " y el encontrado es: " + SalNov);
                                    }
                                    Thread.Sleep(100);

                                    string EstaNov = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblEstNove')]", "Estado Novedad", file);
                                    Thread.Sleep(100);
                                    if (EstaNov != EstaNovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstaNovEsp + " y el encontrado es: " + EstaNov);
                                    }
                                    Thread.Sleep(100);

                                    string Observ = selenium.CamposEmergentes("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]", "Observaciones", file);
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //SIN BOTON DE GUARDAR

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SimuladorDeNominaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SimuladorDeNominaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["ValInEsp"].ToString().Length != 0 && rows["ValInEsp"].ToString() != null &&
                                rows["DiasEsp"].ToString().Length != 0 && rows["DiasEsp"].ToString() != null &&
                                rows["ValorEsp"].ToString().Length != 0 && rows["ValorEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string ValInEsp = rows["ValInEsp"].ToString();
                                string DiasEsp = rows["DiasEsp"].ToString();
                                string ValorEsp = rows["ValorEsp"].ToString();



                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi0')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valores de Entrada", true, file);

                                    Thread.Sleep(100);
                                    string ValIn = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi0')]");
                                    Thread.Sleep(100);
                                    if (ValIn != ValInEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValInEsp + " y el encontrado es: " + ValIn);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Días", true, file);

                                    Thread.Sleep(100);
                                    string Dias = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi1')]");
                                    Thread.Sleep(100);
                                    if (Dias != DiasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DiasEsp + " y el encontrado es: " + Dias);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor", true, file);

                                    Thread.Sleep(100);
                                    string Valor = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSimNomi2')]");
                                    Thread.Sleep(100);
                                    if (Valor != ValorEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValorEsp + " y el encontrado es: " + Valor);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    int cont = 0;
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            if (cont == 5)
                                            {
                                                for (int i = 1; i <= 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                    Thread.Sleep(100);
                                                }
                                            }

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramacionDeRecuperarNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramacionDeRecuperarNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["TimeCompEsp"].ToString().Length != 0 && rows["TimeCompEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string TimeCompEsp = rows["TimeCompEsp"].ToString();



                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tiempo por Compensar", true, file);

                                    Thread.Sleep(100);
                                    string TimeComp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(100);
                                    if (TimeComp != TimeCompEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeCompEsp + " y el encontrado es: " + TimeComp);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    int cont = 0;
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            if (cont == 5)
                                            {
                                                for (int i = 1; i <= 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                    Thread.Sleep(100);
                                                }
                                            }

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramarRecuperacionDeHrsNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramarRecuperacionDeHrsNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    int cont = 0;
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            if (cont == 5)
                                            {
                                                for (int i = 1; i <= 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                    Thread.Sleep(100);
                                                }
                                            }

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramacionDeCompensacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramacionDeCompensacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["TimeCompEsp"].ToString().Length != 0 && rows["TimeCompEsp"].ToString() != null &&
                                rows["TotalEsp"].ToString().Length != 0 && rows["TotalEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string TimeCompEsp = rows["TimeCompEsp"].ToString();
                                string TotalEsp = rows["TotalEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tiempo por Compensar", true, file);

                                    Thread.Sleep(100);
                                    string TimeComp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTiePend')]");
                                    Thread.Sleep(100);
                                    if (TimeComp != TimeCompEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TimeCompEsp + " y el encontrado es: " + TimeComp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTotal')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Total", true, file);

                                    Thread.Sleep(100);
                                    string Total = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTotal')]");
                                    Thread.Sleep(100);
                                    if (Total != TotalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TotalEsp + " y el encontrado es: " + Total);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    int cont = 0;
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            if (cont == 5)
                                            {
                                                for (int i = 1; i <= 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                    Thread.Sleep(100);
                                                }
                                            }

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_PermanenciasFueraDeHorarioPendientesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_PermanenciasFueraDeHorarioPendientesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    int cont = 0;
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            if (cont == 5)
                                            {
                                                for (int i = 1; i <= 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                    Thread.Sleep(100);
                                                }
                                            }

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteMarcacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReporteMarcacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["NumCarnEsp"].ToString().Length != 0 && rows["NumCarnEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["TipoMovEsp"].ToString().Length != 0 && rows["TipoMovEsp"].ToString() != null &&
                                rows["FechaRelEsp"].ToString().Length != 0 && rows["FechaRelEsp"].ToString() != null &&
                                rows["HoraRelEsp"].ToString().Length != 0 && rows["HoraRelEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string NumCarnEsp = rows["NumCarnEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string TipoMovEsp = rows["TipoMovEsp"].ToString();
                                string FechaRelEsp = rows["FechaRelEsp"].ToString();
                                string HoraRelEsp = rows["HoraRelEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);


                                    for (int i = 0; i <= 10; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(200);
                                    }

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCarn')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero Carnet", true, file);

                                    Thread.Sleep(100);
                                    string NumCarn = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCarn')]");
                                    Thread.Sleep(100);
                                    if (NumCarn != NumCarnEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumCarnEsp + " y el encontrado es: " + NumCarn);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipMovi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("TIpo de Movimiento", true, file);

                                    Thread.Sleep(100);
                                    string TipoMov = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipMovi')]");
                                    Thread.Sleep(100);
                                    if (TipoMov != TipoMovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoMovEsp + " y el encontrado es: " + TipoMov);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecRelo_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Reloj", true, file);

                                    Thread.Sleep(100);
                                    string FechaRel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecRelo_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaRel != FechaRelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaRelEsp + " y el encontrado es: " + FechaRel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlHoraReloj_lblHora')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Hora de Reloj", true, file);

                                    Thread.Sleep(100);
                                    string HoraRel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlHoraReloj_lblHora')]");
                                    Thread.Sleep(100);
                                    if (HoraRel != HoraRelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraRelEsp + " y el encontrado es: " + HoraRel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observ = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 25; i++) SendKeys.Send("{UP}");
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SolicitudDePermisosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SolicitudDePermisosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["HoraIniEsp"].ToString().Length != 0 && rows["HoraIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["HoraFinEsp"].ToString().Length != 0 && rows["HoraFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string HoraIniEsp = rows["HoraIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string HoraFinEsp = rows["HoraFinEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");
                                    //Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecIni')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecIni')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblHorIni')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Hora Inicial", true, file);

                                    Thread.Sleep(100);
                                    string HoraIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblHorIni')]");
                                    Thread.Sleep(100);
                                    if (HoraIni != HoraIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraIniEsp + " y el encontrado es: " + HoraIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecFin')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Fin", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecFin')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblHorFin')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Hora Fin", true, file);

                                    Thread.Sleep(100);
                                    string HoraFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblHorFin')]");
                                    Thread.Sleep(100);
                                    if (HoraFin != HoraFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HoraFinEsp + " y el encontrado es: " + HoraFin);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_CambioProcedimientoRetencionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_CambioProcedimientoRetencionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["ProActEsp"].ToString().Length != 0 && rows["ProActEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string ProActEsp = rows["ProActEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipRefe')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Procedimiento Actual", true, file);

                                    Thread.Sleep(100);
                                    string ProAct = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipRefe')]");
                                    Thread.Sleep(100);
                                    if (ProAct != ProActEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ProActEsp + " y el encontrado es: " + ProAct);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MiRetiroDeCesantiasLey50NTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MiRetiroDeCesantiasLey50NTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisSolicitudesDeCesantiasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisSolicitudesDeCesantiasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["MotiSolEsp"].ToString().Length != 0 && rows["MotiSolEsp"].ToString() != null &&
                                rows["TipoSolEsp"].ToString().Length != 0 && rows["TipoSolEsp"].ToString() != null &&
                                rows["FechaAplEsp"].ToString().Length != 0 && rows["FechaAplEsp"].ToString() != null &&
                                rows["ValSolEsp"].ToString().Length != 0 && rows["ValSolEsp"].ToString() != null &&
                                rows["MatInmoEsp"].ToString().Length != 0 && rows["MatInmoEsp"].ToString() != null &&
                                rows["SalCesEsp"].ToString().Length != 0 && rows["SalCesEsp"].ToString() != null &&
                                rows["FechaConEsp"].ToString().Length != 0 && rows["FechaConEsp"].ToString() != null &&
                                rows["RequiEsp"].ToString().Length != 0 && rows["RequiEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string MotiSolEsp = rows["MotiSolEsp"].ToString();
                                string TipoSolEsp = rows["TipoSolEsp"].ToString();
                                string FechaAplEsp = rows["FechaAplEsp"].ToString();
                                string ValSolEsp = rows["ValSolEsp"].ToString();
                                string MatInmoEsp = rows["MatInmoEsp"].ToString();
                                string SalCesEsp = rows["SalCesEsp"].ToString();
                                string FechaConEsp = rows["FechaConEsp"].ToString();
                                string RequiEsp = rows["RequiEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //ACCEDER A LIDER
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    selenium.Screenshot("Rol Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string CodCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string MotiSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(100);
                                    if (MotiSol != MotiSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MotiSolEsp + " y el encontrado es: " + MotiSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("TIpo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string TipoSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipSoli')]");
                                    Thread.Sleep(100);
                                    if (TipoSol != TipoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoSolEsp + " y el encontrado es: " + TipoSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecLiqu_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Aplicacion", true, file);

                                    Thread.Sleep(100);
                                    string FechaApl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecLiqu_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaApl != FechaAplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaAplEsp + " y el encontrado es: " + FechaApl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Solicitado", true, file);

                                    Thread.Sleep(100);
                                    string ValSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValCesp')]");
                                    Thread.Sleep(100);
                                    if (ValSol != ValSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValSolEsp + " y el encontrado es: " + ValSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDirResi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Matricula Inmobiliaria del Inmueble", true, file);

                                    Thread.Sleep(100);
                                    string MatInmo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDirResi')]");
                                    Thread.Sleep(100);
                                    if (MatInmo != MatInmoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MatInmoEsp + " y el encontrado es: " + MatInmo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSalSesa')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Saldo Cesntías", true, file);

                                    Thread.Sleep(100);
                                    string SalCes = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSalSesa')]");
                                    Thread.Sleep(100);
                                    if (SalCes != SalCesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SalCesEsp + " y el encontrado es: " + SalCes);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFEC_CONS_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Consolidado", true, file);

                                    Thread.Sleep(100);
                                    string FechaCon = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFEC_CONS_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaCon != FechaConEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaConEsp + " y el encontrado es: " + FechaCon);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 1; i <= 5; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(100);
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblRequisitos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Requisitos", true, file);

                                    Thread.Sleep(100);
                                    string Requi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblRequisitos')]");
                                    Thread.Sleep(100);
                                    if (Requi != RequiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RequiEsp + " y el encontrado es: " + Requi);
                                    }
                                    Thread.Sleep(100);


                                    for (int i = 1; i <= 5; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                        Thread.Sleep(100);
                                    }

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    int cont = 0;
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            cont++;
                                            if (cont == 5)
                                            {
                                                for (int i = 1; i <= 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                    Thread.Sleep(100);
                                                }
                                            }

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_CargueBeneficioViviendaCavipetrolNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_CargueBeneficioViviendaCavipetrolNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["TipoCredEsp"].ToString().Length != 0 && rows["TipoCredEsp"].ToString() != null &&
                                rows["NumCredEsp"].ToString().Length != 0 && rows["NumCredEsp"].ToString() != null &&
                                rows["TerminoEsp"].ToString().Length != 0 && rows["TerminoEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["ValCredEsp"].ToString().Length != 0 && rows["ValCredEsp"].ToString() != null &&
                                rows["FechaExpEsp"].ToString().Length != 0 && rows["FechaExpEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["ValIntEsp"].ToString().Length != 0 && rows["ValIntEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string TipoCredEsp = rows["TipoCredEsp"].ToString();
                                string NumCredEsp = rows["NumCredEsp"].ToString();
                                string TerminoEsp = rows["TerminoEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string ValCredEsp = rows["ValCredEsp"].ToString();
                                string FechaExpEsp = rows["FechaExpEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string ValIntEsp = rows["ValIntEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //ACCEDER A LIDER
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    selenium.Screenshot("Rol Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnSi')]");
                                        Thread.Sleep(5000);
                                        selenium.Click("//a[contains(@id,'btnCerrar')]");
                                        Thread.Sleep(5000);
                                    }
                                    else
                                    {
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnSi')]");
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Si_Acepto')]");
                                        Thread.Sleep(5000);
                                    }


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por identificacion", true, file);

                                    Thread.Sleep(100);
                                    string ConsulId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Apellido = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipCre')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Crédito", true, file);

                                    Thread.Sleep(100);
                                    string TipoCred = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipCre')]");
                                    Thread.Sleep(100);
                                    if (TipoCred != TipoCredEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoCredEsp + " y el encontrado es: " + TipoCred);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCre')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Crédito", true, file);

                                    Thread.Sleep(100);
                                    string NumCred = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCre')]");
                                    Thread.Sleep(100);
                                    if (NumCred != NumCredEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumCredEsp + " y el encontrado es: " + NumCred);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTerMino')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Término", true, file);

                                    Thread.Sleep(100);
                                    string Termino = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTerMino')]");
                                    Thread.Sleep(100);
                                    if (Termino != TerminoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TerminoEsp + " y el encontrado es: " + Termino);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInCc_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicio de Crédito", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInCc_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValCre')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor del Crédito", true, file);

                                    Thread.Sleep(100);
                                    string ValCred = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValCre')]");
                                    Thread.Sleep(100);
                                    if (ValCred != ValCredEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValCredEsp + " y el encontrado es: " + ValCred);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicio de Expedición", true, file);

                                    Thread.Sleep(100);
                                    string FechaExp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaExp != FechaExpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaExpEsp + " y el encontrado es: " + FechaExp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final de Espedición", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblValAnua')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor intereses Pagados", true, file);

                                    Thread.Sleep(100);
                                    string ValInt = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblValAnua')]");
                                    Thread.Sleep(100);
                                    if (ValInt != ValIntEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValIntEsp + " y el encontrado es: " + ValInt);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_SemaforoRequisicionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SemaforoRequisicionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["AvanProEsp"].ToString().Length != 0 && rows["AvanProEsp"].ToString() != null &&
                                rows["SolicitEsp"].ToString().Length != 0 && rows["SolicitEsp"].ToString() != null &&
                                rows["CargoSolEsp"].ToString().Length != 0 && rows["CargoSolEsp"].ToString() != null &&
                                rows["NomGrupEsp"].ToString().Length != 0 && rows["NomGrupEsp"].ToString() != null &&
                                rows["NumReqEsp"].ToString().Length != 0 && rows["NumReqEsp"].ToString() != null &&
                                rows["NomCargEsp"].ToString().Length != 0 && rows["NomCargEsp"].ToString() != null &&
                                rows["CentroCostEsp"].ToString().Length != 0 && rows["CentroCostEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string AvanProEsp = rows["AvanProEsp"].ToString();
                                string SolicitEsp = rows["SolicitEsp"].ToString();
                                string CargoSolEsp = rows["CargoSolEsp"].ToString();
                                string NomGrupEsp = rows["NomGrupEsp"].ToString();
                                string NumReqEsp = rows["NumReqEsp"].ToString();
                                string NomCargEsp = rows["NomCargEsp"].ToString();
                                string CentroCostEsp = rows["CentroCostEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Total Avance del Proceso", true, file);

                                    Thread.Sleep(100);
                                    string AvanPro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]");
                                    Thread.Sleep(100);
                                    if (AvanPro != AvanProEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AvanProEsp + " y el encontrado es: " + AvanPro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitante", true, file);

                                    Thread.Sleep(100);
                                    string Solicit = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(100);
                                    if (Solicit != SolicitEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SolicitEsp + " y el encontrado es: " + Solicit);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo del Solicitante", true, file);

                                    Thread.Sleep(100);
                                    string CargoSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label4')]");
                                    Thread.Sleep(100);
                                    if (CargoSol != CargoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoSolEsp + " y el encontrado es: " + CargoSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNombres')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre del Grupo", true, file);

                                    Thread.Sleep(100);
                                    string NomGrup = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNombres')]");
                                    Thread.Sleep(100);
                                    if (NomGrup != NomGrupEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomGrupEsp + " y el encontrado es: " + NomGrup);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApellidos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nro. Requisición", true, file);

                                    Thread.Sleep(100);
                                    string NumReq = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApellidos')]");
                                    Thread.Sleep(100);
                                    if (NumReq != NumReqEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumReqEsp + " y el encontrado es: " + NumReq);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre delCargo", true, file);

                                    Thread.Sleep(100);
                                    string NomCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (NomCarg != NomCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomCargEsp + " y el encontrado es: " + NomCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCost = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (CentroCost != CentroCostEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostEsp + " y el encontrado es: " + CentroCost);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RegistroDeProalimentacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RegistroDeProalimentacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // selenium.Click("//a[contains(.,'Cerrar')]");

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_AprobacionNovedadesTemporalesLiderNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_AprobacionNovedadesTemporalesLiderNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["IdentiEsp"].ToString().Length != 0 && rows["IdentiEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["VendorEsp"].ToString().Length != 0 && rows["VendorEsp"].ToString() != null &&
                                rows["LocacEsp"].ToString().Length != 0 && rows["LocacEsp"].ToString() != null &&
                                rows["MesEsp"].ToString().Length != 0 && rows["MesEsp"].ToString() != null &&
                                rows["QuinceEsp"].ToString().Length != 0 && rows["QuinceEsp"].ToString() != null &&
                                rows["CentroCostEsp"].ToString().Length != 0 && rows["CentroCostEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string IdentiEsp = rows["IdentiEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string VendorEsp = rows["VendorEsp"].ToString();
                                string LocacEsp = rows["LocacEsp"].ToString();
                                string MesEsp = rows["MesEsp"].ToString();
                                string QuinceEsp = rows["QuinceEsp"].ToString();
                                string CentroCostEsp = rows["CentroCostEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(5000);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string Identi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identi != IdentiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentiEsp + " y el encontrado es: " + Identi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblVendor')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vendor", true, file);

                                    Thread.Sleep(100);
                                    string Vendor = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblVendor')]");
                                    Thread.Sleep(100);
                                    if (Vendor != VendorEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VendorEsp + " y el encontrado es: " + Vendor);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblLocacion')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Locación", true, file);

                                    Thread.Sleep(100);
                                    string Locac = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblLocacion')]");
                                    Thread.Sleep(100);
                                    if (Locac != LocacEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LocacEsp + " y el encontrado es: " + Locac);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblMesNov')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mes", true, file);

                                    Thread.Sleep(100);
                                    string Mes = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblMesNov')]");
                                    Thread.Sleep(100);
                                    if (Mes != MesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MesEsp + " y el encontrado es: " + Mes);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblQuinNov')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Quincena", true, file);

                                    Thread.Sleep(100);
                                    string Quince = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblQuinNov')]");
                                    Thread.Sleep(100);
                                    if (Quince != QuinceEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + QuinceEsp + " y el encontrado es: " + Quince);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCost = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(100);
                                    if (CentroCost != CentroCostEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostEsp + " y el encontrado es: " + CentroCost);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_FlujoDeIncapacidadesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_FlujoDeIncapacidadesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                //rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    //SEGUNDA PAGINA
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // selenium.Click("//a[contains(.,'Cerrar')]");

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_NovedadesTemporalesLiderNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_NovedadesTemporalesLiderNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConceptoEsp"].ToString().Length != 0 && rows["ConceptoEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConceptoEsp = rows["ConceptoEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCons')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Concepto", true, file);

                                    Thread.Sleep(100);
                                    string Concepto = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCons')]");
                                    Thread.Sleep(100);
                                    if (Concepto != ConceptoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConceptoEsp + " y el encontrado es: " + ConceptoEsp);
                                    }
                                    Thread.Sleep(100);


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_PlanDeEstimulosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_PlanDeEstimulosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["CantDerEsp"].ToString().Length != 0 && rows["CantDerEsp"].ToString() != null &&
                                rows["CantTempEsp"].ToString().Length != 0 && rows["CantTempEsp"].ToString() != null &&
                                rows["CantDinEsp"].ToString().Length != 0 && rows["CantDinEsp"].ToString() != null &&
                                rows["FechaDisfEsp"].ToString().Length != 0 && rows["FechaDisfEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string CantDerEsp = rows["CantDerEsp"].ToString();
                                string CantTempEsp = rows["CantTempEsp"].ToString();
                                string CantDinEsp = rows["CantDinEsp"].ToString();
                                string FechaDisfEsp = rows["FechaDisfEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(10000);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de inicio", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Fin", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCanDere')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cantidad Derecho", true, file);

                                    Thread.Sleep(100);
                                    string CantDer = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCanDere')]");
                                    Thread.Sleep(100);
                                    if (CantDer != CantDerEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantDerEsp + " y el encontrado es: " + CantDer);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCanTiem')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cantidad de Tiempo", true, file);

                                    Thread.Sleep(100);
                                    string CantTemp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCanTiem')]");
                                    Thread.Sleep(100);
                                    if (CantTemp != CantTempEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantTempEsp + " y el encontrado es: " + CantTemp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCanDine')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cantidad de Dinero", true, file);

                                    Thread.Sleep(100);
                                    string CantDin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCanDine')]");
                                    Thread.Sleep(100);
                                    if (CantDin != CantDinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantDinEsp + " y el encontrado es: " + CantDin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_kcfFechaDisfrute_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Disfrute", true, file);

                                    Thread.Sleep(100);
                                    string FechaDisf = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_kcfFechaDisfrute_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaDisf != FechaDisfEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDisfEsp + " y el encontrado es: " + FechaDisf);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_FiscalizacionYCobranzaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_FiscalizacionYCobranzaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApeEsp"].ToString().Length != 0 && rows["ConsulApeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApeEsp = rows["ConsulApeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    //SEGUNDA PAGINA
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    //selenium.Click("//a[contains(.,'Cerrar')]");

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramarRecuperacionDehorasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramarRecuperacionDehorasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["IdentiEsp"].ToString().Length != 0 && rows["IdentiEsp"].ToString() != null &&
                                rows["NomApeEsp"].ToString().Length != 0 && rows["NomApeEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string IdentiEsp = rows["IdentiEsp"].ToString();
                                string NomApeEsp = rows["NomApeEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(.,'Cerrar')]");

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string Identi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identi != IdentiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentiEsp + " y el encontrado es: " + Identi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre y Apellido", true, file);

                                    Thread.Sleep(100);
                                    string NomApe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomApe != NomApeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApeEsp + " y el encontrado es: " + NomApe);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ProgramarCompensacionJefeNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProgramarCompensacionJefeNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApEsp"].ToString().Length != 0 && rows["ConsulApEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApEsp = rows["ConsulApEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar por Identificación", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsulId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsulId != ConsulIdEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    //}
                                    //Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar por Nombres", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsulName = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsulName != ConsulNameEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                    //}
                                    //Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar por Apellido", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsulAp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsulAp != ConsulApEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApEsp + " y el encontrado es: " + ConsulAp);
                                    //}
                                    //Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_AprobacionLegalizacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_AprobacionLegalizacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    Thread.Sleep(1000);
                                    //SEGUNDA PAGINA
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);



                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ValidacionDeMarcacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ValidacionDeMarcacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["EmpleadoEsp"].ToString().Length != 0 && rows["EmpleadoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string EmpleadoEsp = rows["EmpleadoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Fin", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltroEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empleado a Procesar", true, file);

                                    Thread.Sleep(100);
                                    string Empleado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltroEmpl')]");
                                    Thread.Sleep(100);
                                    if (Empleado != EmpleadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpleadoEsp + " y el encontrado es: " + Empleado);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RegistroHorasLiderNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RegistroHorasLiderNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmLINmCtrreNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_frmLINmCtrreNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpleEsp"].ToString().Length != 0 && rows["CodEmpleEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["CentCosEsp"].ToString().Length != 0 && rows["CentCosEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpleEsp = rows["CodEmpleEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string CentCosEsp = rows["CentCosEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                        Thread.Sleep(5000);
                                    }

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string CodEmple = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmple != CodEmpleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpleEsp + " y el encontrado es: " + CodEmple);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCentCost')]");
                                    Thread.Sleep(100);
                                    if (CentCos != CentCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentCosEsp + " y el encontrado es: " + CentCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Fin", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_CertificacionDeTiempoSuplementarioLaboradoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_CertificacionDeTiempoSuplementarioLaboradoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApEsp"].ToString().Length != 0 && rows["ConsulApEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApEsp = rows["ConsulApEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCed')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string ConsulId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCed')]");
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNom')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Nombre", true, file);

                                    Thread.Sleep(100);
                                    string ConsulName = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNom')]");
                                    Thread.Sleep(100);
                                    if (ConsulName != ConsulNameEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAp')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Apellido", true, file);

                                    Thread.Sleep(100);
                                    string ConsulAp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAp')]");
                                    Thread.Sleep(100);
                                    if (ConsulAp != ConsulApEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApEsp + " y el encontrado es: " + ConsulAp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaPago_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Pago", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaPago_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteCalificacionRolLiderNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReporteCalificacionRolLiderNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["NivArbEsp"].ToString().Length != 0 && rows["NivArbEsp"].ToString() != null &&
                                rows["AnoEsp"].ToString().Length != 0 && rows["AnoEsp"].ToString() != null &&
                                rows["PrototipoEsp"].ToString().Length != 0 && rows["PrototipoEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulApEsp"].ToString().Length != 0 && rows["ConsulApEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string NivArbEsp = rows["NivArbEsp"].ToString();
                                string AnoEsp = rows["AnoEsp"].ToString();
                                string PrototipoEsp = rows["PrototipoEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulApEsp = rows["ConsulApEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Empresa", true, file);

                                        Thread.Sleep(100);
                                        string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                        Thread.Sleep(100);
                                        if (CodEmpre != CodEmpreEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(100);

                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label18')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Niveles de Arbol ", true, file);

                                        Thread.Sleep(100);
                                        string NivArb = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label18')]");
                                        Thread.Sleep(100);
                                        if (NivArb != NivArbEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivArbEsp + " y el encontrado es: " + NivArb);
                                        }
                                        Thread.Sleep(100);


                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAno')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Año", true, file);

                                        Thread.Sleep(100);
                                        string Ano = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAno')]");
                                        Thread.Sleep(100);
                                        if (Ano != AnoEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AnoEsp + " y el encontrado es: " + AnoEsp);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(100);

                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblPrototipo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Prototipo", true, file);

                                        Thread.Sleep(100);
                                        string Prototipo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblPrototipo')]");
                                        Thread.Sleep(100);
                                        if (Prototipo != PrototipoEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PrototipoEsp + " y el encontrado es: " + Prototipo);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(100);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Empresa", true, file);

                                        Thread.Sleep(100);
                                        string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                        Thread.Sleep(100);
                                        if (CodEmpre != CodEmpreEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(100);

                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label18')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Niveles de Arbol ", true, file);

                                        Thread.Sleep(100);
                                        string NivArb = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label18')]");
                                        Thread.Sleep(100);
                                        if (NivArb != NivArbEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivArbEsp + " y el encontrado es: " + NivArb);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(100);

                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAno')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Año", true, file);

                                        Thread.Sleep(100);
                                        string Ano = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAno')]");
                                        Thread.Sleep(100);
                                        if (Ano != AnoEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AnoEsp + " y el encontrado es: " + AnoEsp);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(100);

                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblPrototipo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Prototipo", true, file);

                                        Thread.Sleep(100);
                                        string Prototipo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblPrototipo')]");
                                        Thread.Sleep(100);
                                        if (Prototipo != PrototipoEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PrototipoEsp + " y el encontrado es: " + Prototipo);
                                        }
                                        Thread.Sleep(100);

                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(100);

                                    }
                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteMetasIndividualesEmpleados()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReporteMetasIndividualesEmpleados")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ConsulAEsp"].ToString().Length != 0 && rows["ConsulAEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&
                                rows["ConsulNomEsp"].ToString().Length != 0 && rows["ConsulNomEsp"].ToString() != null &&
                                rows["ConsulApEsp"].ToString().Length != 0 && rows["ConsulApEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ConsulAEsp = rows["ConsulAEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();
                                string ConsulNomEsp = rows["ConsulNomEsp"].ToString();
                                string ConsulApEsp = rows["ConsulApEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_AnalisisDeEvaluacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_AnalisisDeEvaluacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["AevaluEsp"].ToString().Length != 0 && rows["AevaluEsp"].ToString() != null &&
                                rows["DocColEsp"].ToString().Length != 0 && rows["DocColEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string AevaluEsp = rows["AevaluEsp"].ToString();
                                string DocColEsp = rows["DocColEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Analisis Evaluacion", true, file);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Año Evaluacion", true, file);

                                    Thread.Sleep(100);
                                    string Aevalu = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Aevalu != AevaluEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AevaluEsp + " y el encontrado es: " + Aevalu);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label15')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Documento Colaborador ", true, file);

                                    Thread.Sleep(100);
                                    string DocCol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label15')]");
                                    Thread.Sleep(100);
                                    if (DocCol != DocColEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DocColEsp + " y el encontrado es: " + DocCol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellido", true, file);

                                    Thread.Sleep(100);
                                    string Apellido = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(100);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);



                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");

                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }


        }

        [TestMethod]
        public void SmartPeople_ProcesosDisciplinarios()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProcesosDisciplinarios")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //SEGUNDA PAGINA

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);



                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_CompiladoCompetenciasComportamientoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_CompiladoCompetenciasComportamientoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ConsulEsp"].ToString().Length != 0 && rows["ConsulEsp"].ToString() != null &&
                                rows["PrototipoEsp"].ToString().Length != 0 && rows["PrototipoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ConsulEsp = rows["ConsulEsp"].ToString();
                                string PrototipoEsp = rows["PrototipoEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCOD_EMPR')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCOD_EMPR')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsultarPor')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por ", true, file);

                                    Thread.Sleep(100);
                                    string Consul = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsultarPor')]");
                                    Thread.Sleep(100);
                                    if (Consul != ConsulEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulEsp + " y el encontrado es: " + Consul);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCOD_TEVA')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prototipo", true, file);

                                    Thread.Sleep(100);
                                    string Prototipo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCOD_TEVA')]");
                                    Thread.Sleep(100);
                                    if (Prototipo != PrototipoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PrototipoEsp + " y el encontrado es: " + Prototipo);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ControlEntregaDotacionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ControlEntregaDotacionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[@id='ctl00_lblMenMarco']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string ConsulId = selenium.Emergente("//span[@id='ctl00_lblMenMarco']");
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar por Nombre", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsulNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsulNom != ConsulNomEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNomEsp + " y el encontrado es: " + ConsulNom);
                                    //}
                                    //Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    //selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    //Thread.Sleep(1000);
                                    //selenium.Screenshot("Consultar Por Apellido", true, file);

                                    //Thread.Sleep(100);
                                    //string ConsulAp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    //Thread.Sleep(100);
                                    //if (ConsulAp != ConsulApEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulApEsp + " y el encontrado es: " + ConsulAp);
                                    //}
                                    //Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////


                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();

                                    //Thread.Sleep(800);
                                    //elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //if (elementList.Count > 0)
                                    //{
                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);

                                    //    foreach (IWebElement pageEle in elementList)
                                    //    {

                                    //        SendKeys.Send("{TAB}");
                                    //        selenium.Screenshot("TAB", true, file);

                                    //        Thread.Sleep(100);
                                    //    }
                                    //}


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RankingDeColaboradoresNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RankingDeColaboradoresNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ConsulIdEsp"].ToString().Length != 0 && rows["ConsulIdEsp"].ToString() != null &&


                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ConsulIdEsp = rows["ConsulIdEsp"].ToString();


                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Reporte Ranking", true, file);

                                    Thread.Sleep(100);
                                    string ConsulId = selenium.Emergente("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(100);
                                    if (ConsulId != ConsulIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIdEsp + " y el encontrado es: " + ConsulId);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////


                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();

                                    //Thread.Sleep(800);
                                    //elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //if (elementList.Count > 0)
                                    //{
                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);

                                    //    foreach (IWebElement pageEle in elementList)
                                    //    {

                                    //        SendKeys.Send("{TAB}");
                                    //        selenium.Screenshot("TAB", true, file);

                                    //        Thread.Sleep(100);
                                    //    }
                                    //}


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_RankingColaboradoresNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RankingColaboradoresNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["DescripEsp"].ToString().Length != 0 && rows["DescripEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string DescripEsp = rows["DescripEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    selenium.Click("//span[contains(.,'Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Lider", true, file);


                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodAcup')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Descripcion", true, file);

                                    Thread.Sleep(100);
                                    string Descrip = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodAcup')]");
                                    Thread.Sleep(100);
                                    if (Descrip != DescripEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DescripEsp + " y el encontrado es: " + Descrip);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInic')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInic')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecFina')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecFina')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_IndicadoresNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_IndicadoresNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["IndicaEsp"].ToString().Length != 0 && rows["IndicaEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string IndicaEsp = rows["IndicaEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Indicador", true, file);

                                    Thread.Sleep(100);
                                    string Indica = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (Indica != IndicaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IndicaEsp + " y el encontrado es: " + Indica);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ModuloBeneficioEducativoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ModuloBeneficioEducativoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdentiEsp"].ToString().Length != 0 && rows["IdentiEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["GradoEsp"].ToString().Length != 0 && rows["GradoEsp"].ToString() != null &&
                                rows["CiudadInsEsp"].ToString().Length != 0 && rows["CiudadInsEsp"].ToString() != null &&
                                rows["RepGradEsp"].ToString().Length != 0 && rows["RepGradEsp"].ToString() != null &&
                                rows["JornadaEsp"].ToString().Length != 0 && rows["JornadaEsp"].ToString() != null &&
                                rows["ModAsiEsp"].ToString().Length != 0 && rows["ModAsiEsp"].ToString() != null &&
                                rows["PerAcadEsp"].ToString().Length != 0 && rows["PerAcadEsp"].ToString() != null &&
                                rows["EstExtEsp"].ToString().Length != 0 && rows["EstExtEsp"].ToString() != null &&
                                rows["MonedaEsp"].ToString().Length != 0 && rows["MonedaEsp"].ToString() != null &&
                                rows["ValorEsp"].ToString().Length != 0 && rows["ValorEsp"].ToString() != null &&
                                rows["BecadoEsp"].ToString().Length != 0 && rows["BecadoEsp"].ToString() != null &&
                                rows["ValorBecaEsp"].ToString().Length != 0 && rows["ValorBecaEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdentiEsp = rows["IdentiEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();
                                string GradoEsp = rows["GradoEsp"].ToString();
                                string CiudadInsEsp = rows["CiudadInsEsp"].ToString();
                                string RepGradEsp = rows["RepGradEsp"].ToString();
                                string JornadaEsp = rows["JornadaEsp"].ToString();
                                string ModAsiEsp = rows["ModAsiEsp"].ToString();
                                string PerAcadEsp = rows["PerAcadEsp"].ToString();
                                string EstExtEsp = rows["EstExtEsp"].ToString();
                                string MonedaEsp = rows["MonedaEsp"].ToString();
                                string ValorEsp = rows["ValorEsp"].ToString();
                                string BecadoEsp = rows["BecadoEsp"].ToString();
                                string ValorBecaEsp = rows["ValorBecaEsp"].ToString();


                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string Identi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identi != IdentiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentiEsp + " y el encontrado es: " + Identi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre y Apellido", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel Escolaridad", true, file);

                                    Thread.Sleep(100);
                                    string Nivel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodNive')]");
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodGrae')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Grado de Escolaridad", true, file);

                                    Thread.Sleep(100);
                                    string Grado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodGrae')]");
                                    Thread.Sleep(100);
                                    if (Grado != GradoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GradoEsp + " y el encontrado es: " + Grado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMunicipioInst')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad institucion", true, file);

                                    Thread.Sleep(100);
                                    string CiudadIns = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMunicipioInst')]");
                                    Thread.Sleep(100);
                                    if (CiudadIns != CiudadInsEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadInsEsp + " y el encontrado es: " + CiudadIns);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblRepGrad')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Repide Grado", true, file);

                                    Thread.Sleep(100);
                                    string RepGrad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblRepGrad')]");
                                    Thread.Sleep(100);
                                    if (RepGrad != RepGradEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RepGradEsp + " y el encontrado es: " + RepGrad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblJorNada')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jornada", true, file);

                                    Thread.Sleep(100);
                                    string Jornada = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblJorNada')]");
                                    Thread.Sleep(100);
                                    if (Jornada != JornadaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JornadaEsp + " y el encontrado es: " + Jornada);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblModAlid')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Modalidad de Asistencia", true, file);

                                    Thread.Sleep(100);
                                    string ModAsi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblModAlid')]");
                                    Thread.Sleep(100);
                                    if (ModAsi != ModAsiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ModAsiEsp + " y el encontrado es: " + ModAsi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblPerEsco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Periodo Academico", true, file);

                                    Thread.Sleep(100);
                                    string PerAcad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblPerEsco')]");
                                    Thread.Sleep(100);
                                    if (PerAcad != PerAcadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerAcadEsp + " y el encontrado es: " + PerAcad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblEstExte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estudia en el Exterior", true, file);

                                    Thread.Sleep(100);
                                    string EstExt = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblEstExte')]");
                                    Thread.Sleep(100);
                                    if (EstExt != EstExtEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstExtEsp + " y el encontrado es: " + EstExt);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMonEda')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Moneda", true, file);

                                    Thread.Sleep(100);
                                    string Moneda = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMonEda')]");
                                    Thread.Sleep(100);
                                    if (Moneda != MonedaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MonedaEsp + " y el encontrado es: " + Moneda);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblVlrTmr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor TRM", true, file);

                                    Thread.Sleep(100);
                                    string Valor = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblVlrTmr')]");
                                    Thread.Sleep(100);
                                    if (Valor != ValorEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValorEsp + " y el encontrado es: " + Valor);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblBecRend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Becado por Rendimiento", true, file);

                                    Thread.Sleep(100);
                                    string Becado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblBecRend')]");
                                    Thread.Sleep(100);
                                    if (Becado != BecadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + BecadoEsp + " y el encontrado es: " + Becado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblValBeca')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Beca", true, file);

                                    Thread.Sleep(100);
                                    string ValorBeca = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblValBeca')]");
                                    Thread.Sleep(100);
                                    if (ValorBeca != ValorBecaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValorBecaEsp + " y el encontrado es: " + ValorBeca);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_IngresoACursosInternosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_IngresoACursosInternosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["PlanEsp"].ToString().Length != 0 && rows["PlanEsp"].ToString() != null &&
                                rows["CursoEsp"].ToString().Length != 0 && rows["CursoEsp"].ToString() != null &&
                                rows["ProgEsp"].ToString().Length != 0 && rows["ProgEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string PlanEsp = rows["PlanEsp"].ToString();
                                string CursoEsp = rows["CursoEsp"].ToString();
                                string ProgEsp = rows["ProgEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Plan", true, file);

                                    Thread.Sleep(100);
                                    string Plan = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Plan != PlanEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PlanEsp + " y el encontrado es: " + Plan);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Programa", true, file);

                                    Thread.Sleep(100);
                                    string Prog = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (Prog != ProgEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ProgEsp + " y el encontrado es: " + Prog);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Curso", true, file);

                                    Thread.Sleep(100);
                                    string Curso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(100);
                                    if (Curso != CursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CursoEsp + " y el encontrado es: " + Curso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label7')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Inicio", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label7')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label8')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Finalizacíon", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label8')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_EvaluacionCursosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_EvaluacionCursosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ListaEsp"].ToString().Length != 0 && rows["ListaEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ListaEsp = rows["ListaEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Listado de Cursos a Evaluar", true, file);

                                    Thread.Sleep(100);
                                    string Lista = selenium.Emergente("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(100);
                                    if (Lista != ListaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ListaEsp + " y el encontrado es: " + Lista);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_lblCantidad')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cantidad total de registros", true, file);

                                    Thread.Sleep(100);
                                    string Cantidad = selenium.Emergente("//span[contains(@id,'ctl00_lblCantidad')]");
                                    Thread.Sleep(100);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);

                                    //////////////////Validaciones/////////////////////////
                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();

                                    //Thread.Sleep(800);
                                    //elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    //selenium.AcceptAlert();
                                    //Thread.Sleep(500);
                                    //selenium.Screenshot("Requeridos", true, file);

                                    //Thread.Sleep(500);

                                    //if (elementList.Count > 0)
                                    //{
                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);
                                    //    foreach (IWebElement pageEle in elementList)
                                    //    {

                                    //        SendKeys.Send("{TAB}");
                                    //        selenium.Screenshot("TAB", true, file);

                                    //        Thread.Sleep(100);

                                    //    }
                                    //}

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_DocumentosSesionesCursosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_DocumentosSesionesCursosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CursosEsp"].ToString().Length != 0 && rows["CursosEsp"].ToString() != null &&
                                rows["SesionesEsp"].ToString().Length != 0 && rows["SesionesEsp"].ToString() != null &&
                                rows["ContenidoEsp"].ToString().Length != 0 && rows["ContenidoEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CursosEsp = rows["CursosEsp"].ToString();
                                string SesionesEsp = rows["SesionesEsp"].ToString();
                                string ContenidoEsp = rows["ContenidoEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCursos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cursos", true, file);

                                    Thread.Sleep(100);
                                    string Cursos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCursos')]");
                                    Thread.Sleep(100);
                                    if (Cursos != CursosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CursosEsp + " y el encontrado es: " + Cursos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSesiones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Sesiones", true, file);

                                    Thread.Sleep(100);
                                    string Sesiones = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSesiones')]");
                                    Thread.Sleep(100);
                                    if (Sesiones != SesionesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SesionesEsp + " y el encontrado es: " + Sesiones);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Contenido", true, file);

                                    Thread.Sleep(100);
                                    string Contenido = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Contenido != ContenidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ContenidoEsp + " y el encontrado es: " + Contenido);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_lblCantidad')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cantidad de Registros", true, file);

                                    Thread.Sleep(100);
                                    string Cantidad = selenium.Emergente("//span[contains(@id,'ctl00_lblCantidad')]");
                                    Thread.Sleep(100);
                                    if (Cantidad != CantidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CantidadEsp + " y el encontrado es: " + Cantidad);
                                    }
                                    Thread.Sleep(100);


                                    //////////////////Validaciones/////////////////////////
                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();

                                    //Thread.Sleep(800);
                                    //elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    //selenium.AcceptAlert();
                                    //Thread.Sleep(500);
                                    //selenium.Screenshot("Requeridos", true, file);

                                    //Thread.Sleep(500);

                                    //if (elementList.Count > 0)
                                    //{
                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);
                                    //    foreach (IWebElement pageEle in elementList)
                                    //    {

                                    //        SendKeys.Send("{TAB}");
                                    //        selenium.Screenshot("TAB", true, file);

                                    //        Thread.Sleep(100);

                                    //    }
                                    //}

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_NecesidadesDeCapacitacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_NecesidadesDeCapacitacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["SeccionalEsp"].ToString().Length != 0 && rows["SeccionalEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["DependEsp"].ToString().Length != 0 && rows["DependEsp"].ToString() != null &&
                                rows["CiudadEsp"].ToString().Length != 0 && rows["CiudadEsp"].ToString() != null &&
                                rows["GrupoEsp"].ToString().Length != 0 && rows["GrupoEsp"].ToString() != null &&
                                rows["CursoEsp"].ToString().Length != 0 && rows["CursoEsp"].ToString() != null &&
                                rows["DesCurEsp"].ToString().Length != 0 && rows["DesCurEsp"].ToString() != null &&
                                rows["IdentiEsp"].ToString().Length != 0 && rows["IdentiEsp"].ToString() != null &&
                                rows["CoordinEsp"].ToString().Length != 0 && rows["CoordinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string SeccionalEsp = rows["SeccionalEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string DependEsp = rows["DependEsp"].ToString();
                                string CiudadEsp = rows["CiudadEsp"].ToString();
                                string GrupoEsp = rows["GrupoEsp"].ToString();
                                string CursoEsp = rows["CursoEsp"].ToString();
                                string DesCurEsp = rows["DesCurEsp"].ToString();
                                string IdentiEsp = rows["IdentiEsp"].ToString();
                                string CoordinEsp = rows["CoordinEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //selenium.Click("//span[contains(@id,'ctl00_pLider')]");
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Seccional", true, file);

                                    Thread.Sleep(100);
                                    string Seccional = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Seccional != SeccionalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SeccionalEsp + " y el encontrado es: " + Seccional);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecSoliA_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecSoliA_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dependencia", true, file);

                                    Thread.Sleep(100);
                                    string Depend = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label3')]");
                                    Thread.Sleep(100);
                                    if (Depend != DependEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DependEsp + " y el encontrado es: " + Depend);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCiud')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad", true, file);

                                    Thread.Sleep(100);
                                    string Ciudad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCiud')]");
                                    Thread.Sleep(100);
                                    if (Ciudad != CiudadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadEsp + " y el encontrado es: " + Ciudad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Area o Grupo", true, file);

                                    Thread.Sleep(100);
                                    string Grupo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label5')]");
                                    Thread.Sleep(100);
                                    if (Grupo != GrupoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GrupoEsp + " y el encontrado es: " + Grupo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Curso", true, file);

                                    Thread.Sleep(100);
                                    string Curso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(100);
                                    if (Curso != CursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CursoEsp + " y el encontrado es: " + Curso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 8; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDesCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Descripcion de Curso", true, file);

                                    Thread.Sleep(100);
                                    string DesCur = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDesCurs')]");
                                    Thread.Sleep(100);
                                    if (DesCur != DesCurEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DesCurEsp + " y el encontrado es: " + DesCur);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdentificaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificaciones", true, file);

                                    Thread.Sleep(100);
                                    string Identi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdentificaciones')]");
                                    Thread.Sleep(100);
                                    if (Identi != IdentiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentiEsp + " y el encontrado es: " + Identi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCoordinador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Coordinador de Capacitación", true, file);

                                    Thread.Sleep(100);
                                    string Coordin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCoordinador')]");
                                    Thread.Sleep(100);
                                    if (Coordin != CoordinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CoordinEsp + " y el encontrado es: " + Coordin);
                                    }
                                    Thread.Sleep(100);
                                    for (int i = 0; i < 8; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }
                                    //////////////////Validaciones/////////////////////////
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Requeridos", true, file);

                                    Thread.Sleep(500);

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);

                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_HistorialDeCapacitaciones()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_HistorialDeCapacitaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["FiltroEsp"].ToString().Length != 0 && rows["FiltroEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                string FiltroEsp = rows["FiltroEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Filtro", true, file);

                                    Thread.Sleep(100);
                                    string Filtro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFiltro')]");
                                    Thread.Sleep(100);
                                    if (Filtro != FiltroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FiltroEsp + " y el encontrado es: " + Filtro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Fin", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);
                                    //////////////////Validaciones/////////////////////////
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_EntidadesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_EntidadesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["CodigoEsp"].ToString().Length != 0 && rows["CodigoEsp"].ToString() != null &&

                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NitEntEsp"].ToString().Length != 0 && rows["NitEntEsp"].ToString() != null &&
                                rows["AddressEsp"].ToString().Length != 0 && rows["AddressEsp"].ToString() != null &&
                                rows["TelefonoEsp"].ToString().Length != 0 && rows["TelefonoEsp"].ToString() != null &&
                                rows["TelmovilEsp"].ToString().Length != 0 && rows["TelmovilEsp"].ToString() != null &&
                                rows["MailEsp"].ToString().Length != 0 && rows["MailEsp"].ToString() != null &&
                                rows["CiudadEsp"].ToString().Length != 0 && rows["CiudadEsp"].ToString() != null &&
                                rows["ResponsEsp"].ToString().Length != 0 && rows["ResponsEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                rows["ConfJurEsp"].ToString().Length != 0 && rows["ConfJurEsp"].ToString() != null &&
                                rows["ClasificEsp"].ToString().Length != 0 && rows["ClasificEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string CodigoEsp = rows["CodigoEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NitEntEsp = rows["NitEntEsp"].ToString();
                                string AddressEsp = rows["AddressEsp"].ToString();
                                string TelefonoEsp = rows["TelefonoEsp"].ToString();
                                string TelmovilEsp = rows["TelmovilEsp"].ToString();
                                string MailEsp = rows["MailEsp"].ToString();
                                string CiudadEsp = rows["CiudadEsp"].ToString();
                                string ResponsEsp = rows["ResponsEsp"].ToString();
                                string ConfJurEsp = rows["ConfJurEsp"].ToString();
                                string ClasificEsp = rows["ClasificEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();


                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo", true, file);

                                    Thread.Sleep(100);
                                    string Codigo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Codigo != CodigoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodigoEsp + " y el encontrado es: " + Codigo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEnti')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNitEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nit Entidad", true, file);

                                    Thread.Sleep(100);
                                    string NitEnt = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNitEnti')]");
                                    Thread.Sleep(100);
                                    if (NitEnt != NitEntEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NitEntEsp + " y el encontrado es: " + NitEnt);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDirEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("TDireccion", true, file);

                                    Thread.Sleep(100);
                                    string Address = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDirEnti')]");
                                    Thread.Sleep(100);
                                    if (Address != AddressEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AddressEsp + " y el encontrado es: " + Address);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTelEnti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Telefono", true, file);

                                    Thread.Sleep(100);
                                    string Telefono = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTelEnti')]");
                                    Thread.Sleep(100);
                                    if (Telefono != TelefonoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelefonoEsp + " y el encontrado es: " + Telefono);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNumMovi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Telefono Movil", true, file);

                                    Thread.Sleep(100);
                                    string Telmovil = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNumMovi')]");
                                    Thread.Sleep(100);
                                    if (Telmovil != TelmovilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelmovilEsp + " y el encontrado es: " + Telmovil);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNumEmai')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("E-mail", true, file);

                                    Thread.Sleep(100);
                                    string Mail = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNumEmai')]");
                                    Thread.Sleep(100);
                                    if (Mail != MailEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MailEsp + " y el encontrado es: " + Mail);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDiv_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad", true, file);

                                    Thread.Sleep(100);
                                    string Ciudad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDiv_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (Ciudad != CiudadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadEsp + " y el encontrado es: " + Ciudad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblResCapa')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Responsable", true, file);

                                    Thread.Sleep(100);
                                    string Respons = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblResCapa')]");
                                    Thread.Sleep(100);
                                    if (Respons != ResponsEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ResponsEsp + " y el encontrado es: " + Respons);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label9')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Configuracion Juridica", true, file);

                                    Thread.Sleep(100);
                                    string ConfJur = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label9')]");
                                    Thread.Sleep(100);
                                    if (ConfJur != ConfJurEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConfJurEsp + " y el encontrado es: " + ConfJur);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Clasificacion", true, file);

                                    Thread.Sleep(100);
                                    string Clasific = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(100);
                                    if (Clasific != ClasificEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClasificEsp + " y el encontrado es: " + Clasific);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observ = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));


                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        String id = pageEle.GetAttribute("id");
                                                        if (id == "ctl00_ContenidoPagina_KCtrlFecExpe_txtFecha" || id == "ctl00_ContenidoPagina_KCtrlFecNaci_txtFecha" || id == "ctl00_ContenidoPagina_txtDirResi" || id == "ctl00_ContenidoPagina_KCtrlFecGrad_txtFecha ")
                                                        {
                                                            //errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + id + " no debe permitir la opcion de tabular");
                                                        }

                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        SendKeys.Send("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_FrmEdRepfOmetNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_frmEdRepfOmetNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["ConsulIDEsp"].ToString().Length != 0 && rows["ConsulIDEsp"].ToString() != null &&
                                rows["ConsulNameEsp"].ToString().Length != 0 && rows["ConsulNameEsp"].ToString() != null &&
                                rows["ConsulLastEsp"].ToString().Length != 0 && rows["ConsulLastEsp"].ToString() != null &&

                                rows["ulr2"].ToString().Length != 0 && rows["ulr2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string ConsulIDEsp = rows["ConsulIDEsp"].ToString();
                                string ConsulNameEsp = rows["ConsulNameEsp"].ToString();
                                string ConsulLastEsp = rows["ConsulLastEsp"].ToString();

                                string ulr2 = rows["ulr2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    Thread.Sleep(1000);
                                    //ACCEDER A LIDER
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    selenium.Screenshot("Rol Lider", true, file);


                                    driver2.Navigate().GoToUrl(ulr2);
                                    Thread.Sleep(500);



                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);
                                    ///////////////////////////////////////////////////////////////////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string ConsulID = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsulID != ConsulIDEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulIDEsp + " y el encontrado es: " + ConsulID);
                                    }
                                    Thread.Sleep(100);
                                    ///////////////////////////////////////////////////////////////////////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Nombres", true, file);

                                    Thread.Sleep(100);
                                    string ConsulName = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsulName != ConsulNameEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulNameEsp + " y el encontrado es: " + ConsulName);
                                    }
                                    Thread.Sleep(100);
                                    ///////////////////////////////////////////////////////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string ConsulLast = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuAplEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsulLast != ConsulLastEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulLastEsp + " y el encontrado es: " + ConsulLast);
                                    }
                                    Thread.Sleep(100);

                                    /////////// Validación TABS ////////
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //for (int i = 0; i < 25; i++) SendKeys.Send("{UP}");
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }




                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MetroDeCompetenciaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MetroDeCompetenciaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                // rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["TIpoFilEsp"].ToString().Length != 0 && rows["TIpoFilEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                //string GuardarEsp = rows["GuardarEsp"].ToString();
                                string TIpoFilEsp = rows["TIpoFilEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipFilt')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Filtro", true, file);

                                    Thread.Sleep(100);
                                    string TIpoFil = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipFilt')]");
                                    Thread.Sleep(100);
                                    if (TIpoFil != TIpoFilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TIpoFilEsp + " y el encontrado es: " + TIpoFil);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAnoSele')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Año", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAnoSele')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);
                                    //////////////////Validaciones/////////////////////////
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void SmartPeople_EncuestasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_EncuestasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                // rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["TipoEncuEsp"].ToString().Length != 0 && rows["TipoEncuEsp"].ToString() != null &&
                                rows["EcuestaEsp"].ToString().Length != 0 && rows["EcuestaEsp"].ToString() != null &&
                                rows["VariablesEsp"].ToString().Length != 0 && rows["VariablesEsp"].ToString() != null &&
                                rows["TIpoPoblaEsp"].ToString().Length != 0 && rows["TIpoPoblaEsp"].ToString() != null &&
                                rows["PoblacionEsp"].ToString().Length != 0 && rows["PoblacionEsp"].ToString() != null &&
                                rows["VarEsp"].ToString().Length != 0 && rows["VarEsp"].ToString() != null &&
                                rows["AccionesEsp"].ToString().Length != 0 && rows["AccionesEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                //string GuardarEsp = rows["GuardarEsp"].ToString();
                                string TipoEncuEsp = rows["TipoEncuEsp"].ToString();
                                string EcuestaEsp = rows["EcuestaEsp"].ToString();
                                string VariablesEsp = rows["VariablesEsp"].ToString();
                                string TIpoPoblaEsp = rows["TIpoPoblaEsp"].ToString();
                                string PoblacionEsp = rows["PoblacionEsp"].ToString();
                                string VarEsp = rows["VarEsp"].ToString();
                                string AccionesEsp = rows["AccionesEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Encuesta", true, file);

                                    Thread.Sleep(100);
                                    string TipoEncu = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu')]");
                                    Thread.Sleep(100);
                                    if (TipoEncu != TipoEncuEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoEncuEsp + " y el encontrado es: " + TipoEncu);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblModulo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Encuestas", true, file);

                                    Thread.Sleep(100);
                                    string Ecuesta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblModulo')]");
                                    Thread.Sleep(100);
                                    if (Ecuesta != EcuestaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EcuestaEsp + " y el encontrado es: " + Ecuesta);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblModulo0')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Variables", true, file);

                                    Thread.Sleep(100);
                                    string Variables = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblModulo0')]");
                                    Thread.Sleep(100);
                                    if (Variables != VariablesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VariablesEsp + " y el encontrado es: " + Variables);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu0')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo Poblacion", true, file);

                                    Thread.Sleep(100);
                                    string TIpoPobla = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu0')]");
                                    Thread.Sleep(100);
                                    if (TIpoPobla != TIpoPoblaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TIpoPoblaEsp + " y el encontrado es: " + TIpoPobla);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Poblacion", true, file);

                                    Thread.Sleep(100);
                                    string Poblacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu1')]");
                                    Thread.Sleep(100);
                                    if (Poblacion != PoblacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PoblacionEsp + " y el encontrado es: " + Poblacion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("%Variable", true, file);

                                    Thread.Sleep(100);
                                    string Var = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecEncu2')]");
                                    Thread.Sleep(100);
                                    if (Var != VarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VarEsp + " y el encontrado es: " + Var);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Acciones", true, file);

                                    Thread.Sleep(100);
                                    string Acciones = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label6')]");
                                    Thread.Sleep(100);
                                    if (Acciones != AccionesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + AccionesEsp + " y el encontrado es: " + Acciones);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    Thread.Sleep(800);

                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnActualizar']")));

                                    Thread.Sleep(200);

                                    selenium.Screenshot("Campos Requeridos", true, file);

                                    Thread.Sleep(200);

                                    if (elementList.Count > 0)
                                    {

                                        elementList[0].Click();
                                        Thread.Sleep(500);


                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            elementListPagina[0].Click();
                                            Thread.Sleep(500);
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(500);
                                                SendKeys.Send("{TAB}");
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);

                                            }

                                        }

                                    }


                                    fv.ConvertWordToPDF(file, database); 



                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisSolicitudesCertificaciones()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisSolicitudesCertificaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                // rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["MisSoliEsp"].ToString().Length != 0 && rows["MisSoliEsp"].ToString() != null &&
                                rows["SolicitudEsp"].ToString().Length != 0 && rows["SolicitudEsp"].ToString() != null &&
                                rows["TipoEsp"].ToString().Length != 0 && rows["TipoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                //string GuardarEsp = rows["GuardarEsp"].ToString();
                                string MisSoliEsp = rows["MisSoliEsp"].ToString();
                                string SolicitudEsp = rows["SolicitudEsp"].ToString();
                                string TipoEsp = rows["TipoEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Solicitudes de Certificaciones", true, file);

                                    Thread.Sleep(100);
                                    string MisSoli = selenium.Emergente("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(100);
                                    if (MisSoli != MisSoliEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MisSoliEsp + " y el encontrado es: " + MisSoli);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSolCert')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud de Certificaciones", true, file);

                                    Thread.Sleep(100);
                                    string Solicitud = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSolCert')]");
                                    Thread.Sleep(100);
                                    if (Solicitud != SolicitudEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SolicitudEsp + " y el encontrado es: " + Solicitud);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipCerti')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Certificacion", true, file);

                                    Thread.Sleep(100);
                                    string Tipo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipCerti')]");
                                    Thread.Sleep(100);
                                    if (Tipo != TipoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoEsp + " y el encontrado es: " + Tipo);
                                    }
                                    Thread.Sleep(100);


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_EntrevistaDeRetiro()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_EntrevistaDeRetiro")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                // rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["ListaRetEsp"].ToString().Length != 0 && rows["ListaRetEsp"].ToString() != null &&
                                rows["CantidadEsp"].ToString().Length != 0 && rows["CantidadEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                //string GuardarEsp = rows["GuardarEsp"].ToString();
                                string ListaRetEsp = rows["ListaRetEsp"].ToString();
                                string CantidadEsp = rows["CantidadEsp"].ToString();

                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Lista de Entrevista de Retiro", true, file);

                                    Thread.Sleep(100);
                                    string ListaRet = selenium.Emergente("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(100);
                                    if (ListaRet != ListaRetEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ListaRetEsp + " y el encontrado es: " + ListaRet);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisPrestamosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisPrestamosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                // rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["CodEmplEsp"].ToString().Length != 0 && rows["CodEmplEsp"].ToString() != null &&
                                rows["NomEmplEsp"].ToString().Length != 0 && rows["NomEmplEsp"].ToString() != null &&
                                rows["ApeEmplEsp"].ToString().Length != 0 && rows["ApeEmplEsp"].ToString() != null &&
                                rows["PrestamoEsp"].ToString().Length != 0 && rows["PrestamoEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&
                                rows["TipoEsp"].ToString().Length != 0 && rows["TipoEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                //string GuardarEsp = rows["GuardarEsp"].ToString();
                                string CodEmplEsp = rows["CodEmplEsp"].ToString();
                                string NomEmplEsp = rows["NomEmplEsp"].ToString();
                                string ApeEmplEsp = rows["ApeEmplEsp"].ToString();
                                string PrestamoEsp = rows["PrestamoEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();
                                string TipoEsp = rows["TipoEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuFechas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Fecha", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuFechas')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo Reporte", true, file);

                                    Thread.Sleep(100);
                                    string Tipo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_Label1')]");
                                    Thread.Sleep(100);
                                    if (Tipo != TipoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoEsp + " y el encontrado es: " + Tipo);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    //selenium.Click(xpath[0]);
                                    //for (int i = 0; i < 4; i++) SendKeys.Send("{UP}");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }



                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ListaColaboradoresNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ListaColaboradoresNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                // rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["CodEmplEsp"].ToString().Length != 0 && rows["CodEmplEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                //string GuardarEsp = rows["GuardarEsp"].ToString();
                                string CodEmplEsp = rows["CodEmplEsp"].ToString();


                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //rh
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                    }
                                    selenium.Screenshot("RH", true, file);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Listado de Colaboradores", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpl = selenium.Emergente("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(100);
                                    if (CodEmpl != CodEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmplEsp + " y el encontrado es: " + CodEmpl);
                                    }
                                    Thread.Sleep(100);

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisCentrosVacacionalesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisCentrosVacacionalesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&

                                rows["CodEmplEsp"].ToString().Length != 0 && rows["CodEmplEsp"].ToString() != null &&
                                rows["NomEmplEsp"].ToString().Length != 0 && rows["NomEmplEsp"].ToString() != null &&
                                rows["CodInteEsp"].ToString().Length != 0 && rows["CodInteEsp"].ToString() != null &&
                                rows["CentroCostEsp"].ToString().Length != 0 && rows["CentroCostEsp"].ToString() != null &&
                                rows["DependEsp"].ToString().Length != 0 && rows["DependEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["FechaProEsp"].ToString().Length != 0 && rows["FechaProEsp"].ToString() != null &&
                                rows["CentVacEsp"].ToString().Length != 0 && rows["CentVacEsp"].ToString() != null &&
                                rows["FechaDesdeEsp"].ToString().Length != 0 && rows["FechaDesdeEsp"].ToString() != null &&
                                rows["FechaHastaEsp"].ToString().Length != 0 && rows["FechaHastaEsp"].ToString() != null &&
                                rows["NumPerEsp"].ToString().Length != 0 && rows["NumPerEsp"].ToString() != null &&
                                rows["NumNocheEsp"].ToString().Length != 0 && rows["NumNocheEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();

                                string CodEmplEsp = rows["CodEmplEsp"].ToString();
                                string NomEmplEsp = rows["NomEmplEsp"].ToString();
                                string CodInteEsp = rows["CodInteEsp"].ToString();
                                string CentroCostEsp = rows["CentroCostEsp"].ToString();
                                string DependEsp = rows["DependEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string FechaProEsp = rows["FechaProEsp"].ToString();
                                string CentVacEsp = rows["CentVacEsp"].ToString();
                                string FechaDesdeEsp = rows["FechaDesdeEsp"].ToString();
                                string FechaHastaEsp = rows["FechaHastaEsp"].ToString();
                                string NumPerEsp = rows["NumPerEsp"].ToString();
                                string NumNocheEsp = rows["NumNocheEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmpl != CodEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmplEsp + " y el encontrado es: " + CodEmpl);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomApel')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomApel')]");
                                    Thread.Sleep(100);
                                    if (NomEmpl != NomEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEmplEsp + " y el encontrado es: " + NomEmpl);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInte = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInte != CodInteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInteEsp + " y el encontrado es: " + CodInte);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCost = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(100);
                                    if (CentroCost != CentroCostEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostEsp + " y el encontrado es: " + CentroCost);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dependencia", true, file);

                                    Thread.Sleep(100);
                                    string Depend = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtNive')]");
                                    Thread.Sleep(100);
                                    if (Depend != DependEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DependEsp + " y el encontrado es: " + Depend);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecActu_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha del Proceso", true, file);

                                    Thread.Sleep(100);
                                    string FechaPro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_kcfFecActu_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaPro != FechaProEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaProEsp + " y el encontrado es: " + FechaPro);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCenv')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro Vacacional", true, file);

                                    Thread.Sleep(100);
                                    string CentVac = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCenv')]");
                                    Thread.Sleep(100);
                                    if (CentVac != CentVacEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentVacEsp + " y el encontrado es: " + CentVac);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha desde", true, file);

                                    Thread.Sleep(100);
                                    string FechaDesde = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaDesde != FechaDesdeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaDesdeEsp + " y el encontrado es: " + FechaDesde);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Hasta", true, file);

                                    Thread.Sleep(100);
                                    string FechaHasta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaHasta != FechaHastaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHastaEsp + " y el encontrado es: " + FechaHasta);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroPres')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Personas", true, file);

                                    Thread.Sleep(100);
                                    string NumPer = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroPres')]");
                                    Thread.Sleep(100);
                                    if (NumPer != NumPerEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumPerEsp + " y el encontrado es: " + NumPer);
                                    }
                                    Thread.Sleep(100);

                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroNoch')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Noches", true, file);

                                    Thread.Sleep(100);
                                    string NumNoche = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroNoch')]");
                                    Thread.Sleep(100);
                                    if (NumNoche != NumNocheEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumNocheEsp + " y el encontrado es: " + NumNoche);
                                    }
                                    Thread.Sleep(100);



                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");

                                    Thread.Sleep(500);
                                    selenium.Screenshot("Campos Requeridos", true, file);

                                    Thread.Sleep(500);
                                    int cont = 0;
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                            cont++;

                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_BeneficiosOrganizacionalesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_BeneficiosOrganizacionalesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["CodEmplEsp"].ToString().Length != 0 && rows["CodEmplEsp"].ToString() != null &&
                                rows["NomEmplEsp"].ToString().Length != 0 && rows["NomEmplEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["ClaNomEsp"].ToString().Length != 0 && rows["ClaNomEsp"].ToString() != null &&
                                rows["BenefEsp"].ToString().Length != 0 && rows["BenefEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["DocReqEsp"].ToString().Length != 0 && rows["DocReqEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                //string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string CodEmplEsp = rows["CodEmplEsp"].ToString();
                                string NomEmplEsp = rows["NomEmplEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string ClaNomEsp = rows["ClaNomEsp"].ToString();
                                string BenefEsp = rows["BenefEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string DocReqEsp = rows["DocReqEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //SEGUNDA PAGINA
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmpl != CodEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmplEsp + " y el encontrado es: " + CodEmpl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomEmpl != NomEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEmplEsp + " y el encontrado es: " + NomEmpl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblClasNom')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Clase de Nomina", true, file);

                                    Thread.Sleep(100);
                                    string ClaNom = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblClasNom')]");
                                    Thread.Sleep(100);
                                    if (ClaNom != ClaNomEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClaNomEsp + " y el encontrado es: " + ClaNom);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Beneficios", true, file);

                                    Thread.Sleep(100);
                                    string Benef = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodMces')]");
                                    Thread.Sleep(100);
                                    if (Benef != BenefEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + BenefEsp + " y el encontrado es: " + Benef);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 8; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFec_Regi_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFec_Regi_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDocReque')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Documentos Requeridos", true, file);

                                    Thread.Sleep(100);
                                    string DocReq = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDocReque')]");
                                    Thread.Sleep(100);
                                    if (DocReq != DocReqEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DocReqEsp + " y el encontrado es: " + DocReq);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones de la Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string Observ = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 8; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }
                                    ///////////////////////////Validacion//////////////////////////
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[7].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ServicioAlClienteInternoNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ServicioAlClienteInternoNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["CodEmplEsp"].ToString().Length != 0 && rows["CodEmplEsp"].ToString() != null &&
                                rows["NomEmplEsp"].ToString().Length != 0 && rows["NomEmplEsp"].ToString() != null &&
                                rows["ApeEmplEsp"].ToString().Length != 0 && rows["ApeEmplEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["TipoSolEsp"].ToString().Length != 0 && rows["TipoSolEsp"].ToString() != null &&
                                rows["NumSolEsp"].ToString().Length != 0 && rows["NumSolEsp"].ToString() != null &&
                                rows["FechaHechoEsp"].ToString().Length != 0 && rows["FechaHechoEsp"].ToString() != null &&
                                rows["DescripEsp"].ToString().Length != 0 && rows["DescripEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string CodEmplEsp = rows["CodEmplEsp"].ToString();
                                string NomEmplEsp = rows["NomEmplEsp"].ToString();
                                string ApeEmplEsp = rows["ApeEmplEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string TipoSolEsp = rows["TipoSolEsp"].ToString();
                                string NumSolEsp = rows["NumSolEsp"].ToString();
                                string FechaHechoEsp = rows["FechaHechoEsp"].ToString();
                                string DescripEsp = rows["DescripEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);



                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmpl != CodEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmplEsp + " y el encontrado es: " + CodEmpl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string NomEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomEmpl != NomEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomEmplEsp + " y el encontrado es: " + NomEmpl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellido", true, file);

                                    Thread.Sleep(100);
                                    string ApeEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(100);
                                    if (ApeEmpl != ApeEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApeEmplEsp + " y el encontrado es: " + ApeEmpl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel", true, file);

                                    Thread.Sleep(100);
                                    string Nivel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecSoli_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("FechaSol", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecSoli_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodTiso')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string TipoSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodTiso')]");
                                    Thread.Sleep(100);
                                    if (TipoSol != TipoSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoSolEsp + " y el encontrado es: " + TipoSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNUM_SOLI')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string NumSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNUM_SOLI')]");
                                    Thread.Sleep(100);
                                    if (NumSol != NumSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumSolEsp + " y el encontrado es: " + NumSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecHech_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de los Hechos", true, file);

                                    Thread.Sleep(100);
                                    string FechaHecho = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecHech_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaHecho != FechaHechoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaHechoEsp + " y el encontrado es: " + FechaHecho);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtDesHech_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Descripcion", true, file);

                                    Thread.Sleep(100);
                                    string Descrip = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtDesHech_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Descrip != DescripEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DescripEsp + " y el encontrado es: " + Descrip);
                                    }
                                    Thread.Sleep(100);


                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    /////////// Validación TABS ////////
                                    //selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 25; i++) SendKeys.Send("{UP}");
                                    //ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[1].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisPublicaciones()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisPublicaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EliminarEsp"].ToString().Length != 0 && rows["EliminarEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["TituloObEsp"].ToString().Length != 0 && rows["TituloObEsp"].ToString() != null &&
                                rows["EditorialEsp"].ToString().Length != 0 && rows["EditorialEsp"].ToString() != null &&
                                rows["ClaseEsp"].ToString().Length != 0 && rows["ClaseEsp"].ToString() != null &&
                                rows["ISBNEsp"].ToString().Length != 0 && rows["ISBNEsp"].ToString() != null &&
                                rows["FechaEsp"].ToString().Length != 0 && rows["FechaEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EliminarEsp = rows["EliminarEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string TituloObEsp = rows["TituloObEsp"].ToString();
                                string EditorialEsp = rows["EditorialEsp"].ToString();
                                string ClaseEsp = rows["ClaseEsp"].ToString();
                                string ISBNEsp = rows["ISBNEsp"].ToString();
                                string FechaEsp = rows["FechaEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    //////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_Retornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(2000);

                                    ////Validación emergentes Boton Eliminar
                                    //string Eliminar = selenium.EmergenteBotones("ctl00_btnEliminar");
                                    //Thread.Sleep(100);
                                    //if (Eliminar != EliminarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + EliminarEsp + " y el encontrado es: " + Eliminar);
                                    //}
                                    //Thread.Sleep(2000);

                                    //////Validación emergentes Boton Actualizar
                                    //string Actualizar = selenium.EmergenteBotones("ctl00_btnActualizar");
                                    //Thread.Sleep(100);
                                    //if (Actualizar != ActualizarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    //}
                                    //Thread.Sleep(2000);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTit_Publ')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Titulo de la Obra", true, file);

                                    Thread.Sleep(100);
                                    string TituloOb = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTit_Publ')]");
                                    Thread.Sleep(100);
                                    if (TituloOb != TituloObEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TituloObEsp + " y el encontrado es: " + TituloOb);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEdi_Publ')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Editorial", true, file);

                                    Thread.Sleep(100);
                                    string Editorial = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEdi_Publ')]");
                                    Thread.Sleep(100);
                                    if (Editorial != EditorialEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EditorialEsp + " y el encontrado es: " + Editorial);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblPub_Isbn')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("ISBN", true, file);

                                    Thread.Sleep(100);
                                    string ISBN = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblPub_Isbn')]");
                                    Thread.Sleep(100);
                                    if (ISBN != ISBNEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ISBNEsp + " y el encontrado es: " + ISBNEsp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblPub_Clas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Clase", true, file);

                                    Thread.Sleep(100);
                                    string Clase = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblPub_Clas')]");
                                    Thread.Sleep(100);
                                    if (Clase != ClaseEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClaseEsp + " y el encontrado es: " + Clase);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecPubl_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha", true, file);

                                    Thread.Sleep(100);
                                    string Fecha = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecPubl_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (Fecha != FechaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEsp + " y el encontrado es: " + Fecha);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    selenium.Click("//a[contains(@id,'btnActualizar')]");

                                    Thread.Sleep(500);
                                    selenium.Screenshot("Requeridos", true, file);

                                    Thread.Sleep(500);

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);

                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_ProyectosyLogrosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ProyectosyLogrosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["EmpreEsp"].ToString().Length != 0 && rows["EmpreEsp"].ToString() != null &&
                                rows["ClientEsp"].ToString().Length != 0 && rows["ClientEsp"].ToString() != null &&
                                rows["NomProEsp"].ToString().Length != 0 && rows["NomProEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["DedicaEsp"].ToString().Length != 0 && rows["DedicaEsp"].ToString() != null &&
                                rows["CiudadEsp"].ToString().Length != 0 && rows["CiudadEsp"].ToString() != null &&
                                rows["DescriptEsp"].ToString().Length != 0 && rows["DescriptEsp"].ToString() != null &&
                                rows["EnfaEsp"].ToString().Length != 0 && rows["EnfaEsp"].ToString() != null &&
                                rows["LogrosEsp"].ToString().Length != 0 && rows["LogrosEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string EmpreEsp = rows["EmpreEsp"].ToString();
                                string ClientEsp = rows["ClientEsp"].ToString();
                                string NomProEsp = rows["NomProEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string DedicaEsp = rows["DedicaEsp"].ToString();
                                string CiudadEsp = rows["CiudadEsp"].ToString();
                                string DescriptEsp = rows["DescriptEsp"].ToString();
                                string EnfaEsp = rows["EnfaEsp"].ToString();
                                string LogrosEsp = rows["LogrosEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    ////Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(2000);


                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Inicio", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empre != EmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpreEsp + " y el encontrado es: " + Empre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCliEnte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cliente", true, file);

                                    Thread.Sleep(100);
                                    string Client = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCliEnte')]");
                                    Thread.Sleep(100);
                                    if (Client != ClientEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClientEsp + " y el encontrado es: " + Client);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomProy')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre del Proyecto", true, file);

                                    Thread.Sleep(100);
                                    string NomPro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomProy')]");
                                    Thread.Sleep(100);
                                    if (NomPro != NomProEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomProEsp + " y el encontrado es: " + NomPro);
                                    }
                                    Thread.Sleep(100);

                                    //for (int i = 0; i < 5; i++)
                                    //{
                                    //    SendKeys.Send("{DOWN}");
                                    //}

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCarProy')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCarProy')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDedTiem')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dedicación en Tiempo", true, file);

                                    Thread.Sleep(100);
                                    string Dedica = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDedTiem')]");
                                    Thread.Sleep(100);
                                    if (Dedica != DedicaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DedicaEsp + " y el encontrado es: " + Dedica);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDIV_TRAB_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad", true, file);

                                    Thread.Sleep(100);
                                    string Ciudad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDIV_TRAB_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (Ciudad != CiudadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadEsp + " y el encontrado es: " + Ciudad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtDES_PROY_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Descripcion del Proyecto", true, file);

                                    Thread.Sleep(100);
                                    string Descript = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtDES_PROY_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Descript != DescriptEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DescriptEsp + " y el encontrado es: " + Descript);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 16; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtENF_TRAB_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Enfasis de Trabajo", true, file);

                                    Thread.Sleep(100);
                                    string Enfa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtENF_TRAB_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Enfa != EnfaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EnfaEsp + " y el encontrado es: " + Enfa);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtLAB_LOGR_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Labores y Logros del Proyecto", true, file);

                                    Thread.Sleep(100);
                                    string Logros = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtLAB_LOGR_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Logros != LogrosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LogrosEsp + " y el encontrado es: " + Logros);
                                    }
                                    Thread.Sleep(100);



                                    ///////////////////////////Validacion//////////////////////////
                                    for (int i = 0; i < 16; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    for (int i = 0; i < 16; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }
                                    for (int i = 0; i < 16; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        int cont = 0;
                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                            if (cont == 7)
                                            {
                                                for (int i = 0; i < 16; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                }
                                            }
                                            cont++;
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_PolizasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_PolizasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["TipoDocEsp"].ToString().Length != 0 && rows["TipoDocEsp"].ToString() != null &&
                                rows["CodEmplEsp"].ToString().Length != 0 && rows["CodEmplEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["SecuenciaEsp"].ToString().Length != 0 && rows["SecuenciaEsp"].ToString() != null &&
                                rows["TipoDocBenEsp"].ToString().Length != 0 && rows["TipoDocBenEsp"].ToString() != null &&
                                rows["CodBenEsp"].ToString().Length != 0 && rows["CodBenEsp"].ToString() != null &&
                                rows["NombreBenEsp"].ToString().Length != 0 && rows["NombreBenEsp"].ToString() != null &&
                                rows["ApeBenEsp"].ToString().Length != 0 && rows["ApeBenEsp"].ToString() != null &&
                                rows["DirBenEsp"].ToString().Length != 0 && rows["DirBenEsp"].ToString() != null &&
                                rows["TelResEsp"].ToString().Length != 0 && rows["TelResEsp"].ToString() != null &&
                                rows["TelMovEsp"].ToString().Length != 0 && rows["TelMovEsp"].ToString() != null &&
                                rows["TelOfiEsp"].ToString().Length != 0 && rows["TelOfiEsp"].ToString() != null &&
                                rows["ParentEsp"].ToString().Length != 0 && rows["ParentEsp"].ToString() != null &&
                                rows["PorcentEsp"].ToString().Length != 0 && rows["PorcentEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string TipoDocEsp = rows["TipoDocEsp"].ToString();
                                string CodEmplEsp = rows["CodEmplEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string SecuenciaEsp = rows["SecuenciaEsp"].ToString();
                                string TipoDocBenEsp = rows["TipoDocBenEsp"].ToString();
                                string CodBenEsp = rows["CodBenEsp"].ToString();
                                string NombreBenEsp = rows["NombreBenEsp"].ToString();
                                string ApeBenEsp = rows["ApeBenEsp"].ToString();
                                string DirBenEsp = rows["DirBenEsp"].ToString();
                                string TelResEsp = rows["TelResEsp"].ToString();
                                string TelMovEsp = rows["TelMovEsp"].ToString();
                                string TelOfiEsp = rows["TelOfiEsp"].ToString();
                                string ParentEsp = rows["ParentEsp"].ToString();
                                string PorcentEsp = rows["PorcentEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(500);

                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(1000);

                                    //selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnNuevoBeneficiario')]");
                                    //Thread.Sleep(500);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);

                                    ////Validación emergentes Boton Regresar
                                    //string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    //Thread.Sleep(100);
                                    //if (Regresar != RegresarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    //}
                                    //Thread.Sleep(2000);

                                    //////Validación emergentes Boton Guardar
                                    //string Guardar = selenium.EmergenteBotones("ctl00_btnGuardar");
                                    //Thread.Sleep(100);
                                    //if (Guardar != GuardarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    //}
                                    //Thread.Sleep(2000);

                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnNuevoBeneficiario')]");
                                    Thread.Sleep(500);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("TIpo de Documento", true, file);

                                    Thread.Sleep(100);
                                    string TipoDoc = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocu')]");
                                    Thread.Sleep(100);
                                    if (TipoDoc != TipoDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocEsp + " y el encontrado es: " + TipoDoc);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpl = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (CodEmpl != CodEmplEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmplEsp + " y el encontrado es: " + CodEmpl);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblsecuen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Secuencial", true, file);

                                    Thread.Sleep(100);
                                    string Secuencia = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblsecuen')]");
                                    Thread.Sleep(100);
                                    if (Secuencia != SecuenciaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SecuenciaEsp + " y el encontrado es: " + Secuencia);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocuBen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("TIpo de Documento Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string TipoDocBen = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocuBen')]");
                                    Thread.Sleep(100);
                                    if (TipoDocBen != TipoDocBenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocBenEsp + " y el encontrado es: " + TipoDocBen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodBen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string CodBen = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodBen')]");
                                    Thread.Sleep(100);
                                    if (CodBen != CodBenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodBenEsp + " y el encontrado es: " + CodBen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomBen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string NombreBen = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomBen')]");
                                    Thread.Sleep(100);
                                    if (NombreBen != NombreBenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreBenEsp + " y el encontrado es: " + NombreBen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApeBen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellidos Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string ApeBen = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApeBen')]");
                                    Thread.Sleep(100);
                                    if (ApeBen != ApeBenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApeBenEsp + " y el encontrado es: " + ApeBen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_LblDirBen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Direccion Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string DirBen = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_LblDirBen')]");
                                    Thread.Sleep(100);
                                    if (DirBen != DirBenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DirBenEsp + " y el encontrado es: " + DirBen);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_LblTelCasa')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Telefono Residencia", true, file);

                                    Thread.Sleep(100);
                                    string TelRes = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_LblTelCasa')]");
                                    Thread.Sleep(100);
                                    if (TelRes != TelResEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelResEsp + " y el encontrado es: " + TelRes);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_LblTelMovil')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Telefono Movil", true, file);

                                    Thread.Sleep(100);
                                    string TelMov = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_LblTelMovil')]");
                                    Thread.Sleep(100);
                                    if (TelMov != TelMovEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelMovEsp + " y el encontrado es: " + TelMov);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_LblTelOfic')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Telefono Oficina", true, file);

                                    Thread.Sleep(100);
                                    string TelOfi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_LblTelOfic')]");
                                    Thread.Sleep(100);
                                    if (TelOfi != TelOfiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelOfiEsp + " y el encontrado es: " + TelOfi);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_LblParen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Parentesco Beneficiario", true, file);

                                    Thread.Sleep(100);
                                    string Parent = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_LblParen')]");
                                    Thread.Sleep(100);
                                    if (Parent != ParentEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ParentEsp + " y el encontrado es: " + Parent);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_LblPorBene')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Porcentaje Asignacion", true, file);

                                    Thread.Sleep(100);
                                    string Porcent = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_LblPorBene')]");
                                    Thread.Sleep(100);
                                    if (Porcent != PorcentEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PorcentEsp + " y el encontrado es: " + Porcent);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        int cont = 0;
                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                            if (cont == 5)
                                            {
                                                for (int i = 0; i < 5; i++)
                                                {
                                                    SendKeys.Send("{DOWN}");
                                                }
                                            }
                                            cont++;
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_RolesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_RolesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ManualEsp"].ToString().Length != 0 && rows["ManualEsp"].ToString() != null &&

                                rows["CodRolEsp"].ToString().Length != 0 && rows["CodRolEsp"].ToString() != null &&
                                rows["NomRolEsp"].ToString().Length != 0 && rows["NomRolEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ManualEsp = rows["ManualEsp"].ToString();

                                string CodRolEsp = rows["CodRolEsp"].ToString();
                                string NomRolEsp = rows["NomRolEsp"].ToString();

                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);


                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodManu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Manuales", true, file);

                                    Thread.Sleep(100);
                                    string Manual = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodManu')]");
                                    Thread.Sleep(100);
                                    if (Manual != ManualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ManualEsp + " y el encontrado es: " + Manual);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo de Rol", true, file);

                                    Thread.Sleep(100);
                                    string CodRol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(100);
                                    if (CodRol != CodRolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodRolEsp + " y el encontrado es: " + CodRol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre de Rol", true, file);

                                    Thread.Sleep(100);
                                    string NomRol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(100);
                                    if (NomRol != NomRolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomRolEsp + " y el encontrado es: " + NomRol);
                                    }
                                    Thread.Sleep(100);



                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_ListadoRolesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ListadoRolesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["CodEmpreEsp"].ToString().Length != 0 && rows["CodEmpreEsp"].ToString() != null &&
                                rows["ManualEsp"].ToString().Length != 0 && rows["ManualEsp"].ToString() != null &&
                                rows["ConsulDenoEsp"].ToString().Length != 0 && rows["ConsulDenoEsp"].ToString() != null &&
                                rows["CodRolEsp"].ToString().Length != 0 && rows["CodRolEsp"].ToString() != null &&
                                rows["NomRolEsp"].ToString().Length != 0 && rows["NomRolEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["ConsulProEsp"].ToString().Length != 0 && rows["ConsulProEsp"].ToString() != null &&
                                rows["ConsulEduEsp"].ToString().Length != 0 && rows["ConsulEduEsp"].ToString() != null &&
                                rows["IndiRolEsp"].ToString().Length != 0 && rows["IndiRolEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string CodEmpreEsp = rows["CodEmpreEsp"].ToString();
                                string ManualEsp = rows["ManualEsp"].ToString();
                                string ConsulDenoEsp = rows["ConsulDenoEsp"].ToString();
                                string CodRolEsp = rows["CodRolEsp"].ToString();
                                string NomRolEsp = rows["NomRolEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string ConsulProEsp = rows["ConsulProEsp"].ToString();
                                string ConsulEduEsp = rows["ConsulEduEsp"].ToString();
                                string IndiRolEsp = rows["IndiRolEsp"].ToString();
                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);


                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string CodEmpre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (CodEmpre != CodEmpreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEmpreEsp + " y el encontrado es: " + CodEmpre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodManu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Manuales", true, file);

                                    Thread.Sleep(100);
                                    string Manual = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodManu')]");
                                    Thread.Sleep(100);
                                    if (Manual != ManualEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ManualEsp + " y el encontrado es: " + Manual);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Denominacion del Cargo", true, file);

                                    Thread.Sleep(100);
                                    string ConsulDeno = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl')]");
                                    Thread.Sleep(100);
                                    if (ConsulDeno != ConsulDenoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulDenoEsp + " y el encontrado es: " + ConsulDeno);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string CodRol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(100);
                                    if (CodRol != CodRolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodRolEsp + " y el encontrado es: " + CodRol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel de Cargo", true, file);

                                    Thread.Sleep(100);
                                    string NomRol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(100);
                                    if (NomRol != NomRolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomRolEsp + " y el encontrado es: " + NomRol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIni_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial Vigencia", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecIni_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFin_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final Vigencia", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFin_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl3')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Proceso", true, file);

                                    Thread.Sleep(100);
                                    string ConsulPro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl3')]");
                                    Thread.Sleep(100);
                                    if (ConsulPro != ConsulProEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulProEsp + " y el encontrado es: " + ConsulPro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl1')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar por Educacion Formal", true, file);

                                    Thread.Sleep(100);
                                    string ConsulEdu = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCedEmpl1')]");
                                    Thread.Sleep(100);
                                    if (ConsulEdu != ConsulEduEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsulEduEsp + " y el encontrado es: " + ConsulEdu);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIndROL')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Indicador del Rol", true, file);

                                    Thread.Sleep(100);
                                    string IndiRol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIndROL')]");
                                    Thread.Sleep(100);
                                    if (IndiRol != IndiRolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IndiRolEsp + " y el encontrado es: " + IndiRol);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_AdministracionActivosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_AdministracionActivosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["IdentifEsp"].ToString().Length != 0 && rows["IdentifEsp"].ToString() != null &&
                                rows["NomApEsp"].ToString().Length != 0 && rows["NomApEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["DependEsp"].ToString().Length != 0 && rows["DependEsp"].ToString() != null &&
                                rows["CentroEsp"].ToString().Length != 0 && rows["CentroEsp"].ToString() != null &&
                                rows["ConfirmaEsp"].ToString().Length != 0 && rows["ConfirmaEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string IdentifEsp = rows["IdentifEsp"].ToString();
                                string NomApEsp = rows["NomApEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();
                                string DependEsp = rows["DependEsp"].ToString();
                                string CentroEsp = rows["CentroEsp"].ToString();
                                string ConfirmaEsp = rows["ConfirmaEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();
                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);


                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string Identif = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identif != IdentifEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentifEsp + " y el encontrado es: " + Identif);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres y Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string NomAp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNmbEmpl')]");
                                    Thread.Sleep(100);
                                    if (NomAp != NomApEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomApEsp + " y el encontrado es: " + NomAp);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel de Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Nivel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDependencia')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dependencia", true, file);

                                    Thread.Sleep(100);
                                    string Depend = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDependencia')]");
                                    Thread.Sleep(100);
                                    if (Depend != DependEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DependEsp + " y el encontrado es: " + Depend);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string Centro = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(100);
                                    if (Centro != CentroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroEsp + " y el encontrado es: " + Centro);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConAcfi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Confirmacion de Activos Fijo", true, file);

                                    Thread.Sleep(100);
                                    string Confirma = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConAcfi')]");
                                    Thread.Sleep(100);
                                    if (Confirma != ConfirmaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConfirmaEsp + " y el encontrado es: " + Confirma);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observ = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    ///////////////////////////Validacion//////////////////////////


                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_ExamenesMedicosNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ExamenesMedicosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["DetalleEsp"].ToString().Length != 0 && rows["DetalleEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string DetalleEsp = rows["DetalleEsp"].ToString();
                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(3000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Detalle", true, file);

                                    Thread.Sleep(100);
                                    string Detalle = selenium.Emergente("//span[contains(@id,'ctl00_lblMenMarco')]");
                                    Thread.Sleep(100);
                                    if (Detalle != DetalleEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DetalleEsp + " y el encontrado es: " + Detalle);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    //ChromeDriver driver = selenium.returnDriver();
                                    //List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina = new List<IWebElement>();
                                    //Thread.Sleep(800);

                                    //elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));

                                    //Thread.Sleep(200);

                                    //selenium.Screenshot("Campos Requeridos", true, file);

                                    //Thread.Sleep(200);


                                    //if (elementList.Count > 0)
                                    //{

                                    //    elementList[0].Click();
                                    //    Thread.Sleep(500);
                                    //    selenium.Click("//a[@id='ctl00_btnCerrar']");
                                    //    Thread.Sleep(2000);
                                    //    selenium.AcceptAlert();
                                    //    Thread.Sleep(500);
                                    //    elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    //    if (elementListPagina.Count > 0)
                                    //    {
                                    //        foreach (IWebElement pageEle in elementListPagina)
                                    //        {

                                    //            Thread.Sleep(500);
                                    //            SendKeys.Send("{TAB}");
                                    //            selenium.Screenshot("TAB", true, file);

                                    //            Thread.Sleep(100);

                                    //        }

                                    //    }

                                    //}


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_MisDatosBasicosAuxNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisDatosBasicosAuxNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["LugarExpEsp"].ToString().Length != 0 && rows["LugarExpEsp"].ToString() != null &&

                                rows["FechaExpEsp"].ToString().Length != 0 && rows["FechaExpEsp"].ToString() != null &&
                                rows["PaisNacEsp"].ToString().Length != 0 && rows["PaisNacEsp"].ToString() != null &&
                                rows["DireccionEsp"].ToString().Length != 0 && rows["DireccionEsp"].ToString() != null &&
                                rows["BarrioEsp"].ToString().Length != 0 && rows["BarrioEsp"].ToString() != null &&
                                rows["IdiomasEsp"].ToString().Length != 0 && rows["IdiomasEsp"].ToString() != null &&
                                rows["EmailEsp"].ToString().Length != 0 && rows["EmailEsp"].ToString() != null &&
                                rows["TelefonoEsp"].ToString().Length != 0 && rows["TelefonoEsp"].ToString() != null &&
                                rows["TelefonoCelEsp"].ToString().Length != 0 && rows["TelefonoCelEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                rows["EstadoCivilEsp"].ToString().Length != 0 && rows["EstadoCivilEsp"].ToString() != null &&
                                rows["PerfilEsp"].ToString().Length != 0 && rows["PerfilEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string LugarExpEsp = rows["LugarExpEsp"].ToString();
                                string FechaExpEsp = rows["FechaExpEsp"].ToString();
                                string PaisNacEsp = rows["PaisNacEsp"].ToString();
                                string BarrioEsp = rows["BarrioEsp"].ToString();
                                string IdiomasEsp = rows["IdiomasEsp"].ToString();
                                string EmailEsp = rows["EmailEsp"].ToString();
                                string TelefonoEsp = rows["TelefonoEsp"].ToString();
                                string TelefonoCelEsp = rows["TelefonoCelEsp"].ToString();
                                string DireccionEsp = rows["DireccionEsp"].ToString();
                                string EstadoCivilEsp = rows["EstadoCivilEsp"].ToString();
                                string url2 = rows["url2"].ToString();
                                string PerfilEsp = rows["PerfilEsp"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("Titulos Descriptivos", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivExpe_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad Expedicion Documento", true, file);

                                    Thread.Sleep(100);
                                    string LugarExp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivExpe_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (LugarExp != LugarExpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LugarExpEsp + " y el encontrado es: " + LugarExp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecExpe_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Expedición del Documento de Identidad", true, file);

                                    Thread.Sleep(100);
                                    string FechaExp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecExpe_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaExp != FechaExpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaExpEsp + " y el encontrado es: " + FechaExp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTelResi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Teléfono", true, file);

                                    Thread.Sleep(100);
                                    string Telefono = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTelResi')]");
                                    Thread.Sleep(100);
                                    if (Telefono != TelefonoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelefonoEsp + " y el encontrado es: " + Telefono);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTelMovi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Teléfono Móvil", true, file);

                                    Thread.Sleep(100);
                                    string TelefonoCel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTelMovi')]");
                                    Thread.Sleep(100);
                                    if (TelefonoCel != TelefonoCelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelefonoCelEsp + " y el encontrado es: " + TelefonoCel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivResi_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad de Residencia", true, file);

                                    Thread.Sleep(100);
                                    string PaisNac = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivResi_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (PaisNac != PaisNacEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PaisNacEsp + " y el encontrado es: " + PaisNac);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDirResi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dirección", true, file);

                                    Thread.Sleep(100);
                                    string Direccion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDirResi')]");
                                    Thread.Sleep(100);
                                    if (Direccion != DireccionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DireccionEsp + " y el encontrado es: " + Direccion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblBarResiC')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Barrio", true, file);

                                    Thread.Sleep(100);
                                    string Barrio = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblBarResiC')]");
                                    Thread.Sleep(100);
                                    if (Barrio != BarrioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + BarrioEsp + " y el encontrado es: " + Barrio);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdiomas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Idomas", true, file);

                                    Thread.Sleep(100);
                                    string Idiomas = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdiomas')]");
                                    Thread.Sleep(100);
                                    if (Idiomas != IdiomasEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdiomasEsp + " y el encontrado es: " + Idiomas);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEeeMail')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Email", true, file);

                                    Thread.Sleep(100);
                                    string Email = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEeeMail')]");
                                    Thread.Sleep(100);
                                    if (Email != EmailEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmailEsp + " y el encontrado es: " + Email);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 10; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEstCivi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estado Civil", true, file);

                                    Thread.Sleep(100);
                                    string EstadoCivil = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEstCivi')]");
                                    Thread.Sleep(100);
                                    if (EstadoCivil != EstadoCivilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoCivilEsp + " y el encontrado es: " + EstadoCivil);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlPerFile_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Perfil", true, file);

                                    Thread.Sleep(100);
                                    string Perfil = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlPerFile_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Perfil != PerfilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerfilEsp + " y el encontrado es: " + Perfil);
                                    }
                                    Thread.Sleep(100);
                                    for (int i = 0; i < 10; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }
                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));


                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        selenium.Screenshot("Campos Requeridos", true, file);


                                        Thread.Sleep(500);

                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));
                                        elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(800);

                                                if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                                {
                                                    if (pageEle.Displayed && pageEle.Enabled)
                                                    {
                                                        String id = pageEle.GetAttribute("id");
                                                        if (id == "ctl00_ContenidoPagina_KCtrlFecExpe_txtFecha" || id == "ctl00_ContenidoPagina_KCtrlFecNaci_txtFecha" || id == "ctl00_ContenidoPagina_txtDirResi" || id == "ctl00_ContenidoPagina_KCtrlFecGrad_txtFecha ")
                                                        {
                                                            //errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + id + " no debe permitir la opcion de tabular");
                                                        }

                                                        pageEle.SendKeys(OpenQA.Selenium.Keys.Tab);
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);

                                                    }
                                                    else
                                                    {
                                                        SendKeys.Send("{TAB}");
                                                        selenium.Screenshot("TAB", true, file);

                                                        Thread.Sleep(100);
                                                    }
                                                }
                                            }
                                        }

                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisIdiomasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisIdiomasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["IdiomaEsp"].ToString().Length != 0 && rows["IdiomaEsp"].ToString() != null &&
                                rows["HablaEsp"].ToString().Length != 0 && rows["HablaEsp"].ToString() != null &&
                                rows["LeeEsp"].ToString().Length != 0 && rows["LeeEsp"].ToString() != null &&
                                rows["EscribeEsp"].ToString().Length != 0 && rows["EscribeEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string IdiomaEsp = rows["IdiomaEsp"].ToString();
                                string HablaEsp = rows["HablaEsp"].ToString();
                                string LeeEsp = rows["LeeEsp"].ToString();
                                string EscribeEsp = rows["EscribeEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();
                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón RetornarEsp es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdioma')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Idioma", true, file);

                                    Thread.Sleep(100);
                                    string Idioma = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdioma')]");
                                    Thread.Sleep(100);
                                    if (Idioma != IdiomaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdiomaEsp + " y el encontrado es: " + Idioma);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblLoHabla')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Lo Habla", true, file);

                                    Thread.Sleep(100);
                                    string Habla = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblLoHabla')]");
                                    Thread.Sleep(100);
                                    if (Habla != HablaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + HablaEsp + " y el encontrado es: " + Habla);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblLoLee')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Lo Lee", true, file);

                                    Thread.Sleep(100);
                                    string Lee = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblLoLee')]");
                                    Thread.Sleep(100);
                                    if (Lee != LeeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LeeEsp + " y el encontrado es: " + Lee);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblLoEscribe')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Lo Escribe", true, file);

                                    Thread.Sleep(100);
                                    string Escribe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblLoEscribe')]");
                                    Thread.Sleep(100);
                                    if (Escribe != EscribeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EscribeEsp + " y el encontrado es: " + Escribe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observ = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblObsErva')]");
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    Thread.Sleep(800);

                                    elementList.AddRange(driver.FindElements(By.XPath("//a[@id='btnGuardar']")));

                                    Thread.Sleep(200);

                                    selenium.Screenshot("Campos Requeridos", true, file);

                                    Thread.Sleep(200);

                                    if (elementList.Count > 0)
                                    {

                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        selenium.AcceptAlert();
                                        Thread.Sleep(500);
                                        elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                        if (elementListPagina.Count > 0)
                                        {
                                            foreach (IWebElement pageEle in elementListPagina)
                                            {

                                                Thread.Sleep(500);
                                                SendKeys.Send("{TAB}");
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);

                                            }

                                        }

                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_frmBeSolicColNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_frmBeSolicColNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["RetornarEsp"].ToString().Length != 0 && rows["RetornarEsp"].ToString() != null &&
                                rows["NivEscEsp"].ToString().Length != 0 && rows["NivEscEsp"].ToString() != null &&
                                rows["GradEscEsp"].ToString().Length != 0 && rows["GradEscEsp"].ToString() != null &&
                                rows["InstituEsp"].ToString().Length != 0 && rows["InstituEsp"].ToString() != null &&
                                rows["CiudadInEsp"].ToString().Length != 0 && rows["CiudadInEsp"].ToString() != null &&
                                rows["RepGradEsp"].ToString().Length != 0 && rows["RepGradEsp"].ToString() != null &&
                                rows["JornadaEsp"].ToString().Length != 0 && rows["JornadaEsp"].ToString() != null &&
                                rows["ModAsisEsp"].ToString().Length != 0 && rows["ModAsisEsp"].ToString() != null &&
                                rows["PerAcadEsp"].ToString().Length != 0 && rows["PerAcadEsp"].ToString() != null &&
                                rows["EstExtEsp"].ToString().Length != 0 && rows["EstExtEsp"].ToString() != null &&
                                rows["MonedaEsp"].ToString().Length != 0 && rows["MonedaEsp"].ToString() != null &&
                                rows["TRMEsp"].ToString().Length != 0 && rows["TRMEsp"].ToString() != null &&
                                rows["BecaREsp"].ToString().Length != 0 && rows["BecaREsp"].ToString() != null &&
                                rows["ValorBEsp"].ToString().Length != 0 && rows["ValorBEsp"].ToString() != null &&

                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string RetornarEsp = rows["RetornarEsp"].ToString();
                                string NivEscEsp = rows["NivEscEsp"].ToString();
                                string GradEscEsp = rows["GradEscEsp"].ToString();
                                string InstituEsp = rows["InstituEsp"].ToString();
                                string CiudadInEsp = rows["CiudadInEsp"].ToString();
                                string RepGradEsp = rows["RepGradEsp"].ToString();
                                string JornadaEsp = rows["JornadaEsp"].ToString();
                                string ModAsisEsp = rows["ModAsisEsp"].ToString();
                                string PerAcadEsp = rows["PerAcadEsp"].ToString();
                                string EstExtEsp = rows["EstExtEsp"].ToString();
                                string MonedaEsp = rows["MonedaEsp"].ToString();
                                string TRMEsp = rows["TRMEsp"].ToString();
                                string BecaREsp = rows["BecaREsp"].ToString();
                                string ValorBEsp = rows["ValorBEsp"].ToString();
                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    //string Retornar = selenium.EmergenteBotones("ct100_btnRegresar");
                                    //Thread.Sleep(100);
                                    //if (Retornar != RetornarEsp)
                                    //{
                                    //    errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón RetornarEsp es incorrecto, el esperado es: " + RetornarEsp + " y el encontrado es: " + Retornar);
                                    //}
                                    //Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel de Escolaridad", true, file);

                                    Thread.Sleep(100);
                                    string NivEsc = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodNive')]");
                                    Thread.Sleep(100);
                                    if (NivEsc != NivEscEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivEscEsp + " y el encontrado es: " + NivEsc);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodGrae')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Grado Escolaridad", true, file);

                                    Thread.Sleep(100);
                                    string GradEsc = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodGrae')]");
                                    Thread.Sleep(100);
                                    if (GradEsc != GradEscEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GradEscEsp + " y el encontrado es: " + GradEsc);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodIned')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Institucion", true, file);

                                    Thread.Sleep(100);
                                    string Institu = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblCodIned')]");
                                    Thread.Sleep(100);
                                    if (Institu != InstituEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InstituEsp + " y el encontrado es: " + Institu);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMunicipioInst')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad Institucion", true, file);

                                    Thread.Sleep(100);
                                    string CiudadIn = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMunicipioInst')]");
                                    Thread.Sleep(100);
                                    if (CiudadIn != CiudadInEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiudadInEsp + " y el encontrado es: " + CiudadIn);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblRepGrad')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Repite Grado", true, file);

                                    Thread.Sleep(100);
                                    string RepGrad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblRepGrad')]");
                                    Thread.Sleep(100);
                                    if (RepGrad != RepGradEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RepGradEsp + " y el encontrado es: " + RepGrad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblJorNada')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jornada", true, file);

                                    Thread.Sleep(100);
                                    string Jornada = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblJorNada')]");
                                    Thread.Sleep(100);
                                    if (Jornada != JornadaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JornadaEsp + " y el encontrado es: " + Jornada);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblModAlid')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Modalidad Asistencia", true, file);

                                    Thread.Sleep(100);
                                    string ModAsis = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblModAlid')]");
                                    Thread.Sleep(100);
                                    if (ModAsis != ModAsisEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ModAsisEsp + " y el encontrado es: " + ModAsis);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblPerEsco')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Periodo Academico", true, file);

                                    Thread.Sleep(100);
                                    string PerAcad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblPerEsco')]");
                                    Thread.Sleep(100);
                                    if (PerAcad != PerAcadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerAcadEsp + " y el encontrado es: " + PerAcad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblEstExte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estudia en el Exterior", true, file);

                                    Thread.Sleep(100);
                                    string EstExt = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblEstExte')]");
                                    Thread.Sleep(100);
                                    if (EstExt != EstExtEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstExtEsp + " y el encontrado es: " + EstExt);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMonEda')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Moneda", true, file);

                                    Thread.Sleep(100);
                                    string Moneda = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblMonEda')]");
                                    Thread.Sleep(100);
                                    if (Moneda != MonedaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MonedaEsp + " y el encontrado es: " + Moneda);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblVlrTmr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor TRM", true, file);

                                    Thread.Sleep(100);
                                    string TRM = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblVlrTmr')]");
                                    Thread.Sleep(100);
                                    if (TRM != TRMEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TRMEsp + " y el encontrado es: " + TRM);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblBecRend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Becado por Rendimiento", true, file);

                                    Thread.Sleep(100);
                                    string BecaR = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblBecRend')]");
                                    Thread.Sleep(100);
                                    if (BecaR != BecaREsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + BecaREsp + " y el encontrado es: " + BecaR);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblValBeca')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Valor Beca", true, file);

                                    Thread.Sleep(100);
                                    string ValorB = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_tcBeSolic_TabPDatos_lblValBeca')]");
                                    Thread.Sleep(100);
                                    if (ValorB != ValorBEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ValorBEsp + " y el encontrado es: " + ValorB);
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    List<IWebElement> elementListPagina = new List<IWebElement>();
                                    List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);

                                    elementListPagina.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementListPagina.Count > 0)
                                    {
                                        //int cont = 0;
                                        foreach (IWebElement pageEle in elementListPagina)
                                        {
                                            // cont++;
                                            Thread.Sleep(800);

                                            if (pageEle.TagName == "select" || pageEle.TagName == "input")
                                            {
                                                if (pageEle.Displayed && pageEle.Enabled)
                                                {
                                                    String id = pageEle.GetAttribute("id");
                                                    if (id == "ctl00_ContenidoPagina_tcBeSolic_TabPDatos_txtMunicipioInst" || id == "ctl00_ContenidoPagina_tcBeSolic_TabPDatos_ddlCodMone" || id == "ctl00_ContenidoPagina_tcBeSolic_TabPDatos_txtValTarm" || id == "ctl00_ContenidoPagina_tcBeSolic_TabPDatos_txtValBeca")
                                                    {
                                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El control de ID " + id + " no debe permitir la opcion de tabular");
                                                    }

                                                    SendKeys.Send("{TAB}");
                                                    selenium.Screenshot("TAB", true, file);

                                                    Thread.Sleep(100);

                                                }
                                                else
                                                {
                                                    SendKeys.Send("{TAB}");
                                                    selenium.Screenshot("TAB", true, file);

                                                    Thread.Sleep(100);
                                                }
                                            }
                                            //if (cont >= 30)
                                            //{
                                            //    break;
                                            //}
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_ReporteFinancieroNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReporteFinancieroNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["TipoContEsp"].ToString().Length != 0 && rows["TipoContEsp"].ToString() != null &&
                                rows["FechaIniEsp"].ToString().Length != 0 && rows["FechaIniEsp"].ToString() != null &&
                                rows["FechaFinEsp"].ToString().Length != 0 && rows["FechaFinEsp"].ToString() != null &&
                                rows["OpRepEsp"].ToString().Length != 0 && rows["OpRepEsp"].ToString() != null &&
                                rows["IdentiEsp"].ToString().Length != 0 && rows["IdentiEsp"].ToString() != null &&
                                rows["CentroCostEsp"].ToString().Length != 0 && rows["CentroCostEsp"].ToString() != null &&
                                rows["ElePepEsp"].ToString().Length != 0 && rows["ElePepEsp"].ToString() != null &&
                                rows["CuentaEsp"].ToString().Length != 0 && rows["CuentaEsp"].ToString() != null &&
                                rows["TipRepEsp"].ToString().Length != 0 && rows["TipRepEsp"].ToString() != null &&
                                rows["LimIdEsp"].ToString().Length != 0 && rows["LimIdEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string TipoContEsp = rows["TipoContEsp"].ToString();
                                string FechaIniEsp = rows["FechaIniEsp"].ToString();
                                string FechaFinEsp = rows["FechaFinEsp"].ToString();
                                string OpRepEsp = rows["OpRepEsp"].ToString();
                                string IdentiEsp = rows["IdentiEsp"].ToString();
                                string CentroCostEsp = rows["CentroCostEsp"].ToString();
                                string ElePepEsp = rows["ElePepEsp"].ToString();
                                string CuentaEsp = rows["CuentaEsp"].ToString();
                                string TipRepEsp = rows["TipRepEsp"].ToString();
                                string LimIdEsp = rows["LimIdEsp"].ToString();
                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Contabilización", true, file);

                                    Thread.Sleep(100);
                                    string TipoCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCont')]");
                                    Thread.Sleep(100);
                                    if (TipoCont != TipoContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoContEsp + " y el encontrado es: " + TipoCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha de Inicio", true, file);

                                    Thread.Sleep(100);
                                    string FechaIni = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecInic_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaIni != FechaIniEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaIniEsp + " y el encontrado es: " + FechaIni);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    Thread.Sleep(100);
                                    string FechaFin = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecFina_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaFin != FechaFinEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaFinEsp + " y el encontrado es: " + FechaFin);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblOpcRep')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Opcion de Reportes", true, file);

                                    Thread.Sleep(100);
                                    string OpRep = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblOpcRep')]");
                                    Thread.Sleep(100);
                                    if (OpRep != OpRepEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + OpRepEsp + " y el encontrado es: " + OpRep);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string Identi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identi != IdentiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentiEsp + " y el encontrado es: " + Identi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCost = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(100);
                                    if (CentroCost != CentroCostEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCostEsp + " y el encontrado es: " + CentroCost);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCamAdi3')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Elemento PEP", true, file);

                                    Thread.Sleep(100);
                                    string ElePep = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCamAdi3')]");
                                    Thread.Sleep(100);
                                    if (ElePep != ElePepEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ElePepEsp + " y el encontrado es: " + ElePep);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCuen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cuenta Contable", true, file);

                                    Thread.Sleep(100);
                                    string Cuenta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCuen')]");
                                    Thread.Sleep(100);
                                    if (Cuenta != CuentaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CuentaEsp + " y el encontrado es: " + Cuenta);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipoRepo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Reportes", true, file);

                                    Thread.Sleep(100);
                                    string TipRep = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipoRepo')]");
                                    Thread.Sleep(100);
                                    if (TipRep != TipRepEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipRepEsp + " y el encontrado es: " + TipRep);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblMaxCed')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Limite de identificaciones", true, file);

                                    Thread.Sleep(100);
                                    string LimId = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblMaxCed')]");
                                    Thread.Sleep(100);
                                    if (LimId != LimIdEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + LimIdEsp + " y el encontrado es: " + LimId);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_NecesidadesDeFormacionNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_NecesidadesDeFormacionNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["ActualizarEsp"].ToString().Length != 0 && rows["ActualizarEsp"].ToString() != null &&
                                rows["NumContEsp"].ToString().Length != 0 && rows["NumContEsp"].ToString() != null &&
                                rows["IdentiEsp"].ToString().Length != 0 && rows["IdentiEsp"].ToString() != null &&
                                rows["CodInteEsp"].ToString().Length != 0 && rows["CodInteEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["ApellidoEsp"].ToString().Length != 0 && rows["ApellidoEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["CargoEsp"].ToString().Length != 0 && rows["CargoEsp"].ToString() != null &&
                                rows["FechaInsEsp"].ToString().Length != 0 && rows["FechaInsEsp"].ToString() != null &&
                                rows["ConsecutivoEsp"].ToString().Length != 0 && rows["ConsecutivoEsp"].ToString() != null &&
                                rows["EstSoliEsp"].ToString().Length != 0 && rows["EstSoliEsp"].ToString() != null &&
                                rows["EstBreEsp"].ToString().Length != 0 && rows["EstBreEsp"].ToString() != null &&
                                rows["CodRegEsp"].ToString().Length != 0 && rows["CodRegEsp"].ToString() != null &&
                                rows["CodReqEsp"].ToString().Length != 0 && rows["CodReqEsp"].ToString() != null &&
                                rows["CodEspeEsp"].ToString().Length != 0 && rows["CodEspeEsp"].ToString() != null &&
                                rows["CodCurEsp"].ToString().Length != 0 && rows["CodCurEsp"].ToString() != null &&
                                rows["OtroCursoEsp"].ToString().Length != 0 && rows["OtroCursoEsp"].ToString() != null &&
                                rows["PerspecEsp"].ToString().Length != 0 && rows["PerspecEsp"].ToString() != null &&
                                rows["ObjAsoEsp"].ToString().Length != 0 && rows["ObjAsoEsp"].ToString() != null &&
                                rows["JustificEsp"].ToString().Length != 0 && rows["JustificEsp"].ToString() != null &&
                                rows["ObservEsp"].ToString().Length != 0 && rows["ObservEsp"].ToString() != null &&
                                rows["FiltroNEsp"].ToString().Length != 0 && rows["FiltroNEsp"].ToString() != null &&
                                rows["FiltroApEsp"].ToString().Length != 0 && rows["FiltroApEsp"].ToString() != null &&
                                rows["SoporteEsp"].ToString().Length != 0 && rows["SoporteEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string ActualizarEsp = rows["ActualizarEsp"].ToString();
                                string NumContEsp = rows["NumContEsp"].ToString();
                                string IdentiEsp = rows["IdentiEsp"].ToString();
                                string CodInteEsp = rows["CodInteEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string ApellidoEsp = rows["ApellidoEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string CargoEsp = rows["CargoEsp"].ToString();
                                string FechaInsEsp = rows["FechaInsEsp"].ToString();
                                string ConsecutivoEsp = rows["ConsecutivoEsp"].ToString();
                                string EstSoliEsp = rows["EstSoliEsp"].ToString();
                                string EstBreEsp = rows["EstBreEsp"].ToString();
                                string CodRegEsp = rows["CodRegEsp"].ToString();
                                string CodReqEsp = rows["CodReqEsp"].ToString();
                                string CodEspeEsp = rows["CodEspeEsp"].ToString();
                                string CodCurEsp = rows["CodCurEsp"].ToString();
                                string OtroCursoEsp = rows["OtroCursoEsp"].ToString();
                                string PerspecEsp = rows["PerspecEsp"].ToString();
                                string ObjAsoEsp = rows["ObjAsoEsp"].ToString();
                                string JustificEsp = rows["JustificEsp"].ToString();
                                string ObservEsp = rows["ObservEsp"].ToString();
                                string FiltroNEsp = rows["FiltroNEsp"].ToString();
                                string FiltroApEsp = rows["FiltroApEsp"].ToString();
                                string SoporteEsp = rows["SoporteEsp"].ToString();
                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Actualizar
                                    string Actualizar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Actualizar != ActualizarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + ActualizarEsp + " y el encontrado es: " + Actualizar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero de Contrato", true, file);

                                    Thread.Sleep(100);
                                    string NumCont = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNroCont')]");
                                    Thread.Sleep(100);
                                    if (NumCont != NumContEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumContEsp + " y el encontrado es: " + NumCont);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string Identi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identi != IdentiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentiEsp + " y el encontrado es: " + Identi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo Interno", true, file);

                                    Thread.Sleep(100);
                                    string CodInte = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodInte')]");
                                    Thread.Sleep(100);
                                    if (CodInte != CodInteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodInteEsp + " y el encontrado es: " + CodInte);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Apellido", true, file);

                                    Thread.Sleep(100);
                                    string Apellido = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblApeEmpl')]");
                                    Thread.Sleep(100);
                                    if (Apellido != ApellidoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ApellidoEsp + " y el encontrado es: " + Apellido);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Centro de Costo", true, file);

                                    Thread.Sleep(100);
                                    string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCcos')]");
                                    Thread.Sleep(100);
                                    if (CentroCos != CentroCosEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo", true, file);

                                    Thread.Sleep(100);
                                    string Cargo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCarg')]");
                                    Thread.Sleep(100);
                                    if (Cargo != CargoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoEsp + " y el encontrado es: " + Cargo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInsc')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inscripcion", true, file);

                                    Thread.Sleep(100);
                                    string FechaIns = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFecInsc')]");
                                    Thread.Sleep(100);
                                    if (FechaIns != FechaInsEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaInsEsp + " y el encontrado es: " + FechaIns);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtGene')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consecutivo", true, file);

                                    Thread.Sleep(100);
                                    string Consecutivo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblRmtGene')]");
                                    Thread.Sleep(100);
                                    if (Consecutivo != ConsecutivoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConsecutivoEsp + " y el encontrado es: " + Consecutivo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEstSoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estado de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string EstSoli = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEstSoli')]");
                                    Thread.Sleep(100);
                                    if (EstSoli != EstSoliEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstSoliEsp + " y el encontrado es: " + EstSoli);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEstAdos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Municipio Nacimiento", true, file);

                                    Thread.Sleep(100);
                                    string EstBre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEstAdos')]");
                                    Thread.Sleep(100);
                                    if (EstBre != EstBreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstBreEsp + " y el encontrado es: " + EstBre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodRegi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro", true, file);

                                    Thread.Sleep(100);
                                    string CodReg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodRegi')]");
                                    Thread.Sleep(100);
                                    if (CodReg != CodRegEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodRegEsp + " y el encontrado es: " + CodReg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodRequ')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Requerimiento", true, file);

                                    Thread.Sleep(100);
                                    string CodReq = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodRequ')]");
                                    Thread.Sleep(100);
                                    if (CodReq != CodReqEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodReqEsp + " y el encontrado es: " + CodReq);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEspe')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Especificacion", true, file);

                                    Thread.Sleep(100);
                                    string CodEspe = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEspe')]");
                                    Thread.Sleep(100);
                                    if (CodEspe != CodEspeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodEspeEsp + " y el encontrado es: " + CodEspe);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Curso", true, file);

                                    Thread.Sleep(100);
                                    string CodCur = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCurs')]");
                                    Thread.Sleep(100);
                                    if (CodCur != CodCurEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCurEsp + " y el encontrado es: " + CodCur);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Otro Curso", true, file);

                                    Thread.Sleep(100);
                                    string OtroCurso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCurs')]");
                                    Thread.Sleep(100);
                                    if (OtroCurso != OtroCursoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + OtroCursoEsp + " y el encontrado es: " + OtroCurso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodPers')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Perspectivas", true, file);

                                    Thread.Sleep(100);
                                    string Perspec = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodPers')]");
                                    Thread.Sleep(100);
                                    if (Perspec != PerspecEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerspecEsp + " y el encontrado es: " + Perspec);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodObes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Objetivos Asociados", true, file);

                                    Thread.Sleep(100);
                                    string ObjAso = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodObes')]");
                                    Thread.Sleep(100);
                                    if (ObjAso != ObjAsoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObjAsoEsp + " y el encontrado es: " + ObjAso);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_txtJusSoli_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Justificacion", true, file);

                                    Thread.Sleep(100);
                                    string Justific = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_txtJusSoli_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Justific != JustificEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JustificEsp + " y el encontrado es: " + Justific);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 14; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_txtObsErva_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    Thread.Sleep(100);
                                    string Observ = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_txtObsErva_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Observ != ObservEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservEsp + " y el encontrado es: " + Observ);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFilNomb')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Filtro Nombres", true, file);

                                    Thread.Sleep(100);
                                    string FiltroN = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFilNomb')]");
                                    Thread.Sleep(100);
                                    if (FiltroN != FiltroNEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FiltroNEsp + " y el encontrado es: " + FiltroN);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblFilApel')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Filtro Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string FiltroAp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblFilApel')]");
                                    Thread.Sleep(100);
                                    if (FiltroAp != FiltroApEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FiltroApEsp + " y el encontrado es: " + FiltroAp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblArcAdju')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Soporte de Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string Soporte = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblArcAdju')]");
                                    Thread.Sleep(100);
                                    if (Soporte != SoporteEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SoporteEsp + " y el encontrado es: " + Soporte);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 20; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();

                                    //selenium.Click(xpath[0]);
                                    //for (int i = 0; i < 4; i++) SendKeys.Send("{UP}");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_FrmBeIncopNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_FrmBeIncopNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&
                                rows["identiEsp"].ToString().Length != 0 && rows["identiEsp"].ToString() != null &&
                                rows["NombreEsp"].ToString().Length != 0 && rows["NombreEsp"].ToString() != null &&
                                rows["inicioEsp"].ToString().Length != 0 && rows["inicioEsp"].ToString() != null &&
                                rows["FechaSolEsp"].ToString().Length != 0 && rows["FechaSolEsp"].ToString() != null &&
                                rows["ModalidadEsp"].ToString().Length != 0 && rows["ModalidadEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["GradoEsp"].ToString().Length != 0 && rows["GradoEsp"].ToString() != null &&
                                rows["InternadoEsp"].ToString().Length != 0 && rows["InternadoEsp"].ToString() != null &&
                                rows["JornadaEsp"].ToString().Length != 0 && rows["JornadaEsp"].ToString() != null &&
                                rows["Modalidad2Esp"].ToString().Length != 0 && rows["Modalidad2Esp"].ToString() != null &&
                                rows["TipoCalenEsp"].ToString().Length != 0 && rows["TipoCalenEsp"].ToString() != null &&
                                rows["CalendarioEsp"].ToString().Length != 0 && rows["CalendarioEsp"].ToString() != null &&
                                rows["GradoEsp"].ToString().Length != 0 && rows["GradoEsp"].ToString() != null &&
                                 rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();
                                string identiEsp = rows["identiEsp"].ToString();
                                string NombreEsp = rows["NombreEsp"].ToString();
                                string inicioEsp = rows["inicioEsp"].ToString();
                                string FechaSolEsp = rows["FechaSolEsp"].ToString();
                                string ModalidadEsp = rows["ModalidadEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();

                                string InternadoEsp = rows["InternadoEsp"].ToString();
                                string JornadaEsp = rows["JornadaEsp"].ToString();
                                string Modalidad2Esp = rows["Modalidad2Esp"].ToString();
                                string TipoCalenEsp = rows["TipoCalenEsp"].ToString();
                                string CalendarioEsp = rows["CalendarioEsp"].ToString();
                                string GradoEsp = rows["GradoEsp"].ToString();
                                string url2 = rows["url2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEstAdos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estado Estudiante Institución Educativa", true, file);

                                    Thread.Sleep(100);
                                    string EstadoE = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEstAdos')]");
                                    Thread.Sleep(100);
                                    if (EstadoE != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + EstadoE);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string identi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (identi != identiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + identiEsp + " y el encontrado es: " + identi);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombre Apellido", true, file);

                                    Thread.Sleep(100);
                                    string Nombre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nombre != NombreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombreEsp + " y el encontrado es: " + Nombre);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAnoLect')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Año Inicio Periodo Academico", true, file);

                                    Thread.Sleep(100);
                                    string inicio = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAnoLect')]");
                                    Thread.Sleep(100);
                                    if (inicio != inicioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + inicioEsp + " y el encontrado es: " + inicio);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIngr_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string FechaSol = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFechIngr_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaSol != FechaSolEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaSolEsp + " y el encontrado es: " + FechaSol);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblModBene')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Modalidad del Beneficio", true, file);

                                    Thread.Sleep(100);
                                    string Modalidad = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblModBene')]");
                                    Thread.Sleep(100);
                                    if (Modalidad != ModalidadEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ModalidadEsp + " y el encontrado es: " + Modalidad);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel", true, file);

                                    Thread.Sleep(100);
                                    string Nivel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodNive')]");
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrae')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Grado", true, file);

                                    Thread.Sleep(100);
                                    string Grado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrae')]");
                                    Thread.Sleep(100);
                                    if (Grado != GradoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GradoEsp + " y el encontrado es: " + Grado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIntErna')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Internado", true, file);

                                    Thread.Sleep(100);
                                    string Internado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIntErna')]");
                                    Thread.Sleep(100);
                                    if (Internado != InternadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + InternadoEsp + " y el encontrado es: " + Internado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblJorNada')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jornada", true, file);

                                    Thread.Sleep(100);
                                    string Jornada = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblJorNada')]");
                                    Thread.Sleep(100);
                                    if (Jornada != JornadaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + JornadaEsp + " y el encontrado es: " + Jornada);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblModAlid')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Modalidad", true, file);

                                    Thread.Sleep(100);
                                    string Modalidad2 = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblModAlid')]");
                                    Thread.Sleep(100);
                                    if (Modalidad2 != Modalidad2Esp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + Modalidad2Esp + " y el encontrado es: " + Modalidad2);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipCala')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Calendario", true, file);

                                    Thread.Sleep(100);
                                    string TipoCalen = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipCala')]");
                                    Thread.Sleep(100);
                                    if (TipoCalen != TipoCalenEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoCalenEsp + " y el encontrado es: " + TipoCalen);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCale')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Calendario", true, file);

                                    Thread.Sleep(100);
                                    string Calendario = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCale')]");
                                    Thread.Sleep(100);
                                    if (Calendario != CalendarioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CalendarioEsp + " y el encontrado es: " + Calendario);
                                    }
                                    Thread.Sleep(100);



                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    //selenium.Click(xpath[0]);
                                    //for (int i = 0; i < 4; i++) SendKeys.Send("{UP}");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_CarguePersonalAuditoriasNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_CarguePersonalAuditoriasNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["EmpresaEsp"].ToString().Length != 0 && rows["EmpresaEsp"].ToString() != null &&
                                rows["TipoCargEsp"].ToString().Length != 0 && rows["TipoCargEsp"].ToString() != null &&
                                rows["ArchiPlanEsp"].ToString().Length != 0 && rows["ArchiPlanEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string EmpresaEsp = rows["EmpresaEsp"].ToString();
                                string TipoCargEsp = rows["TipoCargEsp"].ToString();
                                string ArchiPlanEsp = rows["ArchiPlanEsp"].ToString();
                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Empresa", true, file);

                                    Thread.Sleep(100);
                                    string Empresa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpr')]");
                                    Thread.Sleep(100);
                                    if (Empresa != EmpresaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmpresaEsp + " y el encontrado es: " + Empresa);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipoCargue')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Cargue", true, file);

                                    Thread.Sleep(100);
                                    string TipoCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipoCargue')]");
                                    Thread.Sleep(100);
                                    if (TipoCarg != TipoCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoCargEsp + " y el encontrado es: " + TipoCarg);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjunto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ruta de Acceso al Archivo Plano", true, file);

                                    Thread.Sleep(100);
                                    string ArchiPlan = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblAdjunto')]");
                                    Thread.Sleep(100);
                                    if (ArchiPlan != ArchiPlanEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ArchiPlanEsp + " y el encontrado es: " + ArchiPlan);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    //////////////////////////////////////
                                    ChromeDriver driver = selenium.returnDriver();
                                    List<IWebElement> elementList = new List<IWebElement>();

                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);

                                        foreach (IWebElement pageEle in elementList)
                                        {

                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }
                                    /////////////////////////////////////////////////////////////////////////////////////////////

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_OrganigramaPresidenciaNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //   TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_OrganigramaPresidenciaNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["TipoOrgEsp"].ToString().Length != 0 && rows["TipoOrgEsp"].ToString() != null &&
                                rows["TipoArbEsp"].ToString().Length != 0 && rows["TipoArbEsp"].ToString() != null &&
                                rows["CentroCosEsp"].ToString().Length != 0 && rows["CentroCosEsp"].ToString() != null &&
                                rows["var1"].ToString().Length != 0 && rows["var1"].ToString() != null &&
                                rows["var2"].ToString().Length != 0 && rows["var2"].ToString() != null &&
                                rows["var3"].ToString().Length != 0 && rows["var3"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string TipoOrgEsp = rows["TipoOrgEsp"].ToString();
                                string TipoArbEsp = rows["TipoArbEsp"].ToString();
                                string CentroCosEsp = rows["CentroCosEsp"].ToString();
                                string var1 = rows["var1"].ToString();
                                string var2 = rows["var2"].ToString();
                                string var3 = rows["var3"].ToString();
                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);
                                    //lider
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    selenium.Screenshot("Lider", true, file);



                                    ChromeDriver driver2 = selenium.returnDriver();

                                    driver2.Navigate().GoToUrl(url2);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//a[contains(.,'Cerrar')]");
                                    }
                                    Thread.Sleep(20000);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(2000);


                                    //Validación Emergentes campos

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipOrgn')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Tipo de Organigrama", true, file);

                                        Thread.Sleep(100);
                                        string TipoOrg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipOrgn')]");
                                        Thread.Sleep(100);
                                        if (TipoOrg != TipoOrgEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoOrgEsp + " y el encontrado es: " + TipoOrg);
                                        }
                                        Thread.Sleep(100);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipOrgn')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Tipo de Organigrama", true, file);

                                        Thread.Sleep(100);
                                        string TipoOrg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipOrgn')]");
                                        Thread.Sleep(100);
                                        if (TipoOrg != TipoOrgEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoOrgEsp + " y el encontrado es: " + TipoOrg);
                                        }
                                        Thread.Sleep(100);


                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipOrgn')]", var1);
                                        Thread.Sleep(100);


                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipArbo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Tipo de Arbol", true, file);

                                        Thread.Sleep(100);
                                        string TipoArb = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipArbo')]");
                                        Thread.Sleep(100);
                                        if (TipoArb != TipoArbEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoArbEsp + " y el encontrado es: " + TipoArb);
                                        }
                                        Thread.Sleep(100);


                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipArbo')]", var2);
                                        Thread.Sleep(100);

                                        selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNivD')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Centro de Costos", true, file);

                                        Thread.Sleep(100);
                                        string CentroCos = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipNivD')]");
                                        Thread.Sleep(100);
                                        if (CentroCos != CentroCosEsp)
                                        {
                                            errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CentroCosEsp + " y el encontrado es: " + CentroCos);
                                        }
                                        Thread.Sleep(100);

                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipNivD')]", var3);
                                        Thread.Sleep(100);
                                    }

                                    //VALIDACION
                                    if (database == "SQL")
                                    {
                                        ChromeDriver driver = selenium.returnDriver();
                                        List<IWebElement> elementList = new List<IWebElement>();

                                        Thread.Sleep(800);
                                        elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina$')]")));

                                        if (elementList.Count > 0)
                                        {
                                            elementList[0].Click();
                                            Thread.Sleep(500);

                                            foreach (IWebElement pageEle in elementList)
                                            {

                                                SendKeys.Send("{TAB}");
                                                selenium.Screenshot("TAB", true, file);

                                                Thread.Sleep(100);
                                            }
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_SolicitudinscripcionRPICNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_SolicitudinscripcionRPICNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["TipoDocEsp"].ToString().Length != 0 && rows["TipoDocEsp"].ToString() != null &&
                                rows["IdentifEsp"].ToString().Length != 0 && rows["IdentifEsp"].ToString() != null &&
                                rows["NombEsp"].ToString().Length != 0 && rows["NombEsp"].ToString() != null &&
                                rows["CargoPEsp"].ToString().Length != 0 && rows["CargoPEsp"].ToString() != null &&
                                rows["IdPlantaEsp"].ToString().Length != 0 && rows["IdPlantaEsp"].ToString() != null &&
                                rows["GeneroEsp"].ToString().Length != 0 && rows["GeneroEsp"].ToString() != null &&
                                rows["SeccionalEsp"].ToString().Length != 0 && rows["SeccionalEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&
                                rows["TipEvEsp"].ToString().Length != 0 && rows["TipEvEsp"].ToString() != null &&
                                rows["CalificaEsp"].ToString().Length != 0 && rows["CalificaEsp"].ToString() != null &&
                                rows["NivelEsp"].ToString().Length != 0 && rows["NivelEsp"].ToString() != null &&
                                rows["FechaEvaEsp"].ToString().Length != 0 && rows["FechaEvaEsp"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string TipoDocEsp = rows["TipoDocEsp"].ToString();
                                string IdentifEsp = rows["IdentifEsp"].ToString();
                                string NombEsp = rows["NombEsp"].ToString();
                                string CargoPEsp = rows["CargoPEsp"].ToString();
                                string IdPlantaEsp = rows["IdPlantaEsp"].ToString();
                                string GeneroEsp = rows["GeneroEsp"].ToString();
                                string SeccionalEsp = rows["SeccionalEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();
                                string TipEvEsp = rows["TipEvEsp"].ToString();
                                string CalificaEsp = rows["CalificaEsp"].ToString();
                                string NivelEsp = rows["NivelEsp"].ToString();
                                string FechaEvaEsp = rows["FechaEvaEsp"].ToString();
                                string url2 = rows["url2"].ToString();



                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    //url=http://dwtfskscm/selfservicetestnewverauto/frmACOrgaM.aspx#no-back-button
                                    driver2.Navigate().GoToUrl(url2);

                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de Documento", true, file);

                                    Thread.Sleep(100);
                                    string TipoDoc = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocu')]");
                                    Thread.Sleep(100);
                                    if (TipoDoc != TipoDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipoDocEsp + " y el encontrado es: " + TipoDoc);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificación", true, file);

                                    Thread.Sleep(100);
                                    string Identif = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identif != IdentifEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentifEsp + " y el encontrado es: " + Identif);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nombres Apellidos", true, file);

                                    Thread.Sleep(100);
                                    string Nomb = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomEmpl')]");
                                    Thread.Sleep(100);
                                    if (Nomb != NombEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NombEsp + " y el encontrado es: " + Nomb);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblnomcargoplanta')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cargo Planta", true, file);

                                    Thread.Sleep(100);
                                    string CargoP = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblnomcargoplanta')]");
                                    Thread.Sleep(100);
                                    if (CargoP != CargoPEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CargoPEsp + " y el encontrado es: " + CargoP);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblIdPlanta')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Id Planta", true, file);

                                    Thread.Sleep(100);
                                    string IdPlanta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblIdPlanta')]");
                                    Thread.Sleep(100);
                                    if (IdPlanta != IdPlantaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdPlantaEsp + " y el encontrado es: " + IdPlanta);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblsecuen')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Género", true, file);

                                    Thread.Sleep(100);
                                    string Genero = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblsecuen')]");
                                    Thread.Sleep(100);
                                    if (Genero != GeneroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GeneroEsp + " y el encontrado es: " + Genero);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblnomplanta')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Seccional Planta", true, file);

                                    Thread.Sleep(100);
                                    string Seccional = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblnomplanta')]");
                                    Thread.Sleep(100);
                                    if (Seccional != SeccionalEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + SeccionalEsp + " y el encontrado es: " + Seccional);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblestadoServ')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot(" Estado Servidor", true, file);

                                    Thread.Sleep(100);
                                    string Estado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblestadoServ')]");
                                    Thread.Sleep(100);
                                    if (Estado != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + Estado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    for (int i = 0; i < 5; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lbltipeval')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo Evaluación", true, file);

                                    Thread.Sleep(100);
                                    string TipEv = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lbltipeval')]");
                                    Thread.Sleep(100);
                                    if (TipEv != TipEvEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipEvEsp + " y el encontrado es: " + TipEv);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblcaliifca')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Calificación", true, file);

                                    Thread.Sleep(100);
                                    string Califica = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblcaliifca')]");
                                    Thread.Sleep(100);
                                    if (Califica != CalificaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CalificaEsp + " y el encontrado es: " + Califica);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblnivcalif')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nivel Calificación", true, file);

                                    Thread.Sleep(100);
                                    string Nivel = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblnivcalif')]");
                                    Thread.Sleep(100);
                                    if (Nivel != NivelEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NivelEsp + " y el encontrado es: " + Nivel);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecEvalua_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Evaluación", true, file);

                                    Thread.Sleep(100);
                                    string FechaEva = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecEvalua_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaEva != FechaEvaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaEvaEsp + " y el encontrado es: " + FechaEva);
                                    }
                                    Thread.Sleep(100);

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    //selenium.Click(xpath[0]);
                                    //for (int i = 0; i < 4; i++) SendKeys.Send("{UP}");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void SmartPeople_ReporteManualFuncionesNTC()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //  TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_ReporteManualFuncionesNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["GuardarEsp"].ToString().Length != 0 && rows["GuardarEsp"].ToString() != null &&
                                rows["RegresarEsp"].ToString().Length != 0 && rows["RegresarEsp"].ToString() != null &&
                                rows["ConCodCargEsp"].ToString().Length != 0 && rows["ConCodCargEsp"].ToString() != null &&
                                rows["ConNomCargEsp"].ToString().Length != 0 && rows["ConNomCargEsp"].ToString() != null &&
                                rows["CodCargEsp"].ToString().Length != 0 && rows["CodCargEsp"].ToString() != null &&
                                rows["NomCargEsp"].ToString().Length != 0 && rows["NomCargEsp"].ToString() != null &&
                                rows["VersionEsp"].ToString().Length != 0 && rows["VersionEsp"].ToString() != null &&
                                rows["VigenciaEsp"].ToString().Length != 0 && rows["VigenciaEsp"].ToString() != null &&
                                rows["FechaElabEsp"].ToString().Length != 0 && rows["FechaElabEsp"].ToString() != null &&
                                rows["GrupoEsp"].ToString().Length != 0 && rows["GrupoEsp"].ToString() != null &&
                                rows["CodigoEsp"].ToString().Length != 0 && rows["CodigoEsp"].ToString() != null &&
                                rows["EstadoEsp"].ToString().Length != 0 && rows["EstadoEsp"].ToString() != null &&
                                rows["ElaboradoEsp"].ToString().Length != 0 && rows["ElaboradoEsp"].ToString() != null &&
                                rows["AprobadoEsp"].ToString().Length != 0 && rows["AprobadoEsp"].ToString() != null &&
                                rows["ValidadoEsp"].ToString().Length != 0 && rows["ValidadoEsp"].ToString() != null &&
                                rows["AutorizadoEsp"].ToString().Length != 0 && rows["AutorizadoEsp"].ToString() != null &&
                                rows["DescripcionEsp"].ToString().Length != 0 && rows["DescripcionEsp"].ToString() != null &&
                                rows["ObservacionesEsp"].ToString().Length != 0 && rows["ObservacionesEsp"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();
                                string GuardarEsp = rows["GuardarEsp"].ToString();
                                string RegresarEsp = rows["RegresarEsp"].ToString();
                                string ConCodCargEsp = rows["ConCodCargEsp"].ToString();
                                string ConNomCargEsp = rows["ConNomCargEsp"].ToString();
                                string CodCargEsp = rows["CodCargEsp"].ToString();
                                string NomCargEsp = rows["NomCargEsp"].ToString();
                                string VersionEsp = rows["VersionEsp"].ToString();
                                string VigenciaEsp = rows["VigenciaEsp"].ToString();
                                string FechaElabEsp = rows["FechaElabEsp"].ToString();
                                string GrupoEsp = rows["GrupoEsp"].ToString();
                                string CodigoEsp = rows["CodigoEsp"].ToString();
                                string EstadoEsp = rows["EstadoEsp"].ToString();
                                string ElaboradoEsp = rows["ElaboradoEsp"].ToString();
                                string AprobadoEsp = rows["AprobadoEsp"].ToString();
                                string ValidadoEsp = rows["ValidadoEsp"].ToString();
                                string AutorizadoEsp = rows["AutorizadoEsp"].ToString();
                                string DescripcionEsp = rows["DescripcionEsp"].ToString();
                                string ObservacionesEsp = rows["ObservacionesEsp"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(100);
                                    selenium.Click("//a[contains(.,'Manual de Funciones')]");
                                    Thread.Sleep(100);
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(100);
                                    selenium.Screenshot("Reporte Manual de Funciones", true, file);


                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Guardar
                                    string Guardar = selenium.EmergenteBotones("btnGuardar");
                                    Thread.Sleep(100);
                                    if (Guardar != GuardarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + GuardarEsp + " y el encontrado es: " + Guardar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación emergentes Boton Regresar
                                    string Regresar = selenium.EmergenteBotones("ctl00_btnRetornar");
                                    Thread.Sleep(100);
                                    if (Regresar != RegresarEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Actualizar es incorrecto, el esperado es: " + RegresarEsp + " y el encontrado es: " + Regresar);
                                    }
                                    Thread.Sleep(100);

                                    //Validación Emergentes campos
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCarg')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Codigo Cargo", true, file);

                                    Thread.Sleep(100);
                                    string ConCodCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuCodCarg')]");
                                    Thread.Sleep(100);
                                    if (ConCodCarg != ConCodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConCodCargEsp + " y el encontrado es: " + ConCodCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomCargo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Consultar Nombre Cargo", true, file);

                                    Thread.Sleep(100);
                                    string ConNomCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblConsuNomCargo')]");
                                    Thread.Sleep(100);
                                    if (ConNomCarg != ConNomCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ConNomCargEsp + " y el encontrado es: " + ConNomCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCargo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo Cargo", true, file);

                                    Thread.Sleep(100);
                                    string CodCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodCargo')]");
                                    Thread.Sleep(100);
                                    if (CodCarg != CodCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodCargEsp + " y el encontrado es: " + CodCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCargo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("nombre Cargo", true, file);

                                    Thread.Sleep(100);
                                    string NomCarg = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNomCargo')]");
                                    Thread.Sleep(100);
                                    if (NomCarg != NomCargEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NomCargEsp + " y el encontrado es: " + NomCarg);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblVerSion')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Versión", true, file);

                                    Thread.Sleep(100);
                                    string Version = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblVerSion')]");
                                    Thread.Sleep(100);
                                    if (Version != VersionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VersionEsp + " y el encontrado es: " + Version);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblVigdesd')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vigencia Desde", true, file);

                                    Thread.Sleep(100);
                                    string Vigencia = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblVigdesd')]");
                                    Thread.Sleep(100);
                                    if (Vigencia != VigenciaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + VigenciaEsp + " y el encontrado es: " + Vigencia);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecCrea_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Elaboración", true, file);

                                    Thread.Sleep(100);
                                    string FechaElab = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecCrea_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaElab != FechaElabEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaElabEsp + " y el encontrado es: " + FechaElab);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrup')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot(" Grupo", true, file);

                                    Thread.Sleep(100);
                                    string Grupo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodGrup')]");
                                    Thread.Sleep(100);
                                    if (Grupo != GrupoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GrupoEsp + " y el encontrado es: " + Grupo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblVCodForm')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Codigo", true, file);

                                    Thread.Sleep(100);
                                    string Codigo = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblVCodForm')]");
                                    Thread.Sleep(100);
                                    if (Codigo != CodigoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CodigoEsp + " y el encontrado es: " + Codigo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEstVers')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estado", true, file);

                                    Thread.Sleep(100);
                                    string Estado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEstVers')]");
                                    Thread.Sleep(100);
                                    if (Estado != EstadoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstadoEsp + " y el encontrado es: " + Estado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblElaBora')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Elaborado", true, file);

                                    Thread.Sleep(100);
                                    string Elaborado = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblElaBora')]");
                                    Thread.Sleep(100);
                                    if (Elaborado != ElaboradoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ElaboradoEsp + " y el encontrado es: " + Elaborado);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 10; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                        Thread.Sleep(200);
                                    }



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDesCamb')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Descripción del Cambio", true, file);

                                    Thread.Sleep(100);
                                    string Descripcion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDesCamb')]");
                                    Thread.Sleep(100);
                                    if (Descripcion != DescripcionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DescripcionEsp + " y el encontrado es: " + Descripcion);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones de la Solicitud", true, file);

                                    Thread.Sleep(100);
                                    string Observaciones = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Observaciones != ObservacionesEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ObservacionesEsp + " y el encontrado es: " + Observaciones);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i <= 10; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                        Thread.Sleep(200);
                                    }

                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    //selenium.Click(xpath[0]);
                                    //for (int i = 0; i < 4; i++) SendKeys.Send("{UP}");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }


                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SmartPeople_MisDatosBasicosNTC()
        {
            //System.Diagnostics.Debugger.Launch();
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test_V2.SmartPeople_NTC.SmartPeople_MisDatosBasicosNTC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            

                            //

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["TituloEsp"].ToString().Length != 0 && rows["TituloEsp"].ToString() != null &&
                                rows["SubtituloEsp"].ToString().Length != 0 && rows["SubtituloEsp"].ToString() != null &&
                                rows["HomeEsp"].ToString().Length != 0 && rows["HomeEsp"].ToString() != null &&
                                rows["TipDocEsp"].ToString().Length != 0 && rows["TipDocEsp"].ToString() != null &&
                                //rows["IdentificacionEsp"].ToString().Length != 0 && rows["IdentificacionEsp"].ToString() != null &&
                                rows["CiuExpEsp"].ToString().Length != 0 && rows["CiuExpEsp"].ToString() != null &&
                                rows["FechaExpEsp"].ToString().Length != 0 && rows["FechaExpEsp"].ToString() != null &&
                                rows["NacionalidadEsp"].ToString().Length != 0 && rows["NacionalidadEsp"].ToString() != null &&
                                rows["GeneroEsp"].ToString().Length != 0 && rows["GeneroEsp"].ToString() != null &&

                                rows["FechaNacEsp"].ToString().Length != 0 && rows["FechaNacEsp"].ToString() != null &&
                                rows["CiuNaciEsp"].ToString().Length != 0 && rows["CiuNaciEsp"].ToString() != null &&
                                rows["CiuResiEsp"].ToString().Length != 0 && rows["CiuResiEsp"].ToString() != null &&
                                rows["DireEsp"].ToString().Length != 0 && rows["DireEsp"].ToString() != null &&
                                rows["BarrioEsp"].ToString().Length != 0 && rows["BarrioEsp"].ToString() != null &&
                                rows["NumCasaEsp"].ToString().Length != 0 && rows["NumCasaEsp"].ToString() != null &&
                                rows["RutaEsp"].ToString().Length != 0 && rows["RutaEsp"].ToString() != null &&
                                rows["EmailEsp"].ToString().Length != 0 && rows["EmailEsp"].ToString() != null &&
                                rows["TelefonoEsp"].ToString().Length != 0 && rows["TelefonoEsp"].ToString() != null &&
                                rows["MovilEsp"].ToString().Length != 0 && rows["MovilEsp"].ToString() != null &&
                                rows["FaxEsp"].ToString().Length != 0 && rows["FaxEsp"].ToString() != null &&
                                rows["ClaseLibreEsp"].ToString().Length != 0 && rows["ClaseLibreEsp"].ToString() != null &&
                                rows["NumLibreEsp"].ToString().Length != 0 && rows["NumLibreEsp"].ToString() != null &&
                                rows["DistriLibreEsp"].ToString().Length != 0 && rows["DistriLibreEsp"].ToString() != null &&
                                rows["EstCivilEsp"].ToString().Length != 0 && rows["EstCivilEsp"].ToString() != null &&
                                rows["GradoEsp"].ToString().Length != 0 && rows["GradoEsp"].ToString() != null &&
                                rows["FechGraEsp"].ToString().Length != 0 && rows["FechGraEsp"].ToString() != null &&
                                rows["TituloObtEsp"].ToString().Length != 0 && rows["TituloObtEsp"].ToString() != null &&
                                rows["TituloProEsp"].ToString().Length != 0 && rows["TituloProEsp"].ToString() != null &&
                                rows["MatriEsp"].ToString().Length != 0 && rows["MatriEsp"].ToString() != null &&
                                rows["PerfilEsp"].ToString().Length != 0 && rows["PerfilEsp"].ToString() != null

                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string TituloEsp = rows["TituloEsp"].ToString();
                                string SubtituloEsp = rows["SubtituloEsp"].ToString();
                                string HomeEsp = rows["HomeEsp"].ToString();

                                string TipDocEsp = rows["TipDocEsp"].ToString();
                                string IdentificacionEsp = rows["IdentificacionEsp"].ToString();
                                string CiuExpEsp = rows["CiuExpEsp"].ToString();
                                string FechaExpEsp = rows["FechaExpEsp"].ToString();
                                string NacionalidadEsp = rows["NacionalidadEsp"].ToString();
                                string GeneroEsp = rows["GeneroEsp"].ToString();
                                string FechaNacEsp = rows["FechaNacEsp"].ToString();
                                string CiuNaciEsp = rows["CiuNaciEsp"].ToString();
                                string CiuResiEsp = rows["CiuResiEsp"].ToString();
                                string DireEsp = rows["DireEsp"].ToString();
                                string BarrioEsp = rows["BarrioEsp"].ToString();
                                string NumCasaEsp = rows["NumCasaEsp"].ToString();
                                string RutaEsp = rows["RutaEsp"].ToString();
                                string EmailEsp = rows["EmailEsp"].ToString();
                                string TelefonoEsp = rows["TelefonoEsp"].ToString();
                                string MovilEsp = rows["MovilEsp"].ToString();
                                string FaxEsp = rows["FaxEsp"].ToString();
                                string ClaseLibreEsp = rows["ClaseLibreEsp"].ToString();
                                string NumLibreEsp = rows["NumLibreEsp"].ToString();
                                string DistriLibreEsp = rows["DistriLibreEsp"].ToString();
                                string EstCivilEsp = rows["EstCivilEsp"].ToString();
                                string GradoEsp = rows["GradoEsp"].ToString();
                                string FechGraEsp = rows["FechGraEsp"].ToString();
                                string TituloObtEsp = rows["TituloObtEsp"].ToString();
                                string TituloProEsp = rows["TituloProEsp"].ToString();
                                string MatriEsp = rows["MatriEsp"].ToString();
                                string PerfilEsp = rows["PerfilEsp"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower().Contains("ora"))
                                    {
                                        database = "ORA";
                                    }
                                    else
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfsk:8094/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://dwtfsk:8093/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(100);
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(100);
                                    selenium.Scroll("//a[contains(.,'Mis Datos Básicos')]");
                                    Thread.Sleep(100);
                                    selenium.Click("//a[contains(.,'Mis Datos Básicos')]");
                                    Thread.Sleep(100);
                                    selenium.Screenshot("Mis Datos Básicos", true, file);




                                    // Validacion titulo
                                    string Titulo = selenium.Title();
                                    Thread.Sleep(100);
                                    if (Titulo != TituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El título es incorrecto, el esperado es: " + TituloEsp + " y el encontrado es: " + Titulo);
                                    }
                                    Thread.Sleep(100);

                                    //Validación subtitulo botones
                                    string Subtitulo = selenium.Subtitulo("ctl00_lblTitulo");
                                    Thread.Sleep(100);
                                    if (Subtitulo != SubtituloEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El subtítulo es incorrecto, el esperado es: " + SubtituloEsp + " y el encontrado es: " + Subtitulo);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Screenshot("TAB", true, file);

                                    Thread.Sleep(100);

                                    //Validacion boton home
                                    string Home = selenium.EmergenteBotones("ctl00_btnHome");
                                    Thread.Sleep(100);
                                    if (Home != HomeEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre del botón Home es incorrecto, el esperado es: " + HomeEsp + " y el encontrado es: " + Home);
                                    }
                                    Thread.Sleep(100);


                                    //Validación Emergentes campos

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocu')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo de documento", true, file);

                                    Thread.Sleep(100);
                                    string TipDoc = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTipDocu')]");
                                    Thread.Sleep(100);
                                    if (TipDoc != TipDocEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TipDocEsp + " y el encontrado es: " + TipDoc);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Identificacion", true, file);

                                    Thread.Sleep(100);
                                    string Identificacion = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblCodEmpl')]");
                                    Thread.Sleep(100);
                                    if (Identificacion != IdentificacionEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + IdentificacionEsp + " y el encontrado es: " + Identificacion);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivExpe_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad expedicion", true, file);

                                    Thread.Sleep(100);
                                    string CiuExp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivExpe_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (CiuExp != CiuExpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiuExpEsp + " y el encontrado es: " + CiuExp);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecExpe_lblFecha')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha expedicion", true, file);

                                    Thread.Sleep(100);
                                    string FechaExp = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecExpe_lblFecha')]");
                                    Thread.Sleep(100);
                                    if (FechaExp != FechaExpEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaExpEsp + " y el encontrado es: " + FechaExp);
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblSexEmpl')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Genero", true, file);

                                    Thread.Sleep(100);
                                    string Genero = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblSexEmpl')]");
                                    Thread.Sleep(100);
                                    if (Genero != GeneroEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + GeneroEsp + " y el encontrado es: " + Genero);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecNaci_lblFecha')]	");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha nacimiento", true, file);

                                    Thread.Sleep(100);
                                    string FechaNac = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlFecNaci_lblFecha')]	");
                                    Thread.Sleep(100);
                                    if (FechaNac != FechaNacEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FechaNacEsp + " y el encontrado es: " + FechaNac);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivNaci_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad Nacimiento", true, file);

                                    Thread.Sleep(100);
                                    string CiuNaci = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivNaci_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (CiuNaci != CiuNaciEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiuNaciEsp + " y el encontrado es: " + CiuNaci);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivResi_lblDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad residencia", true, file);

                                    Thread.Sleep(100);
                                    string CiuResi = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrDivResi_lblDivPoli')]");
                                    Thread.Sleep(100);
                                    if (CiuResi != CiuResiEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + CiuResiEsp + " y el encontrado es: " + CiuResi);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDirResi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Direccion", true, file);

                                    Thread.Sleep(100);
                                    string Dire = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDirResi')]");
                                    Thread.Sleep(100);
                                    if (Dire != DireEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DireEsp + " y el encontrado es: " + Dire);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblBarResiC')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Barrio", true, file);

                                    Thread.Sleep(100);
                                    string Barrio = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblBarResiC')]");
                                    Thread.Sleep(100);
                                    if (Barrio != BarrioEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + BarrioEsp + " y el encontrado es: " + Barrio);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCasa')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero casa", true, file);

                                    Thread.Sleep(100);
                                    string NumCasa = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNumCasa')]");
                                    Thread.Sleep(100);
                                    if (NumCasa != NumCasaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumCasaEsp + " y el encontrado es: " + NumCasa);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblRutResi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ruta", true, file);

                                    Thread.Sleep(100);
                                    string Ruta = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblRutResi')]");
                                    Thread.Sleep(100);
                                    if (Ruta != RutaEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + RutaEsp + " y el encontrado es: " + Ruta);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEeeMail')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Email", true, file);

                                    Thread.Sleep(100);
                                    string Email = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEeeMail')]");
                                    Thread.Sleep(100);
                                    if (Email != EmailEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EmailEsp + " y el encontrado es: " + Email);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTelResi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Telefono", true, file);

                                    Thread.Sleep(100);
                                    string Telefono = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTelResi')]");
                                    Thread.Sleep(100);
                                    if (Telefono != TelefonoEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + TelefonoEsp + " y el encontrado es: " + Telefono);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTelMovi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Telefono movil", true, file);

                                    Thread.Sleep(100);
                                    string Movil = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTelMovi')]");
                                    Thread.Sleep(100);
                                    if (Movil != MovilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + MovilEsp + " y el encontrado es: " + Movil);
                                    }
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblTelFaxi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fax", true, file);

                                    Thread.Sleep(100);
                                    string Fax = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblTelFaxi')]");
                                    Thread.Sleep(100);
                                    if (Fax != FaxEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + FaxEsp + " y el encontrado es: " + Fax);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 8; i++)
                                    {
                                        SendKeys.Send("{DOWN}");
                                    }
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblClaLmil')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Clase de libreta militar", true, file);

                                    Thread.Sleep(100);
                                    string ClaseLibre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblClaLmil')]");
                                    Thread.Sleep(100);
                                    if (ClaseLibre != ClaseLibreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + ClaseLibreEsp + " y el encontrado es: " + ClaseLibre);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);


                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblNumLmil')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Numero libreta militar", true, file);

                                    Thread.Sleep(100);
                                    string NumLibre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblNumLmil')]");
                                    Thread.Sleep(100);
                                    if (NumLibre != NumLibreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + NumLibreEsp + " y el encontrado es: " + NumLibre);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblDisLmil')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Distrito libreta militar", true, file);

                                    Thread.Sleep(100);
                                    string DistriLibre = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblDisLmil')]");
                                    Thread.Sleep(100);
                                    if (DistriLibre != DistriLibreEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + DistriLibreEsp + " y el encontrado es: " + DistriLibre);
                                    }
                                    Thread.Sleep(100);



                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_lblEstCivi')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Estado civil", true, file);

                                    Thread.Sleep(100);
                                    string EstCivil = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_lblEstCivi')]");
                                    Thread.Sleep(100);
                                    if (EstCivil != EstCivilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + EstCivilEsp + " y el encontrado es: " + EstCivil);
                                    }
                                    Thread.Sleep(100);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(100);

                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlPerFile_lblTexto')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Perfil", true, file);

                                    Thread.Sleep(100);
                                    string Perfil = selenium.Emergente("//span[contains(@id,'ctl00_ContenidoPagina_KCtrlPerFile_lblTexto')]");
                                    Thread.Sleep(100);
                                    if (Perfil != PerfilEsp)
                                    {
                                        errorMessagesMetodo.Add("::::::::::::::::::::::" + "MSG: El Nombre Emergente es incorrecto, el esperado es: " + PerfilEsp + " y el encontrado es: " + Perfil);
                                    }
                                    Thread.Sleep(100);

                                    for (int i = 0; i < 8; i++)
                                    {
                                        SendKeys.Send("{UP}");
                                    }
                                    Thread.Sleep(100);


                                    ////////////// VALIDACION DE TABS/////////////////

                                    ChromeDriver driver = selenium.returnDriver();
                                    //selenium.Click(xpath[0]);
                                    //for (int i = 0; i < 4; i++) SendKeys.Send("{UP}");
                                    List<IWebElement> elementList = new List<IWebElement>();
                                    //List<IWebElement> elementListPagina2 = new List<IWebElement>();
                                    Thread.Sleep(800);
                                    elementList.AddRange(driver.FindElements(By.XPath("//*[contains(@name,'ctl00$ContenidoPagina')]")));
                                    //elementListPagina2.AddRange(driver.FindElements(By.XPath("//*[contains(@id,'ctl00_ContenidoPagina_')]")));
                                    if (elementList.Count > 0)
                                    {
                                        elementList[0].Click();
                                        Thread.Sleep(500);
                                        foreach (IWebElement pageEle in elementList)
                                        {
                                            SendKeys.Send("{TAB}");
                                            selenium.Screenshot("TAB", true, file);

                                            Thread.Sleep(100);
                                        }
                                    }

                                    fv.ConvertWordToPDF(file, database); 
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(1000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        #region Atributos de prueba adicionales

        // Puede usar los siguientes atributos adicionales conforme escribe las pruebas:

        ////Use TestInitialize para ejecutar el código antes de ejecutar cada prueba 
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{        
        //    // Para generar código para esta prueba, seleccione "Generar código para prueba automatizada de IU" en el menú contextual y seleccione uno de los elementos de menú.
        //}

        ////Use TestCleanup para ejecutar el código después de ejecutar cada prueba
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{        
        //    // Para generar código para esta prueba, seleccione "Generar código para prueba automatizada de IU" en el menú contextual y seleccione uno de los elementos de menú.
        //}

        #endregion

        /// <summary>
        ///Obtiene o establece el contexto de las pruebas que proporciona
        ///información y funcionalidad para la serie de pruebas actual.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        private TestContext testContextInstance;

      
    }
}
