using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows.Input;
using System.Windows.Forms;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UITesting;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.VisualStudio.TestTools.UITest.Extension;
using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
using OpenQA.Selenium.Chrome;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using System.Data;
using DocumentFormat.OpenXml.Office2010.ExcelAc;
using Web_Kactus_Test.UIMapNuevoClasses;
using APITest;
using Keys = OpenQA.Selenium.Keys;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;

namespace Web_Kactus_Test
{
    /// <summary>
    /// Descripción resumida de SelfServices
    /// </summary>
    [CodedUITest]
    public class SelfService : FuncionesVitales
    {

        string Modulo = "EnvioCorreo";
        string app = "SmartPeople";

        APISelenium selenium = new APISelenium();
        APIFuncionesVitales fv = new APIFuncionesVitales();
        APIDatabase db = new APIDatabase();

        public SelfService()
        {

        }

        [TestMethod]
        public void FD_EnvíoCorreoMisCursos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_EnvíoCorreoMisCursos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["ConfAsis"].ToString().Length != 0 && rows["ConfAsis"].ToString() != null &&
                                rows["CodEmpre"].ToString().Length != 0 && rows["CodEmpre"].ToString() != null &&
                                rows["Parametro"].ToString().Length != 0 && rows["Parametro"].ToString() != null &&
                                rows["Secuencial"].ToString().Length != 0 && rows["Secuencial"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string ConfAsis = rows["ConfAsis"].ToString();
                                string CodEmpre = rows["CodEmpre"].ToString();
                                string Parametro = rows["Parametro"].ToString();
                                string Secuencial = rows["Secuencial"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000); 

                                    //Actualizar Registro por BD
                                    string ActualizarRegistro = $"UPDATE FD_DPLIN SET CON_FIRM = 'N' where IDE_NTIF = {EmpleadoUser} and cod_empr = {CodEmpre}";
                                    db.UpdateDeleteInsert(ActualizarRegistro, database, user);

                                    //Ingresar a confirmar Asistencia curso
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Confirmación a Cursos')]");
                                    selenium.Screenshot("Mis cursos", true, file);

                                    try
                                    {
                                        if (selenium.ExistControl("//select[contains(@id,'ddlConfCurso')]"))
                                        {
                                            //CONFIRMACION CURSO
                                            Thread.Sleep(200);
                                            selenium.SelectElementByName("//select[contains(@id,'ddlConfCurso')]", ConfAsis);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Seleccionar confirmación curso", true, file);

                                            //ADICIONAR
                                            Thread.Sleep(1000);
                                            selenium.Click("//*[@id='ctl00_ContenidoPagina_Adicionar']");
                                            Thread.Sleep(2000);
                                            selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                            Thread.Sleep(500);
                                            selenium.Click("//a[contains(.,'Confirmación a Cursos')]");
                                            selenium.Screenshot("Mis cursos", true, file);
                                            selenium.Screenshot("Confirmada Asistencia", true, file);

                                        }
                                        else
                                        {
                                            selenium.Screenshot("No hay cursos por confirmar", true, file);
                                        }
                                               

                                    }catch(Exception e)
                                    {
                                        
                                        continue;
                                    }
                                    
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }





        [TestMethod]
        public void FD_EnvíoCorreoSolicitudFormación()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_EnvíoCorreoSolicitudFormación")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (

                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Registro"].ToString().Length != 0 && rows["Registro"].ToString() != null &&
                                rows["Curso"].ToString().Length != 0 && rows["Curso"].ToString() != null &&
                                rows["Perspectiva"].ToString().Length != 0 && rows["Perspectiva"].ToString() != null &&
                                rows["Justificacion"].ToString().Length != 0 && rows["Justificacion"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null 

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string Registro = rows["Registro"].ToString();
                                string Curso = rows["Curso"].ToString();
                                string Perspectiva = rows["Perspectiva"].ToString();
                                string Justificacion = rows["Justificacion"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    // ELIMINAR REGISTROS PREVIOS
                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarNecesidad, database, user);
                                    
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    
                                    //INGRESO A MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(500);
                                    if(database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                    }
                                    Thread.Sleep(1000);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    selenium.Screenshot("Crear registro", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomRegi')]", Registro);                              
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro", true, file);
                                    //CURSOS
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomCurs')]", Curso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Curso", true, file);
                                    //PERSPECTIVA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodPers')]", Perspectiva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Perspectiva", true, file);
                                    //JUSTIFICACION
                                    selenium.SendKeys("//textarea[contains(@id,'txtJusSoli_txtTexto')]", Justificacion);
                                    Thread.Sleep(2000);
                                    //OBSERVACION
                                    selenium.Scroll("//textarea[contains(@id,'txtObsErva_txtTexto')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//textarea[contains(@id,'txtObsErva_txtTexto')]");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//textarea[contains(@id,'txtObsErva_txtTexto')]", Observacion);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Necesidad de formación", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    selenium.Screenshot("Necesidad de formación Enviada", true, file);
                                    Thread.Sleep(3000);
                                    //Necesidades de formacion
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(2500);
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        selenium.Screenshot("Necesidad de Formacion Registrada", true, file);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        selenium.Screenshot("Necesidad de formación Registrada", true, file);
                                    }
                                    Thread.Sleep(1000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

             

        [TestMethod]
        public void FD_ReporteAsistenciaCursos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_ReporteAsistenciaCursos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["CodEmple"].ToString().Length != 0 && rows["CodEmple"].ToString() != null &&
                                rows["CodEmpre"].ToString().Length != 0 && rows["CodEmpre"].ToString() != null &&
                                rows["Parametro"].ToString().Length != 0 && rows["Parametro"].ToString() != null &&
                                rows["Secuencial"].ToString().Length != 0 && rows["Secuencial"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null 

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string CodEmple = rows["CodEmple"].ToString();
                                string CodEmpre = rows["CodEmpre"].ToString();
                                string Parametro = rows["Parametro"].ToString();
                                string Secuencial = rows["Secuencial"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    
                                    string ActualizarRegistro = $"UPDATE FD_DPLIN SET ASI_STIO = 'N' WHERE RMT_PARA = {Parametro} AND RMT_PLCU = {Secuencial} AND COD_EMPR = {CodEmpre} AND IDE_NTIF IN{CodEmple}";
                                    db.UpdateDeleteInsert(ActualizarRegistro, database, user);

                                    //INGRESAR MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(500);
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[7]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[7]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul/li[4]/ul/li[11]/a");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul/li[4]/ul/li[11]/a");
                                    }

                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Reportes de Asistencia a Cursos", true, file);

                                    //DETALLE
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgFdDplse_ctl03_lbSelDetalle']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle Seleccionado", true, file);

                                    //REPORTE
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnReporte']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnReporte']");
                                    Thread.Sleep(2000);
                                    Screenshot("Reporte Asistencia Generado", true, file);

                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(5000);
                                    Screenshot("Reporte Asistencia Generado", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Asistencia Cursos", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//*[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("AsistenciaCurso");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/AsistenciaCurso.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void ED_RegistroAceptaciónReformulación()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
           // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.ED_RegistroAceptaciónReformulación")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["ParaMeta"].ToString().Length != 0 && rows["ParaMeta"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string ParaMeta = rows["ParaMeta"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = 1005 and ANO_OMET = 2018";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = 202020";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = 202020";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 9 and ACT_USUA ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarReformulacion = $"update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = 2 and ANO_OMET = 2018";
                                        db.UpdateDeleteInsert(ActualizarReformulacion, database, user);

                                        string ActualizarMeta = $"update ed_fomei set tip_meta = 'S' where COD_EMPL = 193454";
                                        db.UpdateDeleteInsert(ActualizarMeta, database, user);

                                        string ActualizarTipoMeta = $"update ed_fomei set SEG_REFO = 'S' where COD_EMPL = 193454";
                                        db.UpdateDeleteInsert(ActualizarTipoMeta, database, user);

                                        string Borrado = $"delete from ED_OBMEI where tip_meta = 'S' and cod_empr = 421 and ACT_USUA ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(Borrado, database, user);
                                    }
                                    

                                    //update ED_REFOR set FEC_FINA = '31/12/2050' where RMT_OMET = 1005 and ANO_OMET = 2018
                                    //update ed_fomei set tip_meta = 'S' where COD_EMPL = 202020
                                    //updateed_fomei set SEG_REFO = 'S' where COD_EMPL = 202020



                                    //INGRESO A ENVALUACION DE OBJETIVOS ACEPTACION DE LA REFORMULACION
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Aceptación de la Reformulación')]");
                                    selenium.Click("//a[contains(.,'Aceptación de la Reformulación')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Aceptación de la Reformulación", true, file);

                                    try
                                    {
                                        if (selenium.ExistControl("//*[@id=\'ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\']"))
                                        {
                                            selenium.Screenshot("Detalle", true, file);

                                            //DETALLE REFORMULACION
                                            selenium.Click("//*[@id=\'ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\']");
                                            Thread.Sleep(500);
                                            selenium.Screenshot("Detalles Aceptación de la Reformulación", true, file);

                                            Thread.Sleep(500);

                                            //OBSERVACIONES
                                            selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']")));
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']");
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", Observacion);

                                            //ACEPTAR REFORMULACION
                                            selenium.Click("//input[contains(@id,'btnAcepto')]");
                                            Thread.Sleep(500);
                                            Screenshot("Alerta Aceptación Reformulación", true, file);
                                            Thread.Sleep(3000);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(3000);
                                            Screenshot("Reformulación Aceptada con Éxito", true, file);
                                            selenium.AcceptAlert();

                                        }
                                        else
                                        {
                                            selenium.Screenshot("Sin datos de reformulacion", true, file);
                                        }

                                    }
                                    catch (Exception e)
                                    {
                                       
                                        continue;
                                    }
                                    
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                {
                                    var separator = string.Format("{0}{0}", Environment.NewLine);
                                    string errorMessageString = string.Join(separator, errorsTest);

                                    Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                    Environment.NewLine, errorMessageString));
                                }

                                    Thread.Sleep(3000);
                                    bandera = true; 

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


    [TestMethod]
        public void ED_RegistroFormulaciónObjetivos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.ED_RegistroFormulaciónObjetivos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Perspectiva"].ToString().Length != 0 && rows["Perspectiva"].ToString() != null &&
                                rows["Estrategico"].ToString().Length != 0 && rows["Estrategico"].ToString() != null &&
                                rows["Areas"].ToString().Length != 0 && rows["Areas"].ToString() != null &&
                                rows["Indicador"].ToString().Length != 0 && rows["Indicador"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string Perspectiva = rows["Perspectiva"].ToString();
                                string Estrategico = rows["Estrategico"].ToString();
                                string Areas = rows["Areas"].ToString();
                                string Indicador = rows["Indicador"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //Parametrización de Formulación Metas para el usuario 
                                    if (database == "SQL")
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'F' where COD_EMPL = 202020";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        Thread.Sleep(2000);
                                        string actualizar2 = $"update ED_FORMU set FEC_FINA = '31/12/2025' WHERE RMT_OMET = 1005";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        string actualizar = $"update ED_FOMEI set SEG_REFO = 'N', TIP_META = 'F' where COD_EMPL = 193454";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        Thread.Sleep(2000);
                                        string actualizar2 = $"update ED_FORMU set FEC_FINA = '31/12/2025' WHERE RMT_OMET = 2";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        Thread.Sleep(2000);
                                    } 
                                    //INGRESO A FORMULACION DE OBJETIVOS
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Click("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Screenshot("Formulación de objetivos", true, file);
                                    Thread.Sleep(1000);
                                    //DETALLE
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\"]");
                                    Thread.Sleep(1000);
                                    //BORRAR FORMULACIONES
                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i"))
                                    {
                                        for (int i = 0; i < 3; i++)
                                        {
                                            selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                            Thread.Sleep(3000);
                                        }
                                    }
                                    //INGRESO A FORMULACION DE OBJETIVOS
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Click("//a[contains(.,'Formulación Objetivos')]");
                                    selenium.Screenshot("Formulación de objetivos", true, file);
                                    Thread.Sleep(1000);
                                    if (selenium.ExistControl("//*[@id=\"ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\"]"))
                                    {
                                        selenium.Click("//*[@id=\"ctl00_ContenidoPagina_dtgDatos_ctl03_LinkButton1\"]");
                                        Thread.Sleep(1000);

                                        for (int i = 0; i < 3; i++)
                                        {
                                            //PERSPECTIVA
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_PERS']", Perspectiva);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Perspectiva ", true, file);
                                            //ESTRATEGICO
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_OBES']", Estrategico);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Estrategico ", true, file);
                                            //AREAS
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_OBAR']", Areas);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Áreas ", true, file);
                                            //META INDIVIDUAL
                                            selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KtxtDesMeta_txtTexto']");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KtxtDesMeta_txtTexto']", "Metas Individuales");
                                            Thread.Sleep(2000);
                                            //INDICADOR
                                            if (database == "SQL")
                                            {
                                                selenium.ScrollTo("0", "500");
                                                selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_INDI']", Indicador);
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Indicador ", true, file);
                                            }
                                            else
                                            {
                                                selenium.ScrollTo("0", "600");
                                                Thread.Sleep(2000);
                                                selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_COD_INDI']", "PRUEBA");
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Indicador ", true, file);
                                            }
                                            
                                            //SEGUIMIENTO DATOS
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_PRO_PTRI']", "10");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_PRO_STRI']", "20");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_PRO_TTRI']", "30");
                                            Thread.Sleep(2000);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_PRO_CTRI']", "40");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Datos Seguimiento ", true, file);

                                            if (i == 0)
                                            {
                                                selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_POR_PESO']", "50");
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Peso ", true, file);
                                                selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicar']");
                                                Thread.Sleep(2000);
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(1000);
                                                selenium.Screenshot("Aplicado ", true, file);
                                                Thread.Sleep(1000);
                                                selenium.ScrollTo("0", "200");
                                            }
                                            else
                                            {
                                                selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_POR_PESO']", "25");
                                                Thread.Sleep(2000);
                                                selenium.Screenshot("Peso ", true, file);
                                                selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAplicar']");
                                                Thread.Sleep(2000);
                                                selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                                Thread.Sleep(1000);
                                                selenium.Screenshot("Aplicado ", true, file);
                                                Thread.Sleep(1000);
                                                selenium.ScrollTo("0", "200");
                                            }
                                        }

                                        //OBSERVACIONES
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_gvLista_ctl03_btnRemover']/i");
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_OBS_ERVA']", "PRUEBACALIDAD");
                                        Thread.Sleep(3000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnEnvJefe']");
                                        //ENVIAR
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnEnvJefe')]");
                                        Thread.Sleep(3000);
                                        Screenshot("Registro Correcto", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(3000);
                                        Screenshot("Registro Exitoso", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        fv.ConvertWordToPDF(file, database);
                                        Thread.Sleep(2000);
                                    }
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void BP_SolicitudServicioalClienteSelfService()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_SolicitudServicioalClienteSelfService")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Servicio al Cliente 
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                 rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["NumSolicitud"].ToString().Length != 0 && rows["NumSolicitud"].ToString() != null &&
                                rows["DescSolicitud"].ToString().Length != 0 && rows["DescSolicitud"].ToString() != null &&
                                rows["SecSoli"].ToString().Length != 0 && rows["SecSoli"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null 
                               

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string url = rows["url"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string NumSolicitud = rows["NumSolicitud"].ToString();
                                string DescSolicitud = rows["DescSolicitud"].ToString();
                                string SecSoli = rows["SecSoli"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                               

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    string Borrar1Tabla = $"DELETE FROM BI_SSOLQ WHERE ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(Borrar1Tabla, database, user);

                                    string Borrar1Tabla1 = $"DELETE FROM BI_DSOLQ WHERE ACT_USUA='Kactus'";
                                    db.UpdateDeleteInsert(Borrar1Tabla1, database, user);

                                    string Borrar2Tabla = $"DELETE FROM BI_SOLQU WHERE COD_REPO='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(Borrar2Tabla, database, user);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    
                                    //INGRESO A SERVICIO AL CLIENTE INTERNO
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'SERVICIO CLIENTE INTERNO')]");
                                    selenium.Click("//a[contains(.,'SERVICIO CLIENTE INTERNO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Servicio Cliente Interno')]");
                                    selenium.Screenshot("Servicio al cliente Interno", true, file);                               
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    selenium.Screenshot("Servicio al cliente Nuevo", true, file);


                                    Thread.Sleep(2000);

                                    //TIPO DE SOLICITUD
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodTiso')]",TipoSolicitud);
                                    Thread.Sleep(1000);
                                    //NUMERO DE SOLICITUD
                                    selenium.SendKeys("//input[contains(@id,'txtNUM_SOLI')]", NumSolicitud);
                                    selenium.Scroll("//textarea[contains(@id,'KCtrlTxtDesHech_txtTexto')]");
                                    Thread.Sleep(1000);
                                    //DESCRIPCION DE SOLICITUD
                                    selenium.SendKeys("//textarea[contains(@id,'KCtrlTxtDesHech_txtTexto')]",DescSolicitud);
                                    Thread.Sleep(1000);

                                    //GUARDAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_Agregar2']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Guardada", true, file);


                                    Thread.Sleep(1000);
                                    //VENTANA EMERGENTE
                                    selenium.ChangeAuxWindow();
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Enviada", true, file);


                                    Thread.Sleep(500);
                                    selenium.ChangeMainWindow();
                                    Thread.Sleep(2000);

                                    //GENERACION CONSULTA VERIFICACION
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'SERVICIO CLIENTE INTERNO')]");
                                    selenium.Click("//a[contains(.,'SERVICIO CLIENTE INTERNO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Servicio Cliente Interno')]");
                                    selenium.Screenshot("Servicio al cliente Interno", true, file);
                                    selenium.Screenshot("Se Genera consulta para verificar registro Guardado", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }



        [TestMethod]
        public void GN_ReporteLiquidaciónVacacionesAcumulado()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_ReporteLiquidaciónVacacionesAcumulado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Liquidación vacaciones Acumuladas  
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["AñoLiquDesde"].ToString().Length != 0 && rows["AñoLiquDesde"].ToString() != null &&
                                rows["MesLiquDesde"].ToString().Length != 0 && rows["MesLiquDesde"].ToString() != null &&
                                rows["DiaLiquDesde"].ToString().Length != 0 && rows["DiaLiquDesde"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                                {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string AñoLiquDesde = rows["AñoLiquDesde"].ToString();
                                string MesLiquDesde = rows["MesLiquDesde"].ToString();
                                string DiaLiquDesde = rows["DiaLiquDesde"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ReporteLiquiVaca1.pdf");
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);

                                    //INGRESO A LIQUIDACION VACACIONES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //ACUMULADOS
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //CHECK LIQUIDACION
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'chkLiqVaca')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Seleccionar Liquidación Vacaciones", true, file);
                                    Thread.Sleep(500);
                                    //AÑO LIQUIDACION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlFecDesdA')]", AñoLiquDesde);
                                    Thread.Sleep(2000);
                                    //MES LIQUIDACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiquDesde);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(500);
                                    selenium.Scroll("//div[@id='printable']/table[3]/tbody/tr[3]/td[6]");
                                    selenium.Screenshot("Reporte Liquidación Vacaciones Generado", true, file);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ReporteLiquiVaca1");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ReporteLiquiVaca1.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_ReporteLiquidaciónVacacionesPrenomina()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_ReporteLiquidaciónVacacionesPrenomina")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Liquidación vacaciones Acumuladas  
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["AñoLiquDesde"].ToString().Length != 0 && rows["AñoLiquDesde"].ToString() != null &&
                                rows["MesLiquDesde"].ToString().Length != 0 && rows["MesLiquDesde"].ToString() != null &&
                                rows["DiaLiquDesde"].ToString().Length != 0 && rows["DiaLiquDesde"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string AñoLiquDesde = rows["AñoLiquDesde"].ToString();
                                string MesLiquDesde = rows["MesLiquDesde"].ToString();
                                string DiaLiquDesde = rows["DiaLiquDesde"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ReporteLiquiVaca2.pdf");
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);

                                    //INGRESO A LIQUIDACION VACACIONES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //PRENOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Prenomina", true, file);
                                    //CHECK LIQUIDACION
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'chkLiqVaca')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Seleccionar Liquidación Vacaciones", true, file);
                                    Thread.Sleep(500);
                                    //AÑO LIQUIDACION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlFecDesdA')]", AñoLiquDesde);
                                    Thread.Sleep(2000);
                                    //MES LIQUIDACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiquDesde);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(500);
                                    selenium.Scroll("//div[@id='printable']/table[3]/tbody/tr[3]/td[6]");
                                    selenium.Screenshot("Reporte Liquidación Vacaciones Generado", true, file);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ReporteLiquiVaca2");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ReporteLiquiVaca2.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(6000);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void NM_EnvíoCorreoMisVacaciones()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoMisVacaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (

                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Mis Vacaciones    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["FechaInicial"].ToString().Length != 0 && rows["FechaInicial"].ToString() != null &&
                                rows["FechaFinal"].ToString().Length != 0 && rows["FechaFinal"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["NumSolicitud"].ToString().Length != 0 && rows["NumSolicitud"].ToString() != null &&
                                rows["SecSolicitud"].ToString().Length != 0 && rows["SecSolicitud"].ToString() != null &&
                                 rows["CodEmpre"].ToString().Length != 0 && rows["CodEmpre"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string FechaInicial  = rows["FechaInicial"].ToString();
                                string FechaFinal = rows["FechaFinal"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string NumSolicitud = rows["NumSolicitud"].ToString();
                                string SecSolicitud = rows["SecSolicitud"].ToString();
                                string CodEmpre = rows["CodEmpre"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);


                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);
                                    
                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //NUEVA
                                    selenium.Click("//div[@id='ctl00_pBotones']/div/a[2]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nueva Solicitud de Vacaciones", true, file);
                                    //FECHA INICIO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaInicial);
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    //FECHA FINAL
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaFinal);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    //OBSERVACIONES
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KtxtObserSoli_txtTexto']", Observacion);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    Thread.Sleep(1200);
                                    //OBSERVACIONES
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KtxtObserSoli_txtTexto']", Observacion);
                                    Thread.Sleep(2000);
                                    //APLICAR
                                    selenium.Click("//div[@id='ctl00_pBotones']/div/a[3]");
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();                                 
                                    Thread.Sleep(2000);                                 
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Vacaciones registrado", true, file);
                                    Thread.Sleep(7000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(15000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
   }

        [TestMethod]
        public void NM_EnvíoCorreoVacacionesEnDinero()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
          // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoVacacionesEnDinero")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Mis Descansos en Dinero
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["DiasTomadosDin"].ToString().Length != 0 && rows["DiasTomadosDin"].ToString() != null &&
                                rows["AñoFechaInicial"].ToString().Length != 0 && rows["AñoFechaInicial"].ToString() != null &&
                                rows["MesFechaInicial"].ToString().Length != 0 && rows["MesFechaInicial"].ToString() != null &&
                                rows["DiaFechaInicial"].ToString().Length != 0 && rows["DiaFechaInicial"].ToString() != null &&
                                rows["TipSoli"].ToString().Length != 0 && rows["TipSoli"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                                {

                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string DiasTomadosDin = rows["DiasTomadosDin"].ToString();
                                string AñoFechaInicial = rows["AñoFechaInicial"].ToString();
                                string MesFechaInicial = rows["MesFechaInicial"].ToString();
                                string DiaFechaInicial = rows["DiaFechaInicial"].ToString();
                                string TipSoli = rows["TipSoli"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string FechaInicial= rows["FechaInicial"].ToString();
                                string FechaFinal= rows["FechaFinal"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                       database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    string Borrar1Tabla = $"DELETE FROM nm_prova WHERE cod_empl={EmpleadoUser} and aut_mint ={EmpleadoUser}";
                                    db.UpdateDeleteInsert(Borrar1Tabla, database, user);
                                    string Borrar2Tabla = $"DELETE from nm_soltr where cod_resp ={EmpleadoUser} and tip_apli = '{TipSoli}'";
                                    db.UpdateDeleteInsert(Borrar2Tabla, database, user);

                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MIS VACACIONES EN DINERO NUEVA SOLICITUD
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Mis vacaciones en Dinero')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Mis vacaciones en Dinero", true, file);
                                        //NUEVO
                                        selenium.Click("//div[@id='ctl00_pBotones']/div/a[2]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Nueva solicitud", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtDiaTomd']");
                                        Thread.Sleep(2000);
                                        //DIAS TOMADOS
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtDiaTomd']", DiasTomadosDin);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Días tomados", true, file);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(10000);
                                        //FECHA INICIO
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaInicial);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Fechas", true, file);
                                        Keyboard.SendKeys("{TAB}");
                                        //APLICAR
                                        selenium.Click("//div[@id='ctl00_pBotones']/div/a[2]");
                                        Thread.Sleep(5000);
                                        Thread.Sleep(2000);
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MIS VACACIONES EN DINERO NUEVA SOLICITUD
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Mis vacaciones en Dinero')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Mis vacaciones en Dinero Registrada", true, file);

                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void NM_EnvíoCorreoHorasExtra()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoHorasExtra")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Necesidades Formación    
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&

                                rows["HoraInicio"].ToString().Length != 0 && rows["HoraInicio"].ToString() != null &&
                                rows["HoraInicioSeg"].ToString().Length != 0 && rows["HoraInicioSeg"].ToString() != null &&
                                rows["HoraFinal"].ToString().Length != 0 && rows["HoraFinal"].ToString() != null &&
                                rows["HoraFinalSeg"].ToString().Length != 0 && rows["HoraFinalSeg"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["Justificacion"].ToString().Length != 0 && rows["Justificacion"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &
                                rows["FechaAnio"].ToString().Length != 0 && rows["FechaAnio"].ToString() != null &
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string HoraInicio = rows["HoraInicio"].ToString();
                                string HoraInicioSeg = rows["HoraInicioSeg"].ToString();
                                string HoraFinal = rows["HoraFinal"].ToString();
                                string HoraFinalSeg = rows["HoraFinalSeg"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string Justificacion = rows["Justificacion"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string url = rows["url"].ToString();
                                string FechaAnio = rows["FechaAnio"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    string BorrarSolicitud = $"DELETE from NM_SOLTR where COD_EMPR ='{CodEmpresa}' and COD_RESP ='{EmpleadoUser}' and ACT_USUA ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(BorrarSolicitud, database, user);

                                    string BorrarDetalle = $"Delete from NM_ORPRE where COD_EMPL= '{EmpleadoUser}' AND COD_EMPR ='{CodEmpresa}' and ACT_USUA ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(BorrarDetalle, database, user);

                                    if (database == "ORA")
                                    {
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Solicitud Horas Extras", true, file);
                                        //NUEVA SOLICITUD
                                        selenium.Click("//div[@id='ctl00_pBotones']/div/a[2]");
                                        selenium.Screenshot("Nueva solicitud", true, file);
                                        //SELECCIONAR EMPLEADO
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgNmOrpre_ctl02_chcod']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Empleado", true, file);
                                        //REGISTRAR
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnProgramar']");
                                        Thread.Sleep(2000);
                                        selenium.ScrollTo("0", "350");
                                        //DIA SIGUIENTE
                                        selenium.Click("//label[contains(.,'Día siguiente')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Dia Siguiente", true, file);
                                        //FECHA INICIO AÑO MES DIAS
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFecInicA')]", FechaAnio);
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFecInicM')]", FechaInicio);
                                        selenium.Screenshot("Fechas Inicio", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_DiasProg_ctl02_C20']");
                                        Thread.Sleep(2000);
                                        //HORA INICIO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlHorInic')]", HoraInicio);
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Hora Inicio", true, file);
                                        //HORA FINAL
                                        selenium.SelectElementByName("//select[contains(@id,'ddlHorFina')]", HoraFinal);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Hora Final", true, file);
                                        Thread.Sleep(2000);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodMhoe')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //CONCEPTO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodConc')]", Concepto);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Concepto", true, file);
                                        //JUSTIFICACION
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]");
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]", Justificacion);
                                        selenium.Screenshot("Registro Horas Extras", true, file);
                                        Thread.Sleep(2000);
                                        //GUARDAR 
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Noificación", true, file);
                                        Thread.Sleep(3000);
                                        for (int i = 0; i < 2; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(3000);
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Horas Extras Registrada", true, file);

                                    }
                                    else
                                    {
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Solicitud Horas Extras", true, file);
                                        //NUEVA
                                        selenium.Click("//div[@id='ctl00_pBotones']/div/a[2]");
                                        selenium.Screenshot("Nueva solicitud", true, file);
                                        Thread.Sleep(1500);
                                        //SELECCIONAR EMPLEADO
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgNmOrpre_ctl02_chcod']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Empleado", true, file);
                                        //REGISTRAR
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnProgramar']");
                                        Thread.Sleep(2000);
                                        selenium.ScrollTo("0", "350");
                                        //DIA SIGUIENTE
                                        selenium.Click("//label[contains(.,'Día siguiente')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Dia Siguiente", true, file);
                                        //FECHA INICIO AÑO MES DIAS
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFecInicA')]", FechaAnio);
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFecInicM')]", FechaInicio);
                                        selenium.Screenshot("Fecha Inicio", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_DiasProg_ctl02_C20']");
                                        Thread.Sleep(2000);
                                        //HORA INICIO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlHorInic')]", HoraInicio);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Horas Incio", true, file);
                                        Thread.Sleep(2000);
                                        //HORA FINAL
                                        selenium.SelectElementByName("//select[contains(@id,'ddlHorFina')]", HoraFinal);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Horas Final", true, file);
                                        Thread.Sleep(2000);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodMhoe')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //CONCEPTO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodConc')]", Concepto);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Concepto", true, file);
                                        //JUSTIFICACION
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]");
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtJustif_txtTexto')]", Justificacion);
                                        selenium.Screenshot("Registro Horas Extras", true, file);
                                        Thread.Sleep(2000);
                                        //GUARDAR 
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Noificación", true, file);
                                        Thread.Sleep(3000);
                                        for (int i = 0; i < 2; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(3000);
                                        //MIS SOLICITUDES 
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Mis Solicitudes", true, file);
                                        //MI SOLICITUD DE HORAS EXTRAS 
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Solicitud Horas Extras')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud Horas Extras Registrada", true, file);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(8000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                        {
                                            var separator = string.Format("{0}{0}", Environment.NewLine);
                                            string errorMessageString = string.Join(separator, errorsTest);

                                            Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                        }
                                        Thread.Sleep(3000);
                                        bandera = true;

                                        DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                        string SthCount = null;
                                        foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                        {
                                            SthCount = rowsta["CountDes"].ToString();
                                            int StCount = Int32.Parse(SthCount);

                                            if (StCount > 0)
                                            {
                                                int NewCount = StCount - 1;
                                                DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                                if (NewCount == 0)
                                                {
                                                    DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                    break;
                                                }
                                            }
                                        }
                                        break;
                                    }
                                    catch (Exception e)
                                    {
                                        Thread.Sleep(500);
                                        bandera = true;
                                        DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                        string SthCount = null;
                                        foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                        {
                                            SthCount = rowsta["CountDes"].ToString();

                                            int StCount = Int32.Parse(SthCount);
                                            if (StCount > 0)
                                            {
                                                int NewCount = StCount - 1;
                                                DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                                if (NewCount == 0)
                                                {
                                                    DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                    break;
                                                }
                                            }
                                        }
                                        Assert.Fail(CaseId + " ::::::" + e.ToString());
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    }
                    else
                    {
                        errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                    }
                }
                if (bandera == false)
                {
                    if (errorMessages.Count > 0)
                    {
                        var separator = string.Format("{0}{0}", Environment.NewLine);
                        string errorMessageString = string.Join(separator, errorMessages);

                        Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                        Environment.NewLine, errorMessageString));
                    }
                }

            }

        [TestMethod]
        public void NM_EnvíoCorreoCesantías()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
           

            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoCesantías")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Cesantias
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Remite"].ToString().Length != 0 && rows["Remite"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["MotivoSolicitud"].ToString().Length != 0 && rows["MotivoSolicitud"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["Observacion1"].ToString().Length != 0 && rows["Observacion1"].ToString() != null &&
                                rows["Observacion2"].ToString().Length != 0 && rows["Observacion2"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )

                              {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Remite = rows["Remite"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string MotivoSolicitud = rows["MotivoSolicitud"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string Observacion1 = rows["Observacion1"].ToString();
                                string Observacion2 = rows["Observacion2"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTROS PREVIOS

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                        string eliminarConflicto = $"Delete from NM_REQCE where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarConflicto, database, user);

                                        string eliminarCesantia = $"Delete from NM_CESPA where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarCesantia, database, user);
                                   
                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    
                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS CESANTIAS
                                    Thread.Sleep(200);
                                    selenium.Scroll("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    selenium.Click("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    Thread.Sleep(200);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div/a[2]");
                                    Thread.Sleep(200);
                                    //Motivo solicitud 
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMces')]", MotivoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //Tipo de solicitud 
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipSoli')]", TipoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Solicitud", true, file);
                                    //Valor solicitado 
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]", ValorSolicitado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargar Datos Iniciales", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'txtObsSeva_txtTexto')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[contains(@id,'txtObsSeva_txtTexto')]",Observacion1);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys(("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]"), Observacion2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Observaciones Finales", true, file);
                                    //GUARDAR EDICION
                                    selenium.Click("//div[@id='ctl00_pBotones']/div/a[3]");
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Registrada con Éxito", true, file);
                                    Thread.Sleep(5000);
                                    //MIS SOLICITUDES 
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS CESANTIAS
                                    Thread.Sleep(200);
                                    selenium.Scroll("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    selenium.Click("//a[contains(@href, 'frmNmCesanL.aspx')]");
                                    Thread.Sleep(200);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(12000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaAcumulado()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_DesprendibleNóminaAcumulado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ComprobanteAcumulados.pdf");
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //ACUMULADO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Acumulado", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ComprobanteAcumulados");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ComprobanteAcumulados.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_DesprendibleNóminaPrenómina()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_DesprendibleNóminaPrenómina")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["AñoLiqu"].ToString().Length != 0 && rows["AñoLiqu"].ToString() != null &&
                                rows["MesLiqu"].ToString().Length != 0 && rows["MesLiqu"].ToString() != null &&
                                rows["DiaLiqu"].ToString().Length != 0 && rows["DiaLiqu"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string AñoLiqu = rows["AñoLiqu"].ToString();
                                string MesLiqu = rows["MesLiqu"].ToString();
                                string DiaLiqu = rows["DiaLiqu"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDescargaORA1 = dateAndTime.ToString("dd-MM-yyyy.HH-mm-ss");
                                string FechaDescargaORA2 = dateAndTime.ToString("dd-MM-yyyy");
                                string FechaDescargaSQL = dateAndTime.Date.ToString("yyyyMMdd");
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ComprobantePrenomina.pdf");
                                    //INGRESO A MIS REPORTES COMPROBANTE DE NOMINA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES/DESPRENDIBLE NOMINA
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'chkDesNomi')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comprobante de Nómina", true, file);
                                    Thread.Sleep(2000);
                                    //PRENOMINA
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //INGRESO AÑO 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdA']", AñoLiqu);
                                    Thread.Sleep(2000);
                                    //INGRESO DE MES 
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlFecDesdM']", MesLiqu);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seleccionar Fechas de Reporte", true, file);
                                    Thread.Sleep(1000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(1300);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Desprendible de Nómina", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ComprobantePrenomina");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ComprobantePrenomina.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CertificadoCesantíasPendientes()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoCesantíasPendientes")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Cesantias Pendientes     
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    File.Delete("C:/Users/kactusscm/Downloads/Reporte1.pdf");
                                    File.Delete("C:/Users/kactusscm/Downloads/Reporte2.pdf");
                                    //INGRESO A MIS REPORTES
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);


                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);


                                    Thread.Sleep(500);

                                    //PRENOMINA

                                    //CLICK EN PRENOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //CESANTIAS PENDIENTES
                                    selenium.Click("//input[contains(@id,'chkCesPend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Cesantías Pendientes Prenómina", true, file);
                                    Thread.Sleep(500);
                                    //GENERAR REPORTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Reporte Cesantías Pendientes", true, file);
                                    //DIAS TRABAJADOS
                                    selenium.Scroll("//span[contains(@id,'dias_trab')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Cesantías Pendientes No 1", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("Reporte1");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/Reporte1.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //------------------------------------------------------Acumulado--------------------------------------------------------
                                    //INGRESO A MIS REPORTES
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(500);
                                    //CLICK EN ACUMULADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnAcumulados']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Acumulados", true, file);
                                    //CESANTIAS PENDIENTES
                                    selenium.Click("//input[contains(@id,'chkCesPend')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Cesantías Pendientes Acumulados", true, file);
                                    Thread.Sleep(500);
                                    //GENERAR REPORTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Reporte Cesantías Pendientes", true, file);
                                    //DIAS TRABAJADOS
                                    selenium.Scroll("//span[contains(@id,'dias_trab')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Cesantías Pendientes No 2", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);

                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("Reporte2");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath2 = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/Reporte2.pdf");
                                    Process.Start(pdfPath2);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_CertificadoVacacionesPendientes()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoVacacionesPendientes")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ReporteVacacionesPen.pdf");
                                    File.Delete("C:/Users/kactusscm/Downloads/ReporteVacacionesPen1.pdf");
                                    //ACUMULADOS
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //CHECK VACACIONES PENDIENTES
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkVacPend']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones Pendientes", true, file);
                                    Thread.Sleep(2000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    Thread.Sleep(1300);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ReporteVacacionesPen");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ReporteVacacionesPen.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(6000);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);

                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    LimpiarProcesos();

                                    //PRENOMINA
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //PRENOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rbnPrenomina']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prenómina", true, file);
                                    //CHECK VACACIONES PENDIENTES
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkVacPend']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones Pendientes", true, file);
                                    Thread.Sleep(2000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    Thread.Sleep(1300);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ReporteVacacionesPen1");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath1 = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ReporteVacacionesPen1.pdf");
                                    Process.Start(pdfPath1);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    LimpiarProcesos();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void GN_CertificadoIngresosyRetenciones()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            List<string> DocumentsDownload = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoIngresosyRetenciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();
                        DateTime dateAndTime = DateTime.Now;

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Desprendible Pago Nómina // caso por imprimir,Descargar PDF, Envio correo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Año = rows["Año"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/CertificadoIngresoRetenciones.pdf");
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Puesto de Trabajo", true, file);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //CERIFICADO INGRESO Y RETENCIONES
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkCerInre']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Certificado Ingreso y Retenciones", true, file);
                                    Thread.Sleep(2000);
                                    //AÑO 
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_yycert']", Año);
                                    Thread.Sleep(2000);
                                    //GENERAR COMPROBANTE
                                    selenium.Click("//a[contains(@id,'btnGenerar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(2000);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(3000);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Certificado Ingreso Y Retenciones", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("CertificadoIngresoRetenciones");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoIngresoRetenciones.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        
        [TestMethod]
        public void SL_AprobacionJefeRequisicionDePersonalEmpresa()
        {
           
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();

            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_AprobacionJefeRequisicionDePersonalEmpresa")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login Requisición Personal 
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisición Personal 
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["GrupoRequisiciones"].ToString().Length != 0 && rows["GrupoRequisiciones"].ToString() != null &&
                                rows["FormaCobertura"].ToString().Length != 0 && rows["FormaCobertura"].ToString() != null &&
                                rows["FiltroSeleccion"].ToString().Length != 0 && rows["FiltroSeleccion"].ToString() != null &&
                                rows["FormaCobertura"].ToString().Length != 0 && rows["FormaCobertura"].ToString() != null &&
                                rows["CentroCosto"].ToString().Length != 0 && rows["CentroCosto"].ToString() != null &&
                                rows["NumPlaza"].ToString().Length != 0 && rows["NumPlaza"].ToString() != null &&
                                rows["CargoProveer"].ToString().Length != 0 && rows["CargoProveer"].ToString() != null &&
                                rows["MotivoSolicitud"].ToString().Length != 0 && rows["MotivoSolicitud"].ToString() != null &&
                                rows["Contrato"].ToString().Length != 0 && rows["Contrato"].ToString() != null &&
                                rows["TipoContrato"].ToString().Length != 0 && rows["TipoContrato"].ToString() != null &&
                               
                               rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["PublicarSueldo"].ToString().Length != 0 && rows["PublicarSueldo"].ToString() != null &&
                                rows["ListaRequisiciones"].ToString().Length != 0 && rows["ListaRequisiciones"].ToString() != null &&
                                rows["CODGRSE"].ToString().Length != 0 && rows["CODGRSE"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["CargoSolicitado"].ToString().Length != 0 && rows["CargoSolicitado"].ToString() != null &&
                                rows["CargoAprueba"].ToString().Length != 0 && rows["CargoAprueba"].ToString() != null &&
                                rows["CodCenCos"].ToString().Length != 0 && rows["CodCenCos"].ToString() != null &&
                                rows["EmpresaResponsable"].ToString().Length != 0 && rows["EmpresaResponsable"].ToString() != null &&
                                // Datos Aprobador No.1
                                rows["AprobadorUser1"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["AprobadorPass1"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null 


                                )
                               {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string url = rows["url"].ToString();
                                string GrupoRequisiciones = rows["GrupoRequisiciones"].ToString();
                                string FormaCobertura = rows["FormaCobertura"].ToString();
                                string FiltroSeleccion = rows["FiltroSeleccion"].ToString();
                                string CentroCosto = rows["CentroCosto"].ToString();
                                string NumPlaza = rows["NumPlaza"].ToString();
                                string CargoProveer = rows["CargoProveer"].ToString();
                                string MotivoSolicitud = rows["MotivoSolicitud"].ToString();
                                string Contrato = rows["Contrato"].ToString();
                                string TipoContrato = rows["TipoContrato"].ToString();
                               
                                string Ciudad = rows["Ciudad"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string PublicarSueldo = rows["PublicarSueldo"].ToString();
                                string ListaRequisiciones = rows["ListaRequisiciones"].ToString();
                                string CODGRSE = rows["CODGRSE"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string CargoSolicitado = rows["CargoSolicitado"].ToString();
                                string CargoAprueba = rows["CargoAprueba"].ToString();
                                string CodCenCos = rows["CodCenCos"].ToString();
                                string EmpresaResponsable = rows["EmpresaResponsable"].ToString();
                                string AprobadorUser1 = rows["AprobadorUser1"].ToString();
                                string AprobadorPass1 = rows["AprobadorPass1"].ToString();
                                string Empresa = rows["Empresa"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];


                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{AprobadorUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);


                                    ////Comienzo de Prueba
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                        selenium.Screenshot("Selección de Personal", true, file);
                                        Thread.Sleep(200);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/ul/li/a");
                                        selenium.Screenshot("Requisición de Personal", true, file);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodEmpr']", Empresa);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Empresa", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//button[contains(.,'LIDER')]");
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                        selenium.Screenshot("Selección de Personal", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Requisición de Personal", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Empresa", true, file);
                                    }
                                   
                                    //CLIC NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    selenium.Screenshot("Requisición de Personal Nuevo", true, file);
                                    Thread.Sleep(2000);
                                    //GRUPO REQUI
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequisiciones);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Grupo", true, file);
                                    //FORMA COBERTURA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", FormaCobertura);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cobertura", true, file);
                                    //FILTRO SELECCION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FiltroSeleccion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Filro Selección", true, file);
                                    //CENTRO COSTO
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CentroCosto);
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Centro costo", true, file);
                                    //CARGO
                                    selenium.SendKeys("//input[contains(@id,'txtCodCarp')]", CargoProveer);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Cargo", true, file);
                                    //NUMERO PLAZA
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNroPlaz')]", NumPlaza);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Screenshot("Plazas", true, file);
                                    Thread.Sleep(1000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo Solicitud", true, file);
                                    selenium.Scroll("//select[contains(@id,'ddlVisSuew')]");
                                    Thread.Sleep(1500);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicarSueldo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar Sueldo", true, file);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", Contrato);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlContrDeta')]", TipoContrato);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Contrato", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    //OBSERVACIONES
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    //DETALLE
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ_txtTexto')]", Observacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    //CIUDAD
                                    Thread.Sleep(500);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Screenshot("Ciudad", true, file);
                                    Thread.Sleep(1000);
                                    //GUARDAR DATOS
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(10000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Guardar", true, file);
                                    Thread.Sleep(6000);
                                    selenium.Scroll("//td[8]/a/i");
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    ////Aprobador 
                                    selenium.LoginApps(app, AprobadorUser1, AprobadorPass1, url, file);
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                        Thread.Sleep(500);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/ul/li[2]/a");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Requisiciones por aprobar", true, file);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodEmpr']", Empresa);
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Empresa", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(.,'SELECCION PERSONAL')]");
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(.,'Aprobacion de Requisiciones')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Requisiciones por aprobar", true, file);
                                        Thread.Sleep(5000);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Empresa", true, file);
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipOrd_1']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(1000);

                                    if (selenium.ExistControl("//td[8]/a/i"))
                                    {

                                        selenium.Click("//td[8]/a/i");
                                        Thread.Sleep(2000);

                                        selenium.Screenshot("Elegir Requisición", true, file);

                                        Thread.Sleep(200);
                                        selenium.Scroll("//div[@id='printable']");
                                        selenium.Click("//td[6]/a/i");
                                        Thread.Sleep(200);
                                        selenium.Screenshot("Detalle", true, file);
                                        Thread.Sleep(200);
                                        selenium.Scroll("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(200);
                                        selenium.Click("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(500);
                                        Thread.Sleep(200);
                                        selenium.AcceptAlert();
                                        selenium.Screenshot("Aprueba Requisición", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Envia correo Requisición", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN REQUISICIONES POR APROBAR");
                                    }


                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);

                                        Thread.Sleep(3000);
                                        if (errorsTest.Count > 0)
                                        {
                                            var separator = string.Format("{0}{0}", Environment.NewLine);
                                            string errorMessageString = string.Join(separator, errorsTest);

                                            Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                        }

                                        Thread.Sleep(3000);
                                        bandera = true;

                                        DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                        string SthCount = null;
                                        foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                        {
                                            SthCount = rowsta["CountDes"].ToString();
                                            int StCount = Int32.Parse(SthCount);

                                            if (StCount > 0)
                                            {
                                                int NewCount = StCount - 1;
                                                DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                                if (NewCount == 0)
                                                {
                                                    DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                    break;
                                                }
                                            }
                                        }
                                        break;
                                    }
                                    catch (Exception e)
                                    {
                                        Thread.Sleep(500);
                                        bandera = true;
                                        DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                        string SthCount = null;
                                        foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                        {
                                            SthCount = rowsta["CountDes"].ToString();

                                            int StCount = Int32.Parse(SthCount);
                                            if (StCount > 0)
                                            {
                                                int NewCount = StCount - 1;
                                                DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                                if (NewCount == 0)
                                                {
                                                    DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                    break;
                                                }
                                            }
                                        }
                                        Assert.Fail(CaseId + " ::::::" + e.ToString());
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    }
                    else
                    {
                        errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                    }
                }
                if (bandera == false)
                {
                    if (errorMessages.Count > 0)
                    {
                        var separator = string.Format("{0}{0}", Environment.NewLine);
                        string errorMessageString = string.Join(separator, errorMessages);

                        Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                     Environment.NewLine, errorMessageString));
                    }
                }

            }
        [TestMethod]

        public void SL_FlujoAprobaciónRequisicionesCargoSolicitado()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_FlujoAprobaciónRequisicionesCargoSolicitado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login Requisición Personal 
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                 rows["AprobadorUser1"].ToString().Length != 0 && rows["AprobadorUser1"].ToString() != null &&
                                rows["AprobadorPass1"].ToString().Length != 0 && rows["AprobadorPass1"].ToString() != null &&
                                 rows["AprobadorUser2"].ToString().Length != 0 && rows["AprobadorUser2"].ToString() != null &&
                                rows["AprobadorPass2"].ToString().Length != 0 && rows["AprobadorPass2"].ToString() != null &&

                                //Datos Requisición Personal 
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["GrupoRequisiciones"].ToString().Length != 0 && rows["GrupoRequisiciones"].ToString() != null &&
                                rows["FormaCobertura"].ToString().Length != 0 && rows["FormaCobertura"].ToString() != null &&
                                rows["FiltroSeleccion"].ToString().Length != 0 && rows["FiltroSeleccion"].ToString() != null &&
                                rows["CentroCosto"].ToString().Length != 0 && rows["CentroCosto"].ToString() != null &&
                                rows["NumPlaza"].ToString().Length != 0 && rows["NumPlaza"].ToString() != null &&
                                rows["CargoProveer"].ToString().Length != 0 && rows["CargoProveer"].ToString() != null &&
                                rows["MotivoSolicitud"].ToString().Length != 0 && rows["MotivoSolicitud"].ToString() != null &&
                                rows["Contrato"].ToString().Length != 0 && rows["Contrato"].ToString() != null &&
                                rows["TipoContrato"].ToString().Length != 0 && rows["TipoContrato"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["PublicarSueldo"].ToString().Length != 0 && rows["PublicarSueldo"].ToString() != null &&
                                rows["ListaRequisiciones"].ToString().Length != 0 && rows["ListaRequisiciones"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["CodMotivo"].ToString().Length != 0 && rows["CodMotivo"].ToString() != null &&
                                rows["CargoSolicitado"].ToString().Length != 0 && rows["CargoSolicitado"].ToString() != null &&
                                rows["INDACTI"].ToString().Length != 0 && rows["INDACTI"].ToString() != null &&
                                rows["CargoAprueba"].ToString().Length != 0 && rows["CargoAprueba"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["CargoEspecifico"].ToString().Length != 0 && rows["CargoEspecifico"].ToString() != null 
                                // Datos Aprobador No.1
                               
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string url = rows["url"].ToString();
                                string GrupoRequisiciones = rows["GrupoRequisiciones"].ToString();
                                string FormaCobertura = rows["FormaCobertura"].ToString();
                                string FiltroSeleccion = rows["FiltroSeleccion"].ToString();
                                string CentroCosto = rows["CentroCosto"].ToString();
                                string NumPlaza = rows["NumPlaza"].ToString();
                                string CargoProveer = rows["CargoProveer"].ToString();
                                string MotivoSolicitud = rows["MotivoSolicitud"].ToString();
                                string Contrato = rows["Contrato"].ToString();
                                string TipoContrato = rows["TipoContrato"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string PublicarSueldo = rows["PublicarSueldo"].ToString();
                                string ListaRequisiciones = rows["ListaRequisiciones"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string CodMotivo = rows["CodMotivo"].ToString();
                                string CargoSolicitado = rows["CargoSolicitado"].ToString();
                                string INDACTI = rows["INDACTI"].ToString();
                                string CargoAprueba = rows["CargoAprueba"].ToString();
                                string CargoEspecifico = rows["CargoEspecifico"].ToString();
                                string AprobadorUser1 = rows["AprobadorUser1"].ToString();
                                string AprobadorPass1 = rows["AprobadorPass1"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string AprobadorUser2 = rows["AprobadorUser2"].ToString();
                                string AprobadorPass2 = rows["AprobadorPass2"].ToString();


                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{AprobadorUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{AprobadorUser2}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud2, database, user);


                                    ////Comienzo de Prueba
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Selección de Personal", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/ul/li/a");
                                    selenium.Screenshot("Requisición de Personal", true, file);
                                    Thread.Sleep(2000);
                                    //CLIC NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    selenium.Screenshot("Requisición de Personal Nuevo", true, file);
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        //GRUPO REQUISICION
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequisiciones);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Grupo Requisición", true, file);
                                        //FORMA COBERTURA
                                        selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", FormaCobertura);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Forma Cobertura", true, file);
                                        //FILTRO SELECCION
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FiltroSeleccion);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Filtro Selección", true, file);
                                        //CENTRO COSTO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CentroCosto);
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        selenium.Screenshot("Centro Costo", true, file);
                                        //NUMERO PLAZAS
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtNroPlaz')]");
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNroPlaz')]", NumPlaza);
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        selenium.Screenshot("Numero Plazas", true, file);
                                        //CARGO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCarp')]", CargoProveer);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Cargo a Proveer", true, file);
                                        Thread.Sleep(1000);
                                        //MOTIVO SOLICITUD
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoSolicitud);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Motivo", true, file);
                                        Thread.Sleep(1500);
                                        selenium.ScrollTo("0", "400");
                                        //PUBLICAR SUELDO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicarSueldo);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Publicar", true, file);
                                        //CONTRATO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", Contrato);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Contrato", true, file);
                                        //TIPO DE CONTRATO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlContrDeta')]", TipoContrato);////select[@id='ctl00_ContenidoPagina_ddlContrDeta']
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Tipo Contrato", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        selenium.ScrollTo("0","800");
                                        Thread.Sleep(1000);
                                        //OBSERVACIONES
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observacion);
                                        Thread.Sleep(1500);
                                        //DETALLE
                                        selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ_txtTexto')]", Observacion);
                                        Thread.Sleep(1500);
                                        selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(1000);
                                        //CIUDAD
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(1500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Datos Requisición ", true, file);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");                                 
                                        selenium.Screenshot("Ingreso de datos", true, file);
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        //GRUPO REQUISICION
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequisiciones);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Grupo Requisición", true, file);
                                        //FORMA COBERTURA
                                        selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", FormaCobertura);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Cobertura", true, file);
                                        //FILTRO SELECCION
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FiltroSeleccion);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Filtro", true, file);
                                        //CENTRO COSTO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CentroCosto);
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Centro Costo", true, file);
                                        //NUMERO PLAZAS
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtNroPlaz')]");
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNroPlaz')]", NumPlaza);
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Plazas", true, file);
                                        //CARGO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCarp')]", CargoProveer);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Cargo", true, file);
                                        Thread.Sleep(1000);
                                        //MOTIVO SOLICITUD
                                        selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoSolicitud);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Motivo", true, file);
                                        selenium.Scroll("//select[contains(@id,'ddlVisSuew')]");
                                        Thread.Sleep(1500);                                     
                                        //PUBLICAR SUELDO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicarSueldo);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Publicar", true, file);
                                        //CONTRATO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", Contrato);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Contrato", true, file);
                                        //TIPO DE CONTRATO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlContrDeta')]", TipoContrato);////select[@id='ctl00_ContenidoPagina_ddlContrDeta']
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Ingreso de datos", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                        Thread.Sleep(1000);
                                        //OBSERVACIONES
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observacion);
                                        Thread.Sleep(1500);
                                        //DETALLE
                                        selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ_txtTexto')]", Observacion);
                                        Thread.Sleep(1500);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Observaciones", true, file);
                                        //CIUDAD
                                        selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(1500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                        Thread.Sleep(1500);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        selenium.Screenshot("Ingreso de datos", true, file);
                                        Thread.Sleep(1000);
                                      
                                    }
                                    //GUARDAR DATOS
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(5000);
                                    selenium.Scroll("//td[8]/a/i");
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    selenium.Close();


                                    //Aprobador 1
                                    selenium.LoginApps(app, AprobadorUser1, AprobadorPass1, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Aprobador Rol Lider", true, file);
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/ul/li[2]/a");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipOrd_1']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(1000);

                                    if (selenium.ExistControl("//td[8]/a/i"))
                                    {

                                        Thread.Sleep(5000);
                                        selenium.Click("//td[8]/a/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Elegir Requisición", true, file);
                                        Thread.Sleep(200);
                                        selenium.Scroll("//div[@id='printable']");
                                        selenium.Click("//td[6]/a/i");
                                        Thread.Sleep(200);
                                        selenium.Screenshot("Cargo Solicitado Requisición", true, file);
                                        Thread.Sleep(200);
                                        selenium.Scroll("//input[contains(@id,'Aprueba')]");
                                        selenium.Click("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(500);
                                        Thread.Sleep(200);
                                        selenium.AcceptAlert();
                                        selenium.Screenshot("Aprueba Requisición", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Envia correo Requisición", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN REQUISICIONES POR APROBAR");
                                    }

                                    //ENVIO CORREO
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Envia Correo Aprobación", true, file);
                                    selenium.Click("//input[contains(@id,'btnEnviar')]");
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //Aprobador 2
                                    selenium.LoginApps(app, AprobadorUser2, AprobadorPass2, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Aprobador Rol Lider", true, file);
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/ul/li[2]/a");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipOrd_1']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(1000);

                                    if (selenium.ExistControl("//td[8]/a/i"))
                                    {

                                        Thread.Sleep(5000);
                                        selenium.Click("//td[8]/a/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Elegir Requisición", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//div[@id='printable']");
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_Estsoli_ctl03_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Cargo Solicitado Requisición", true, file);
                                        Thread.Sleep(200);
                                        selenium.Scroll("//input[contains(@id,'Aprueba')]");
                                        selenium.Click("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprueba Requisición", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Envia correo Requisición", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN REQUISICIONES POR APROBAR");
                                    }

                                    //ENVIO CORREO
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Envia Correo Aprobación", true, file);
                                    selenium.Click("//input[contains(@id,'btnEnviar')]");
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //VERIFICAR
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/a");
                                    selenium.Screenshot("Selección de Personal", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[2]/ul/li/a");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Requisición de Personal", true, file);
                                    //DETALLE
                                    selenium.Click("//*[@id='tablaDatos']/tbody/tr/td[7]/a");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Requisición Aprobada", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(3000);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]

        public void FD_FlujoAprobaciónNecesidadesFormaciónRolLider()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FlujoAprobaciónNecesidadesFormaciónRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Necesidades Formación   
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["Registro"].ToString().Length != 0 && rows["Registro"].ToString() != null &&
                                rows["Curso"].ToString().Length != 0 && rows["Curso"].ToString() != null &&
                                rows["Perspectiva"].ToString().Length != 0 && rows["Perspectiva"].ToString() != null &&
                                rows["Justificacion"].ToString().Length != 0 && rows["Justificacion"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["CentroCosto"].ToString().Length != 0 && rows["CentroCosto"].ToString() != null &&
                                rows["CodCurso"].ToString().Length != 0 && rows["CodCurso"].ToString() != null &&
                                rows["TipoDocumentAdjunto"].ToString().Length != 0 && rows["TipoDocumentAdjunto"].ToString() != null
                                //rows["CodNiv2"].ToString().Length != 0 && rows["CodNiv2"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string Registro = rows["Registro"].ToString();
                                string Curso = rows["Curso"].ToString();
                                string Perspectiva = rows["Perspectiva"].ToString();
                                string Justificacion = rows["Justificacion"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string CentroCosto = rows["CentroCosto"].ToString();
                                string CodCurso = rows["CodCurso"].ToString();
                                //string CodNiv2 = rows["CodNiv2"].ToString();
                                //string EstadoFormacion = rows["EstadoFormacion"].ToString();
                                string TipoDocumentAdjunto = rows["TipoDocumentAdjunto"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                     if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                     if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarNecesidad, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);


                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(500);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                    }

                                    Thread.Sleep(1000);

                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    selenium.Screenshot("Crear registro", true, file);
                                    //REGISTRO
                                    Thread.Sleep(2200);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomRegi')]", Registro);
                                    Thread.Sleep(2200);
                                    selenium.Screenshot("Registro", true, file);
                                    //CURSO
                                    Thread.Sleep(2200);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomCurs')]", Curso);
                                    Thread.Sleep(2200);
                                    selenium.Screenshot("Curso", true, file);
                                    //PERSPECTIVA
                                    Thread.Sleep(2200);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodPers')]", Perspectiva);
                                    Thread.Sleep(2200);
                                    selenium.Screenshot("Perspectiva", true, file);
                                    //JUSTIFICACION
                                    selenium.Scroll("//textarea[contains(@id,'txtJusSoli_txtTexto')]");
                                    selenium.SendKeys("//textarea[contains(@id,'txtJusSoli_txtTexto')]", Justificacion);
                                    Thread.Sleep(2200);
                                    selenium.Screenshot("Justificación", true, file);
                                    //OBSERVACIONES 
                                    Thread.Sleep(200);
                                    selenium.Scroll("//textarea[contains(@id,'txtObsErva_txtTexto')]");
                                    selenium.SendKeys("//textarea[contains(@id,'txtObsErva_txtTexto')]", Observacion);              
                                    selenium.Screenshot("Datos diligenciados en Formulario", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(5000);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Necesidad de Formación Enviada", true, file);
                                    Thread.Sleep(4000);
                                    selenium.Close();

                                    if (database == "SQL")
                                    {
                                        //APERTURA LIDER PARA APROBACION DE LA FORMACION
                                        Thread.Sleep(2000);
                                        selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                        selenium.Screenshot("Formación y Desarrollo", true, file);
                                        Thread.Sleep(200);
                                        selenium.Scroll("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Aprobación de Necesidades de Formación", true, file);
                                        Thread.Sleep(500);

                                        if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]"))
                                        {
                                            selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]");
                                            Thread.Sleep(500);
                                            selenium.Screenshot("Detalle Aprobación de Necesidades de Formación", true, file);
                                            selenium.Click("//div[@id='ctl00_pBotones']/div");
                                            selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_btnAprobar')]");
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnAprobar')]");
                                            Thread.Sleep(2000);
                                            Screenshot("Alerta Aprobación 1", true, file);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(2000);
                                            Screenshot("Alerta Aprobación 2", true, file);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(1000);
                                            selenium.Screenshot("Acción Exitosa", true, file);
                                        }
                                        else
                                        {
                                            Assert.Fail("ERROR: NO HAY NECESIDADES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                        }

                                        selenium.Close();

                                    }
                                    else
                                    {
                                        //APERTURA LIDER PARA APROBACION DE LA FORMACION
                                        Thread.Sleep(2000);
                                        selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                        selenium.Screenshot("Formación y Desarrollo", true, file);
                                        Thread.Sleep(200);
                                        selenium.Scroll("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Aprobación de Necesidades de Formación", true, file);
                                        
                                        Thread.Sleep(500);

                                        if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]"))
                                        {
                                            selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]");
                                            Thread.Sleep(500);
                                            selenium.Screenshot("Detalle Aprobación de Necesidades de Formación", true, file);
                                            selenium.Click("//div[@id='ctl00_pBotones']/div");
                                            selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_btnAprobar')]");
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnAprobar')]");
                                            Thread.Sleep(2000);
                                            Screenshot("Alerta Aprobación 1", true, file);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(2000);
                                            Screenshot("Alerta Aprobación 2", true, file);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(1000);
                                            selenium.Screenshot("Acción Exitosa", true, file);
                                        }
                                        else
                                        {
                                            Assert.Fail("ERROR: NO HAY NECESIDADES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                        }

                                        selenium.Close();
                                    }

                                    // Abrir para verificar que la Necesidad de Formación fue aprobada 
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    selenium.Screenshot("Mis Cursos", true, file);
                                    Thread.Sleep(500);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                    }

                                    selenium.Screenshot("Necesidades Formación", true, file);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Necesidades Formación Aprobadas", true, file);
                                    Thread.Sleep(3000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]

        public void FD_FlujoRechazoNecesidadesFormaciónRolLider()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FlujoRechazoNecesidadesFormaciónRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                         
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Necesidades Formación Rechazo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["Registro"].ToString().Length != 0 && rows["Registro"].ToString() != null &&
                                rows["Curso"].ToString().Length != 0 && rows["Curso"].ToString() != null &&
                                rows["Perspectiva"].ToString().Length != 0 && rows["Perspectiva"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["CentroCosto"].ToString().Length != 0 && rows["CentroCosto"].ToString() != null &&
                                //rows["CodPersona"].ToString().Length != 0 && rows["CodPersona"].ToString() != null &&
                                //rows["EstadoFormacion"].ToString().Length != 0 && rows["EstadoFormacion"].ToString() != null &&
                                rows["TipoDocumentAdjunto"].ToString().Length != 0 && rows["TipoDocumentAdjunto"].ToString() != null &&
                                rows["CodCurso"].ToString().Length != 0 && rows["CodCurso"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string Registro = rows["Registro"].ToString();
                                string Curso = rows["Curso"].ToString();
                                string Perspectiva = rows["Perspectiva"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string CentroCosto = rows["CentroCosto"].ToString();
                                //string CodPersona = rows["CodPersona"].ToString();
                                //string EstadoFormacion = rows["EstadoFormacion"].ToString();
                                string CodCurso = rows["CodCurso"].ToString();
                                string TipoDocumentAdjunto = rows["TipoDocumentAdjunto"].ToString();


                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarNecesidad, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    //INICIO PROGRAMA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(500);
                                 
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        Thread.Sleep(1500);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        Thread.Sleep(1500);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                    }
                                    Thread.Sleep(1000);

                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    selenium.Screenshot("Crear registro", true, file);
                                    Thread.Sleep(2000);
                                    //REGISTRO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomRegi')]", Registro);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro", true, file);
                                    //CURSO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomCurs')]", Curso);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Curso", true, file);
                                    //PERSPECTIVA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodPers')]", Perspectiva);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Perspectiva", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'txtObsErva_txtTexto')]");
                                    selenium.Click("//textarea[contains(@id,'txtObsErva_txtTexto')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[contains(@id,'txtObsErva_txtTexto')]", Observacion);                               
                                    selenium.Screenshot("Datos diligenciados en Formulario", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(5000);

                                    //INGRESO A MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(500);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        Thread.Sleep(1500);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        Thread.Sleep(1500);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Necesidad de Formación Enviada", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (database == "SQL")
                                    {
                                        //ABRIR LIDER PARA RECHAZAR LA NECESIDAD DE FORMACION
                                        Thread.Sleep(2000);
                                        selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                        Thread.Sleep(1500);
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(1500);
                                        selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                        selenium.Screenshot("Formación y Desarrollo", true, file);
                                        Thread.Sleep(1200);
                                        selenium.Scroll("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(1500);
                                        selenium.Click("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Aprobación de Necesidades de Formación", true, file);
                                        Thread.Sleep(1500);

                                        if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]"))
                                        {
                                            selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]");
                                            Thread.Sleep(1500);
                                            selenium.Click("//div[@id='ctl00_pBotones']/div");
                                            selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_btnRechasa')]");
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnRechasa')]");
                                            Screenshot("Alerta Rechazo", true, file);
                                            Thread.Sleep(5000);
                                           selenium.AcceptAlert();
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Rechazo Exitoso", true, file);

                                        }
                                        else
                                        {
                                            Assert.Fail("ERROR: NO HAY NECESIDADES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                        }

                                        Thread.Sleep(3000);
                                        selenium.Close();
                                    }
                                    else
                                    {
                                        //ABRIR LIDER PARA RECHAZAR LA NECESIDAD DE FORMACION
                                        Thread.Sleep(2000);
                                        selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                        Thread.Sleep(1500);
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(1500);
                                        selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                        selenium.Screenshot("Formación y Desarrollo", true, file);
                                        Thread.Sleep(1200);
                                        selenium.Scroll("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(1500);
                                        selenium.Click("//a[contains(.,'Aprobación de N. Formación')]");
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Aprobación de Necesidades de Formación", true, file);

                                        Thread.Sleep(1500);

                                        if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]"))
                                        {
                                            selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1')]");
                                            Thread.Sleep(1500);
                                            selenium.Click("//div[@id='ctl00_pBotones']/div");
                                            selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_btnRechasa')]");
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnRechasa')]");
                                            Thread.Sleep(5000);
                                            Screenshot("Alerta Rechazo", true, file);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Rechazo Exitoso", true, file);
                                        }
                                        else
                                        {
                                            Assert.Fail("ERROR: NO HAY NECESIDADES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                        }
                                        selenium.Close();


                                    }

                                    // Abrir para verificar que la Necesidad de Formación fue Rechazada 
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    selenium.Screenshot("Mis Cursos", true, file);
                                    Thread.Sleep(1500);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[9]/a");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[4]/ul/li[8]/a");
                                    }
                                    selenium.Screenshot("Necesidades Formación", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Necesidades Formación Aprobadas", true, file);
                                    Thread.Sleep(3000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_BeneficiosOrganizacionalesAprobaciónFamiliar()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();

            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_BeneficiosOrganizacionalesAprobaciónFamiliar")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null && 
                                //Datos Beneficios Organizacionales Aprobación
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["TipoAuxilio"].ToString().Length != 0 && rows["TipoAuxilio"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["AsuntoCorreo"].ToString().Length != 0 && rows["AsuntoCorreo"].ToString() != null &&
                                rows["BodyCorreo"].ToString().Length != 0 && rows["BodyCorreo"].ToString() != null &&
                                rows["CodigoSolicitud"].ToString().Length != 0 && rows["CodigoSolicitud"].ToString() != null &&
                                rows["TipoApli"].ToString().Length != 0 && rows["TipoApli"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null 


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string TipoAuxilio = rows["TipoAuxilio"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string AsuntoCorreo = rows["AsuntoCorreo"].ToString();
                                string BodyCorreo = rows["BodyCorreo"].ToString();
                                string CodigoSolicitud = rows["CodigoSolicitud"].ToString();
                                string TipoApli = rows["TipoApli"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Modalidad = rows["Modalidad"].ToString();
                                string Programa = rows["Programa"].ToString();
                                string Calendario = rows["Calendario"].ToString();
                                string TipIntensidad = rows["TipIntensidad"].ToString();
                                string TipDocumento = rows["TipDocumento"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewver/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    if (database == "SQL")
                                    {
                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_EMPL ='{EmpleadoUser}' and COD_BENE ='4545'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);
                                    }
                                    else
                                    {
                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_BENE ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);

                                    }
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//span[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a")));
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a");
                                    selenium.Screenshot("Beneficios Organizacionales", true, file);
                                    Thread.Sleep(200);

                                    //BENEFICIOS FAMILIAR
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_rbBenef_1')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Beneficio Familiar", true, file);
                                    if (database == "ORA")
                                    {
                                        //TIPO DE AUXILIO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlNomTibe')]", TipoAuxilio);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo auxilio", true, file);
                                        //INGRESAR NUMERO CUOTAS                   
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNomCuot']", "2");
                                        selenium.Screenshot("Entidad Beneficios", true, file);
                                        selenium.ScrollTo("0", "300");
                                        //TIPO DE DOCUMENTO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_KCtrTipoDocumento2_ddlTIP_DOCU']", "5 COPIAS DE LA CÉDULA LEGIBLES AMPLIADAS AL 150%");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo Documento", true, file);
                                        //SELECCIONAR FAMILIAR
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_chcod']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Familiar", true, file);
                                        //INGRESAR VALOR SOLICITADO
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_ValSoli']", ValorSolicitado);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Valor Solicitado", true, file);
                                        //AGREGAR OBSERVACIONES
                                        selenium.Scroll("//div[contains(@id,'printable')]");
                                        selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]", Observaciones);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Observaciones", true, file);
                                      
                                    }
                                    else
                                    {
                                        //TIPO DE AUXILIO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlNomTibe')]", TipoAuxilio);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo auxilio", true, file);
                                        //MODALIDAD
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlClaSifi')]", Modalidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Modalidad", true, file);
                                        //PROGRAMA
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlProGram')]", Programa);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Programa", true, file);
                                        //CALENDARIO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCalEnda')]", Calendario);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Calendario", true, file);
                                        //TIPO DE INTENSIDAD
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlSemEstr')]", TipIntensidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo intensidad", true, file);
                                        selenium.ScrollTo("0","600");
                                        Thread.Sleep(2000);
                                        //TIPO DOCUMENTO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento2_ddlTIP_DOCU')]", TipDocumento);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo documento", true, file);
                                        ////SELECCIONAR FAMILIAR
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_chcod']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Familiar", true, file);
                                        ////VALOR UNITARIO
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_ValSoli']", ValorSolicitado);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Valor solicitado", true, file);
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                        Thread.Sleep(2000);
                                        //OBSERVACIONES
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Observaciones", true, file);
                                    }
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("solicitud Guardada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeAuxWindow();
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Radicada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeMainWindow();
                                    Thread.Sleep(2000);
                                    //CONSULTAR TODO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Registrada", true, file);
                                    selenium.Close();

                                    //APROBACION POR JEFE
                                    //Aprobación por parte del Jefe 
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/ul/li/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aprobación Beneficios organizacionales", true, file);
                                    Thread.Sleep(500);

                                    if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i"))
                                    {
                                        selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Seleccionar Registro", true, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//td[6]/a/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Seleccionar Registro para Aprobación", true, file);
                                        Thread.Sleep(200);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Aprobación", true, file);
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//input[contains(@id,'txtAsuMail')]", AsuntoCorreo);
                                        selenium.SendKeys("//textarea[contains(@id,'txtCueMail')]", BodyCorreo);
                                        selenium.Screenshot("Información Correo Aprobación", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Envia Correo Aprobación", true, file);

                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO HAY BENEFICIOS ORGANIZACIONALES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file,database);
                                    Thread.Sleep(6000);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_BeneficiosOrganizacionalesAprobaciónColaborador()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();

            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_BeneficiosOrganizacionalesAprobaciónColaborador")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Beneficios Organizacionales Aprobación
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["TipoAuxilio"].ToString().Length != 0 && rows["TipoAuxilio"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["AsuntoCorreo"].ToString().Length != 0 && rows["AsuntoCorreo"].ToString() != null &&
                                rows["BodyCorreo"].ToString().Length != 0 && rows["BodyCorreo"].ToString() != null &&
                                rows["CodigoSolicitud"].ToString().Length != 0 && rows["CodigoSolicitud"].ToString() != null &&
                                rows["TipoApli"].ToString().Length != 0 && rows["TipoApli"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string TipoAuxilio = rows["TipoAuxilio"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string AsuntoCorreo = rows["AsuntoCorreo"].ToString();
                                string BodyCorreo = rows["BodyCorreo"].ToString();
                                string CodigoSolicitud = rows["CodigoSolicitud"].ToString();
                                string TipoApli = rows["TipoApli"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Modalidad = rows["Modalidad"].ToString();
                                string Programa = rows["Programa"].ToString();
                                string Calendario = rows["Calendario"].ToString();
                                string TipIntensidad = rows["TipIntensidad"].ToString();
                                string TipDocumento = rows["TipDocumento"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewver/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "ORA")
                                    {
                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_BENE ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);

                                    }else if (database == "SQL")
                                    {
                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_BENE ='{EmpleadoUser}' AND COD_TIBE='2'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);

                                    }

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//span[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);


                                    Thread.Sleep(1000);
                                    selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a")));
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a");
                                    selenium.Screenshot("Beneficios Organizacionales", true, file);

                                    //BENEFICIOS

                                    selenium.Click("//input[contains(@id,'rbBenef_0')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Beneficio colaborador", true, file);
                                    //TIPO DE AUXILIO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomTibe')]", TipoAuxilio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo auxilio", true, file);
                                    //INGRESAR ENTIDAD BENEFICIO  
                                    if (database == "ORA")
                                        {
                                            selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlEntBen')]", "Prueba");
                                            selenium.Screenshot("Entidad Beneficios", true, file);
                                         }   
                                     //INGRESAR VALOR SOLICITADO
                                     Thread.Sleep(2000);
                                     selenium.SendKeys("//input[contains(@id,'txtValSoli')]", ValorSolicitado);
                                     Thread.Sleep(2000);
                                     selenium.Screenshot("Valor Solicitado", true, file);
                                     //AGREGAR OBSERVACIONES
                                     selenium.Scroll("//div[contains(@id,'printable')]");
                                     selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]", Observaciones);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Observaciones", true, file);

                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Guardada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeAuxWindow();
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Radicada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeMainWindow();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //APROBACION POR JEFE
                                    //Aprobación por parte del Jefe 
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/ul/li/a");
                                    selenium.Screenshot("Aprobación Beneficios organizacionales", true, file);
                                    Thread.Sleep(500);

                                    if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i"))
                                    {
                                        selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i");
                                        selenium.Screenshot("Seleccionar Registro", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//td[6]/a/i");
                                        selenium.Screenshot("Seleccionar Registro para Aprobación", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        selenium.Screenshot("Aprobación", true, file);
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//input[contains(@id,'txtAsuMail')]", AsuntoCorreo);
                                        selenium.SendKeys("//textarea[contains(@id,'txtCueMail')]", BodyCorreo);
                                        selenium.Screenshot("Información Correo Aprobación", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Envia Correo Aprobación", true, file);

                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO HAY BENEFICIOS ORGANIZACIONALES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(6000);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void BP_BeneficiosOrganizacionalesRechazoFamiliar()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();

            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_BeneficiosOrganizacionalesRechazoFamiliar")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Beneficios Organizacionales Rechazo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["TipoAuxilio"].ToString().Length != 0 && rows["TipoAuxilio"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["TipoApli"].ToString().Length != 0 && rows["TipoApli"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string TipoAuxilio = rows["TipoAuxilio"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string TipoApli = rows["TipoApli"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Modalidad = rows["Modalidad"].ToString();
                                string Programa = rows["Programa"].ToString();
                                string Calendario = rows["Calendario"].ToString();
                                string TipIntensidad = rows["TipIntensidad"].ToString();
                                string TipDocumento = rows["TipDocumento"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewver/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTROS PREVIOS
                                    if (database == "SQL")
                                    {
                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_EMPL ='{EmpleadoUser}' and COD_BENE ='4545'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);
                                    }
                                    else
                                    {
                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_BENE ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);

                                    }


                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //BENEFICIOS ORGANIZACIONALES
                                    selenium.Click("//span[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a")));
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Beneficios Organizacionales", true, file);
                                    Thread.Sleep(200);
                                    //BENEFICIO FAMILIAR
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_rbBenef_1')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Beneficio Familiar", true, file);
                                    if (database == "ORA")
                                    {
                                        //TIPO DE AUXILIO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlNomTibe')]", TipoAuxilio);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo auxilio", true, file);
                                        //INGRESAR NUMERO CUOTAS                   
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNomCuot']", "2");
                                        selenium.Screenshot("Entidad Beneficios", true, file);
                                        selenium.ScrollTo("0", "300");
                                        //TIPO DE DOCUMENTO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_KCtrTipoDocumento2_ddlTIP_DOCU']", "5 COPIAS DE LA CÉDULA LEGIBLES AMPLIADAS AL 150%");
                                        selenium.Screenshot("Entidad Beneficios", true, file);
                                        //SELECCIONAR FAMILIAR
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_chcod']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Familiar", true, file);
                                        //INGRESAR VALOR SOLICITADO
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_ValSoli']", ValorSolicitado);
                                        Thread.Sleep(200);
                                        selenium.Screenshot("Valor Solicitado", true, file);
                                        //AGREGAR OBSERVACIONES
                                        selenium.Scroll("//div[contains(@id,'printable')]");
                                        selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]", Observaciones);
                                        selenium.Screenshot("Observaciones", true, file);

                                    }
                                    else
                                    {
                                        //TIPO DE AUXILIO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlNomTibe')]", TipoAuxilio);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo auxilio", true, file);
                                        //MODALIDAD
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlClaSifi')]", Modalidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Modalidad", true, file);
                                        //PROGRAMA
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlProGram')]", Programa);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Programa", true, file);
                                        //CALENDARIO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCalEnda')]", Calendario);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Calendario", true, file);
                                        //TIPO DE INTENSIDAD
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlSemEstr')]", TipIntensidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo intensidad", true, file);
                                        Thread.Sleep(2000);
                                        selenium.ScrollTo("0", "600");
                                        Thread.Sleep(2000);
                                        //TIPO DOCUMENTO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento2_ddlTIP_DOCU')]", TipDocumento);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo documento", true, file);
                                        ////SELECCIONAR FAMILIAR
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_chcod']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Familiar", true, file);
                                        ////VALOR UNITARIO
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_ValSoli']", ValorSolicitado);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Valor solicitado", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                        Thread.Sleep(2000);
                                        //OBSERVACIONES
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Observaciones", true, file);
                                    }
                                    // GUARDAR REGISTRO

                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Guardada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeAuxWindow();
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Radicada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeMainWindow();
                                    Thread.Sleep(2000);
                                    //CONSULTAR TODOS
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Registrada", true, file);
                                    selenium.Close();
                                    //APROBACION POR EL JEFE
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/ul/li/a");
                                    selenium.Screenshot("Aprobación Beneficios organizacionales", true, file);
                                    Thread.Sleep(500);
                                    if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i"))
                                    {

                                        selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Seleccionar Registro", true, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//td[6]/a/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Seleccionar Registro para Aprobación", true, file);
                                        Thread.Sleep(200);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Rechazo Beneficio", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Rechaza')]");
                                        Thread.Sleep(2000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Envia Correo Rechazo", true, file);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO HAY BENEFICIOS ORGANIZACIONALES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(1000);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void BP_BeneficiosOrganizacionalesRechazoColaborador()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> CargarDocumentos = new List<string>();
            List<string> errorMessages = new List<string>();

            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_BeneficiosOrganizacionalesRechazoColaborador")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Beneficios Organizacionales Rechazo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["TipoAuxilio"].ToString().Length != 0 && rows["TipoAuxilio"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["TipoApli"].ToString().Length != 0 && rows["TipoApli"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string TipoAuxilio = rows["TipoAuxilio"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string TipoApli = rows["TipoApli"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Modalidad = rows["Modalidad"].ToString();
                                string Programa = rows["Programa"].ToString();
                                string Calendario = rows["Calendario"].ToString();
                                string TipIntensidad = rows["TipIntensidad"].ToString();
                                string TipDocumento = rows["TipDocumento"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewver/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTROS PREVIOS

                                    if (database == "ORA")
                                    {
                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_BENE ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);

                                    }
                                    else if (database == "SQL")
                                    {
                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_BENE ='{EmpleadoUser}' AND COD_TIBE='2'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);

                                    }


                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //MIS SOLICITUDES
                                    selenium.Click("//span[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    Thread.Sleep(2000);
                                    selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a")));
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/ul/li[15]/a");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Beneficios Organizacionales", true, file);
                                    Thread.Sleep(200);

                                    //BENEFICIO
                                    selenium.Click("//input[contains(@id,'rbBenef_0')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Beneficio Colaborador", true, file);
                                    //INGRESO TIPO DE AUXILIO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomTibe')]", TipoAuxilio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo auxilio", true, file);
                                    //INGRESAR ENTIDAD BENEFICIO
                                    if (database == "ORA")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlEntBen')]", "Prueba");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Entidad", true, file);
                                    }   
                                    //INGRESAR VALOR SOLICITADO
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtValSoli')]", ValorSolicitado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Valor", true, file);
                                    selenium.Scroll("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]");
                                    //AGREGAR OBSERVACIONES
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]", "PRUEBA");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    // GUARDAR REGISTRO
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Guardada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeAuxWindow();
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Radicada", true, file);
                                    Thread.Sleep(500);
                                    selenium.ChangeMainWindow();
                                    Thread.Sleep(2000);
                                    //CONSULTAR TODOS
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Registrada", true, file);
                                    selenium.Close();

                                    //APROBACION POR EL JEFE
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    selenium.Click("//span[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Lider", true, file);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/a");
                                    Thread.Sleep(500);
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[12]/ul/li/a");
                                    selenium.Screenshot("Aprobación Beneficios organizacionales", true, file);
                                    Thread.Sleep(500);

                                    if (selenium.ExistControl("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i"))
                                    {

                                        selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_dtgBpOtobe_ctl03_LinkButton1')]/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Seleccionar Registro", true, file);
                                        Thread.Sleep(500);
                                        selenium.Click("//td[6]/a/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Seleccionar Registro para Aprobación", true, file);
                                        Thread.Sleep(200);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Rechaza')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Rechazo Beneficio", true, file);
                                        Thread.Sleep(1000);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Envia Correo Rechazo", true, file);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO HAY BENEFICIOS ORGANIZACIONALES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(1000);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]

        public void NM_FlujoAprobaciónLicenciasCalamidadesRolLider()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónLicenciasCalamidadesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Solicitud Licencias y Calamidades Aprobacion
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["NumContrato"].ToString().Length != 0 && rows["NumContrato"].ToString() != null &&
                                rows["CodLicencia"].ToString().Length != 0 && rows["CodLicencia"].ToString() != null &&
                                 rows["EstadoSolicitud"].ToString().Length != 0 && rows["EstadoSolicitud"].ToString() != null 



                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string NumContrato = rows["NumContrato"].ToString();
                                string CodLicencia = rows["CodLicencia"].ToString();
                                string EstadoSolicitud = rows["EstadoSolicitud"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //NUEVO
                                        selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Agregar Nuevo", true, file);
                                        Thread.Sleep(2000);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //FECHA
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha')]", Fecha);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Fecha", true, file);
                                        //OBSERVACIONES
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]");
                                        selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                        Thread.Sleep(3000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        selenium.Screenshot("Datos ingresados", true, file);
                                        selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                        Thread.Sleep(3000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        //GUARDAR
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Notificación Registro Exitoso", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                        Thread.Sleep(1000);

                                    }
                                    else
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(1500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //NUEVO
                                        selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Agregar Nuevo", true, file);
                                        Thread.Sleep(2000);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //FECHA
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha')]", Fecha);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Fecha", true, file);
                                        //OBSERVACIONES
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]");
                                        Thread.Sleep(2500);
                                        selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]");
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        selenium.Screenshot("Datos ingresados", true, file);
                                        Thread.Sleep(2500);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto')]", Observacion);
                                        Thread.Sleep(2500);
                                        //GUARDAR
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Notificacion Registro Exitoso", true, file);
                                        selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(3000);
                                    }
                                    //VALIDACION REGISTRO
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Solicitud Radicada", true, file);
                                    selenium.AcceptAlert();
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //Abrir en Rol Lider para Aprobar Licencia y/o Calamidad
                                    Thread.Sleep(2000);
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(500);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);
                                        Thread.Sleep(2500);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);
                                    }

                                        if (selenium.ExistControl("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i"))
                                        {
                                            //SELECCIONAR REGISTRO
                                            selenium.Screenshot("Seleccionar Registro Licencias y Calamidades", true, file);
                                            Thread.Sleep(2500);
                                            selenium.Click("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                            Thread.Sleep(2500);
                                            //REGISTRO POR APROBAR
                                            selenium.Screenshot("Registro para Aprobar", true, file);
                                            Thread.Sleep(2500);
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl02_LinkButton1']/i");
                                            Thread.Sleep(2500);
                                            //APROBACION
                                            selenium.Screenshot("Aprobar", true, file);
                                            Thread.Sleep(2500);
                                            selenium.Click("//input[contains(@id,'Aprueba')]");
                                            Thread.Sleep(2000);
                                            Screenshot("Solicitud Aprobada", true, file);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(5000);
                                            //ENVIO CORREO
                                            selenium.Screenshot("Envia Correo Aprobación", true, file);
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[contains(@id,'btnEnviar')]");
                                            Thread.Sleep(5000);
                                        }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    Thread.Sleep(5000);

                                    //VERIFICACION ESTADO APROBACION SOLICITUD
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //DETALLE
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Estado Aprobado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Close();

                                    }
                                    else
                                    {
                                        //INGRESO A MIS SOLICITUDES
                                        selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        Thread.Sleep(1500);
                                        selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                        selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                        //DETALLE
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Estado Aprobado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Close();
                                    }
                                    fv.ConvertWordToPDF(file, database);                     
                                    Thread.Sleep(2000);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]

        public void NM_FlujoRechazoLicenciasCalamidadesRolLider()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoRechazoLicenciasCalamidadesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Solicitud Licencias y Calamidades Rechazo
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["NumContrato"].ToString().Length != 0 && rows["NumContrato"].ToString() != null &&
                                rows["CodLicencia"].ToString().Length != 0 && rows["CodLicencia"].ToString() != null &&
                                rows["EstadoSolicitud"].ToString().Length != 0 && rows["EstadoSolicitud"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string NumContrato = rows["NumContrato"].ToString();
                                string CodLicencia = rows["CodLicencia"].ToString();
                                string EstadoSolicitud = rows["EstadoSolicitud"].ToString();
                                
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Licencias y calamidades", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMaus')]", Motivo);
                                    Thread.Sleep(2000);
                                    //FECHA
                                    selenium.SendKeys("//input[contains(@id,'KCtrlFechaFecDesd_txtFecha')]", Fecha);
                                    Thread.Sleep(2000);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]", Observacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Datos ingresados", true, file);
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos ingresados", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Notificación Guardado Exitoso", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                    Thread.Sleep(3000);
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1500);
                                    Screenshot("Solicitud Radicada", true, file);
                                    selenium.AcceptAlert();
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //Abrir en Rol Lider para Aprobar Licencia y/o Calamidad
                                    Thread.Sleep(2000);
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(5000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Líder", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(2000);
                                    }

                                        if (selenium.ExistControl("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i"))
                                        {
                                            //SELECCIONAR REGISTRO
                                            selenium.Screenshot("Seleccionar Registro Licencias y Calamidades", true, file);
                                            Thread.Sleep(2000);
                                            selenium.Click("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                            Thread.Sleep(2000);
                                            //REGISTRO POR APROBAR
                                            selenium.Screenshot("Registro para Rechazo", true, file);
                                            Thread.Sleep(2000);
                                            selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl02_LinkButton1']/i");
                                            Thread.Sleep(2000);
                                            //APROBACION
                                            selenium.Screenshot("Rechazo", true, file);
                                            Thread.Sleep(2000);
                                            selenium.Click("//input[contains(@id,'Rechaza')]");
                                            Thread.Sleep(2000);
                                            Screenshot("Alerta de Rechazo Exitosa", true, file);
                                            selenium.AcceptAlert();
                                            Thread.Sleep(5000);
                                            //ENVIO CORREO
                                            selenium.Screenshot("Envia Correo Rechazo", true, file);
                                            Thread.Sleep(5000);
                                            selenium.Click("//input[contains(@id,'btnEnviar')]");
                                            Thread.Sleep(5000);

                                        }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //VERIFICAR ESTADO SOLICITUD
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl03_LinkButton1']/i");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Estado Solicitud", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                    Environment.NewLine, errorMessageString));
                }
            }

        }


        [TestMethod]
        public void BP_SolicitudPréstamosConIntereses()
        {
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_SolicitudPréstamosConIntereses")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Observa"].ToString().Length != 0 && rows["Observa"].ToString() != null &&
                                rows["DesPrestamo"].ToString().Length != 0 && rows["DesPrestamo"].ToString() != null &&
                                rows["PagoMens"].ToString().Length != 0 && rows["PagoMens"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CuotaMens"].ToString().Length != 0 && rows["CuotaMens"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["Remodela"].ToString().Length != 0 && rows["Remodela"].ToString() != null &&
                                rows["ValInmueble"].ToString().Length != 0 && rows["ValInmueble"].ToString() != null &&
                                rows["Vigentes"].ToString().Length != 0 && rows["Vigentes"].ToString() != null &&
                                rows["Externas"].ToString().Length != 0 && rows["Externas"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["RmtSoli"].ToString().Length != 0 && rows["RmtSoli"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string Observa = rows["Observa"].ToString();
                                string DesPrestamo = rows["DesPrestamo"].ToString();
                                string PagoMens = rows["PagoMens"].ToString();
                                string CuotaMens = rows["CuotaMens"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string Remodela = rows["Remodela"].ToString();
                                string ValInmueble = rows["ValInmueble"].ToString();
                                string Vigentes = rows["Vigentes"].ToString();
                                string Externas = rows["Externas"].ToString();

                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string RmtSoli = rows["RmtSoli"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    List<string> errorsTest = new List<string>();
                                    List<string> errors = new List<string>();
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTRO
                                    string eliminarRegistro = $"DELETE bp_sopre where cod_empl='{EmpleadoUser}' and act_usua='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    string eliminarRegistro2 = $"DELETE bp_dsoli where act_usua='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//a[contains(.,'Mis Solicitudes de Préstamos Sin Interes')]");
                                    selenium.Click("//a[contains(.,'Mis Solicitudes de Préstamos Sin Interes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Préstamos Sin Interes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cerrar notificación", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("MIS SOLICITUDES DE PRÉSTAMOS SIN INTERÉS", true, file);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtDedExte')]");
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtDedExte')]", Externas);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Deudas Externas", true, file);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtComVige')]");
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtComVige')]", Vigentes);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Compromisos Vigentes", true, file);
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlNomPres')]", DesPrestamo);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Descripcion Préstamo", true, file);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValInmu')]", ValInmueble);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Valor inmueble", true, file);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValRemo')]", Remodela);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Valor remodelación", true, file);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValPres')]", CuotaMens);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Cuota mensual", true, file);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNumCuot')]", NumCuotas);
                                    Thread.Sleep(5000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNumCuot')]", NumCuotas);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Número cuotas", true, file);
                                    selenium.SendKeys("//*[@id=\"ctl00_ContenidoPagina_txtValCuot\"]", ValCuota);
                                    Thread.Sleep(5000);
                                    selenium.SendKeys("//*[@id=\"ctl00_ContenidoPagina_txtValCuot\"]", ValCuota);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Valor cuota", true, file);
                                    selenium.ScrollTo("0", "700");
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtPorCume')]", PagoMens);
                                    Thread.Sleep(5000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtPorCume')]", PagoMens);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Pago mensual", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']");
                                    Thread.Sleep(5000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observa);
                                    Thread.Sleep(5000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observa);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(10000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Registro", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//a[contains(.,'Mis Solicitudes de Préstamos Sin Interes')]");
                                    selenium.Click("//a[contains(.,'Mis Solicitudes de Préstamos Sin Interes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro", true, file);

                                    Thread.Sleep(4000);

                                    fv.ConvertWordToPDF(file, database);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(2000);
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BP_SolicitudPréstamo()
        {
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_SolicitudPréstamo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["SelectPrestamo"].ToString().Length != 0 && rows["SelectPrestamo"].ToString() != null &&
                                rows["ValorSol"].ToString().Length != 0 && rows["ValorSol"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["IngresosFam"].ToString().Length != 0 && rows["IngresosFam"].ToString() != null &&
                                rows["DedExterna"].ToString().Length != 0 && rows["DedExterna"].ToString() != null &&
                                rows["CompVigentes"].ToString().Length != 0 && rows["CompVigentes"].ToString() != null &&
                                rows["ValInmueble"].ToString().Length != 0 && rows["ValInmueble"].ToString() != null &&
                                rows["ValRemodel"].ToString().Length != 0 && rows["ValRemodel"].ToString() != null &&
                                rows["FechaSim1"].ToString().Length != 0 && rows["FechaSim1"].ToString() != null &&
                                rows["FechaSim2"].ToString().Length != 0 && rows["FechaSim2"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string SelectPrestamo = rows["SelectPrestamo"].ToString();
                                string ValorSol = rows["ValorSol"].ToString();

                                string user = rows["user"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string IngresosFam = rows["IngresosFam"].ToString();
                                string DedExterna = rows["DedExterna"].ToString();
                                string CompVigentes = rows["CompVigentes"].ToString();
                                string ValInmueble = rows["ValInmueble"].ToString();
                                string ValRemodel = rows["ValRemodel"].ToString();
                                string FechaSim1 = rows["FechaSim1"].ToString();
                                string FechaSim2 = rows["FechaSim2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    List<string> errorsTest = new List<string>();
                                    List<string> errors = new List<string>();
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);

                                    //ELIMINAR REGISTRO
                                    string eliminarRegistro = $"DELETE FROM bp_sopre where cod_empl='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    string eliminarRegistro2 = $"DELETE bp_dsoli where act_usua='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);


                                    //INICIO PRUEBA
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//a[contains(.,'Mis Prestamos')]");
                                    selenium.Click("//a[contains(.,'Mis Prestamos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Préstamos", true, file);

                                    Thread.Sleep(500);
                                    //Debugger.Launch();
                                    selenium.Click("//*[@id=\"ctl00_btnNuevo\"]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("MIS SOLICITUDES DE PRÉSTAMOS", true, file);

                                    Thread.Sleep(1000);

                                    selenium.SendKeys("//input[contains(@id,'txtIngFami')]", IngresosFam);
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'txtDedExte')]", DedExterna);
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'txtComVige')]", CompVigentes);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'kcfFecSoliA_txtFecha')]", Fecha);
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlNomPres')]", SelectPrestamo);
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'txtValInmu')]", ValInmueble);
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'txtValRemo')]", ValRemodel);
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPlaPres']", "2");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'txtValPres')]", ValorSol);
                                    Thread.Sleep(1000);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados Formulario", true, file);
                                    //SIMULADOR
                                    selenium.Click("//a[contains(text(),'Simulador')]");
                                    Thread.Sleep(2000);
                                    //CUOTAS MENSUALES
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblCuotas_1']");
                                    Thread.Sleep(2000);
                                    //FECHAS
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDesem_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDesem_txtFecha']", FechaSim1);
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDescue_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDescue_txtFecha']", FechaSim2);
                                    Thread.Sleep(1000);
                                    //VERIFICAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnVerificar']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Simulador Préstamo", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnSalir']");
                                    Thread.Sleep(1000);
                                    //Guardar
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    Thread.Sleep(4000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(10000);
                                    Thread.Sleep(3000);


                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(2000);
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void ED_RegistroAnalisisEvaluacion()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.ED_RegistroAnalisisEvaluacion")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Mejoras"].ToString().Length != 0 && rows["Mejoras"].ToString() != null &&
                                rows["Positivos"].ToString().Length != 0 && rows["Positivos"].ToString() != null &&
                                rows["Anometa"].ToString().Length != 0 && rows["Anometa"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Anometa = rows["Anometa"].ToString();
                                string Positivos = rows["Positivos"].ToString();
                                string Mejoras = rows["Mejoras"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string Contenido = rows["Contenido"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE FROM ED_ANALI WHERE ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);

                                    //inicio
                                    selenium.Scroll("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    selenium.Click("//a[contains(.,'EVALUACIÓN DE OBJETIVOS')]");
                                    Thread.Sleep(1500);
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//a[contains(.,'Análisis de Evaluación')]");
                                        selenium.Click("//a[contains(.,'Análisis de Evaluación')]");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//a[contains(.,'ANÁLISIS DE EVALUACIÓN')]");
                                        selenium.Click("//a[contains(.,'ANÁLISIS DE EVALUACIÓN')]");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Análisis de Evaluación", true, file);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAnoMeta']", Anometa);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Año de Evaluación", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtFacPosCo']", Positivos);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Positivos", true, file);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtFacNegCo']", Mejoras);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mejoras", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnGuard']");
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//*[@id='ctl00_btnCerrar']"))
                                    {
                                        selenium.Click("//*[@id='ctl00_btnCerrar']");
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Análisis Evaluación Guardado", true, file);
                                    Thread.Sleep(10000);

                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]

        public void NM_RegistroDeducibleVivienda()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_RegistroDeducibleVivienda")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Deducible"].ToString().Length != 0 && rows["Deducible"].ToString() != null &&
                                rows["ValAnual"].ToString().Length != 0 && rows["ValAnual"].ToString() != null &&
                                rows["FechaFinalMes"].ToString().Length != 0 && rows["FechaFinalMes"].ToString() != null &&
                                rows["FechaInicialMes"].ToString().Length != 0 && rows["FechaInicialMes"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Deducible = rows["Deducible"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string FechaFinalMes = rows["FechaFinalMes"].ToString();
                                string FechaInicialMes = rows["FechaInicialMes"].ToString();
                                string ValAnual = rows["ValAnual"].ToString();
                                string Ruta = rows["Ruta"].ToString();


                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        selenium.Click("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                        selenium.Click("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");

                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dedicibles", true, file);
                                    Thread.Sleep(2000);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //SELECCIONAR DEDUCIBLE
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipDeduAux')]", Deducible);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Deducible Vivienda", true, file);
                                    //TERMINOS CONDICIONES
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Términos Condiciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnConDeduSi')]");
                                    Thread.Sleep(2000);
                                    //DECLARACION JURAMENTADA
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Declaración Juramentada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnSi')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Si_Acepto')]");
                                    Thread.Sleep(2000);
                                    //AGREGAR NUEVA DEDUCIBLE
                                    selenium.Screenshot("Agregar Nuevo Deducible", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(2000);
                                    //FECHAS INICIALES
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']", FechaInicialMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);
                                    //FECHAS FINALES
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']", FechaFinalMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    //VALOR ANUAL
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtValAnua']", ValAnual);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Valor anual", true, file);
                                    //COMPARTE CREDITO CON OTROS
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_NoDeppor')]");
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{PGDN}");
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{PGDN}");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='toolContex']/div/div/div[2]/div/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(2000);
                                    //ADICIONAR REGISTRO
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnAdiBene')]");
                                    Thread.Sleep(1000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Adicionado", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardada Registro Deducible", true, file);
                                    Thread.Sleep(1000);
                                    Thread.Sleep(6000);
                                    fv.ConvertWordToPDF(file, database);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_RegistroDeducibleSalud()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_RegistroDeducibleSalud")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Deducible"].ToString().Length != 0 && rows["Deducible"].ToString() != null &&
                                rows["ValAnual"].ToString().Length != 0 && rows["ValAnual"].ToString() != null &&
                                rows["FechaFinalMes"].ToString().Length != 0 && rows["FechaFinalMes"].ToString() != null &&
                                rows["FechaInicialMes"].ToString().Length != 0 && rows["FechaInicialMes"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Deducible = rows["Deducible"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string FechaFinalMes = rows["FechaFinalMes"].ToString();
                                string FechaInicialMes = rows["FechaInicialMes"].ToString();
                                string ValAnual = rows["ValAnual"].ToString();
                                string Ruta = rows["Ruta"].ToString();


                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        selenium.Click("//a[contains(.,'DEDUCIBLES DE RETENCION')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                        selenium.Click("//a[contains(.,'Disminución de Retencion en la Fuente')]");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/a[1]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[21]/ul[1]/li[1]/a[1]");

                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Dedicibles", true, file);
                                    Thread.Sleep(2000);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //SELECCIONAR DEDUCIBLE
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipDeduAux')]", Deducible);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Deducible Salud", true, file);
                                    //TERMINOS CONDICIONES
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Términos Condiciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnConDeduSi')]");
                                    Thread.Sleep(2000);
                                    //DECLARACION JURAMENTADA
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Declaración Juramentada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnSi')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Si_Acepto')]");
                                    Thread.Sleep(2000);
                                    //AGREGAR NUEVA DEDUCIBLE
                                    selenium.Screenshot("Agregar Nuevo Deducible", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(2000);
                                    //FECHAS INICIALES
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecIni_txtFecha']", FechaInicialMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Inicial", true, file);
                                    //FECHAS FINALES
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrlFecFin_txtFecha']", FechaFinalMes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    //VALOR ANUAL
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_txtValAnua']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtValAnua']", ValAnual);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(@id,'btnCerrar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Valor anual", true, file);
                                    //COMPARTE CREDITO CON OTROS
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{PGDN}");
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{PGDN}");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='toolContex']/div/div/div[2]/div/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(2000);
                                    //ADICIONAR REGISTRO
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnAdiBene')]");
                                    Thread.Sleep(1000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Adicionado", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Guardada Registro Deducible", true, file);
                                    Thread.Sleep(1000);
                                    Thread.Sleep(6000);
                                    fv.ConvertWordToPDF(file, database);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_EnvíoCorreoNovedades()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoNovedades")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&

                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["Novedad"].ToString().Length != 0 && rows["Novedad"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Novedad = rows["Novedad"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    string eliminarRegistro = $"DELETE NM_RENOV where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Pruebas')]");
                                    selenium.Click("//a[contains(.,'Novedades Pruebas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("NOVEDADES PRUEBAS", true, file);
                                    //NUEVO
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //EMPLEADO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtcodempl']", EmpleadoUser);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_Consultar']");
                                    //NOVEDADES
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlTiposNovedad']", Novedad);
                                    Thread.Sleep(2000);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValM1_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValM1_txtTexto']", Observacion);
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{PGDN}");
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{PGDN}");
                                    Thread.Sleep(500);
                                    //ADJUNTO
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    //GUARDAR
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Novedad Guardada", true, file);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Pruebas')]");
                                    selenium.Click("//a[contains(.,'Novedades Pruebas')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Exitoso", true, file);

                                    Thread.Sleep(6000);
                                    Thread.Sleep(2000);
                                    fv.ConvertWordToPDF(file, database);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]

        public void NM_EnvíoCorreoNovedadesTemporales()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoNovedadesTemporales")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&

                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["VCuota"].ToString().Length != 0 && rows["VCuota"].ToString() != null &&
                                rows["NumCuota"].ToString().Length != 0 && rows["NumCuota"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["VTotal"].ToString().Length != 0 && rows["VTotal"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string VCuota = rows["VCuota"].ToString();
                                string NumCuota = rows["NumCuota"].ToString();
                                string VTotal = rows["VTotal"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    string eliminarRegistro = $"DELETE NM_NOVTE where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    string eliminar = $"DELETE Nm_Soltr WHERE COD_EMPR = '{CodEmpresa}' AND ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminar, database, user);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedades Temporales colaborador", true, file);
                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //CONCEPTO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                    Thread.Sleep(2000);
                                    //CANTIDAD
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtCanNove']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad);
                                    //CUOTA
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValCuot']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", VCuota);
                                    //NUM CUOTA
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtNumCuot']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuota);
                                    //VALOR TOTAL
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", VTotal);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", VTotal);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    //OBSERVACIONES 1
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", "PRUEBA");
                                    //OBSERVACIONES 2
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", "PRUEBA");

                                    //adjunto
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Novedad Temporal Agregada", true, file);
                                    //NOVEDADES
                                    selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                    selenium.Click("//a[contains(.,'NOVEDADES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                    selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("NOVEDADES TEMPORALES REGISTRADO", true, file);
                                    Thread.Sleep(7000);
                                    Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_EnvíoCorreoPermisos()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoPermisos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["HoraInicio"].ToString().Length != 0 && rows["HoraInicio"].ToString() != null &&
                                rows["HoraFin"].ToString().Length != 0 && rows["HoraFin"].ToString() != null &&
                                rows["JornadaInicio"].ToString().Length != 0 && rows["JornadaInicio"].ToString() != null &&
                                rows["JornadaFin"].ToString().Length != 0 && rows["JornadaFin"].ToString() != null &&
                                rows["ObservaPer"].ToString().Length != 0 && rows["ObservaPer"].ToString() != null &&
                                rows["ObservaSol"].ToString().Length != 0 && rows["ObservaSol"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["FechaFin"].ToString().Length != 0 && rows["FechaFin"].ToString() != null &&
                                rows["CantidadDias"].ToString().Length != 0 && rows["CantidadDias"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string HoraInicio = rows["HoraInicio"].ToString();
                                string HoraFin = rows["HoraFin"].ToString();
                                string JornadaInicio = rows["JornadaInicio"].ToString();
                                string JornadaFin = rows["JornadaFin"].ToString();
                                string ObservaPer = rows["ObservaPer"].ToString();
                                string ObservaSol = rows["ObservaSol"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string CantidadDias = rows["CantidadDias"].ToString();


                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTRO
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and COD_RESP = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistro2 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(2000);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(10000);
                                    //INGRESO A MIS PERMISOS
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(5000);
                                    selenium.Scroll("//a[contains(.,'Mis Permisos')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Mis Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Permiso", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodMaus']", Motivo);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //FECHA
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha']", FechaInicio);
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(2000);
                                    Debugger.Launch();
                                    // Selecciona la Hora de Inicio
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(HoraInicio, JornadaInicio, 5);
                                    Thread.Sleep(5000);
                                    // Selecciona la Hora de Fin
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(HoraFin, JornadaFin, 6);
                                    //OBSERVACIONES 1
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservaPer);
                                    //OBSERVACIONES 2
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservaSol);
                                    //adjunto
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    Thread.Sleep(1500);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(2000);
                                    Screenshot("Permiso Ingresado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud registrada", true, file);
                                    Thread.Sleep(6000);
                                    Thread.Sleep(4000);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(2000);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(4000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void NM_EnvíoCorreoLicenciasCalamidades()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_EnvíoCorreoLicenciasCalamidades")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES", true, file);
                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodMaus']", Motivo);
                                    Thread.Sleep(2000);
                                    //FECHA
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechaFecDesd_txtFecha']", Fecha);
                                    Thread.Sleep(4000);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']");
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observacion);
                                    Thread.Sleep(4000);
                                    selenium.Click("//textarea[contains(@id,'KCtrlTxtObsErva_txtTexto')]");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtObsErva_txtTexto']", Observacion);

                                    //Adjunto Documento
                                    Thread.Sleep(2000);
                                    selenium.Click("//span[contains(@id,'lblAdjunto')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(3000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos ingresados", true, file);
                                    //GUARDAR
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[@id='btnGuardar']");
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Notificación", true, file);
                                    Thread.Sleep(3000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(5000);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("LICENCIAS Y CALAMIDADES REGISTRADA", true, file);
                                    Thread.Sleep(6000);
                                    fv.ConvertWordToPDF(file, database);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(4000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_RequisiciónDePersonal()
        {
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_RequisiciónDePersonal")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;


                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Contenido"].ToString().Length != 0 && rows["Contenido"].ToString() != null &&
                                rows["CodPagina"].ToString().Length != 0 && rows["CodPagina"].ToString() != null &&
                                rows["EmailRecepcion"].ToString().Length != 0 && rows["EmailRecepcion"].ToString() != null &&
                                rows["PassEmailRecepcion"].ToString().Length != 0 && rows["PassEmailRecepcion"].ToString() != null &&
                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["Requisiciones"].ToString().Length != 0 && rows["Requisiciones"].ToString() != null &&
                                rows["Vacante"].ToString().Length != 0 && rows["Vacante"].ToString() != null &&
                                rows["Filtro"].ToString().Length != 0 && rows["Filtro"].ToString() != null &&
                                rows["Costo"].ToString().Length != 0 && rows["Costo"].ToString() != null &&
                                rows["Plazas"].ToString().Length != 0 && rows["Plazas"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["Contrato"].ToString().Length != 0 && rows["Contrato"].ToString() != null &&
                                rows["TipoContrato"].ToString().Length != 0 && rows["TipoContrato"].ToString() != null &&
                                rows["Sueldo"].ToString().Length != 0 && rows["Sueldo"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["Publicar"].ToString().Length != 0 && rows["Publicar"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string CodPagina = rows["CodPagina"].ToString();
                                string EmailRecepcion = rows["EmailRecepcion"].ToString();
                                string PassEmailRecepcion = rows["PassEmailRecepcion"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Contenido = rows["Contenido"].ToString();
                                string Requisiciones = rows["Requisiciones"].ToString();
                                string Vacante = rows["Vacante"].ToString();
                                string Filtro = rows["Filtro"].ToString();
                                string Costo = rows["Costo"].ToString();
                                string Plazas = rows["Plazas"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string Contrato = rows["Contrato"].ToString();
                                string TipoContrato = rows["TipoContrato"].ToString();
                                string Sueldo = rows["Sueldo"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string Publicar = rows["Publicar"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Seleccionar Rol Lider", true, file);

                                    if (database == "ORA")
                                    {
                                        //INGRESO REQUISICION
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                        Thread.Sleep(1500);
                                        //REQUISICION PERSONAL
                                        selenium.Scroll("//a[contains(.,'Requisición de Personal')]");
                                        selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Requisición de Personal", true, file);
                                        Thread.Sleep(2000);
                                        //NUEVO
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Nuevo", true, file);
                                        Thread.Sleep(2000);
                                        //GRUPO REQUISICIONES
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodGrse']", Requisiciones);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Requisiciones", true, file);
                                        //VACANTE
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlForCobe']", Vacante);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Vacante", true, file);
                                        //FILTRO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFilSele']", Filtro);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                        //COSTO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", Costo);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Costo", true, file);
                                        //PLAZAS
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNroPlaz']", Plazas);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNroPlaz']", Plazas);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Plazas", true, file);
                                        //CARGO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCarp')]", "102006");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Cargo", true, file);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodMoti']", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //CONTRATO
                                        selenium.ScrollTo("0", "200");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlTipCont']", Contrato);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Contrato", true, file);
                                        //TIPO CONTRATO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlContrDeta']", TipoContrato);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo contrato", true, file);
                                        //PUBLICAR
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlVisSuew']", Publicar);
                                        selenium.Screenshot("Publicar", true, file);
                                        //DETALLE
                                        selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ_txtTexto')]", "PRUEBAS");
                                        Thread.Sleep(500);
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        selenium.ScrollTo("0", "600");
                                        Thread.Sleep(2000);
                                        //OBSERVACIONES
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", "PRUEBAS");
                                        Thread.Sleep(500);
                                        //Validación 1 País
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Ingreso de País para validar", true, file);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);
                                        string Texto1 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto1 != "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto1);
                                        }

                                        //Validación 2 Departamento
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);

                                        string Texto2 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto2 != "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto2);
                                        }

                                        //Validación Caracteres especiales
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);


                                        string Texto3 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto3 != "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto3);
                                        }

                                        //Validación Exitosa
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);


                                        string Texto4 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto4 == "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: Se eliminó el contenido del campo Ciudad al hacer TAB");
                                        }
                                        //NUMERO PLAZAS
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNroPlaz']", Plazas);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        Thread.Sleep(2000);
                                        //FUNCIONARIO A REEMPLAZAR
                                        selenium.ScrollTo("0", "900");
                                        Thread.Sleep(6000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(6000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(6000);
                                        selenium.SendKeys("//input[@type='search']", Funcionario);
                                        selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                        Thread.Sleep(6000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(6000);

                                        //ADJUNTO
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys(Ruta);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Archivo adjunto", true, file);
                                        //GUARDAR
                                        selenium.Scroll("//a[@id='btnGuardar']");
                                        selenium.Click("//a[@id='btnGuardar']");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(10000);
                                        //VERIFICACION REGISTRO
                                        selenium.Scroll("//td[8]/a/i");
                                        selenium.Screenshot("Registro exitoso", true, file);
                                        Thread.Sleep(5000);
                                    }
                                    else
                                    {
                                        //INGRESO REQUISICION
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                        Thread.Sleep(1500);
                                        //REQUISICION PERSONAL
                                        selenium.Scroll("//a[contains(.,'Requisición de Personal')]");
                                        selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Requisición de Personal", true, file);
                                        Thread.Sleep(2000);
                                        //NUEVO
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Nuevo", true, file);
                                        Thread.Sleep(2000);
                                        //GRUPO REQUISICIONES
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodGrse']", Requisiciones);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Requisiciones", true, file);
                                        //VACANTE
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlForCobe']", Vacante);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Vacante", true, file);
                                        //FILTRO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFilSele']", Filtro);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                        //COSTO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", Costo);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Costo", true, file);
                                        //PLAZAS
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNroPlaz']", Plazas);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNroPlaz']", Plazas);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Plazas", true, file);
                                        //CARGO
                                        selenium.SendKeys("//input[contains(@id,'txtCodCarp')]", "001020");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Cargo", true, file);
                                        //MOTIVO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodMoti']", Motivo);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Motivo", true, file);
                                        //CONTRATO
                                        selenium.ScrollTo("0", "200");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlTipCont']", Contrato);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Contrato", true, file);
                                        //TIPO CONTRATO
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlContrDeta']", TipoContrato);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo contrato", true, file);
                                        //PUBLICAR
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlVisSuew']", Publicar);
                                        selenium.Screenshot("Publicar", true, file);
                                        //DETALLE
                                        selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ_txtTexto')]", "PRUEBAS");
                                        Thread.Sleep(500);
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        selenium.ScrollTo("0", "600");
                                        Thread.Sleep(2000);
                                        //OBSERVACIONES
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", "PRUEBAS");
                                        Thread.Sleep(500);
                                        //Validación 1 País
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Ingreso de País para validar", true, file);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);
                                        string Texto1 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto1 != "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto1);
                                        }

                                        //Validación 2 Departamento
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);

                                        string Texto2 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto2 != "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto2);
                                        }

                                        //Validación Caracteres especiales
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);


                                        string Texto3 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto3 != "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto3);
                                        }

                                        //Validación Exitosa
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Validación de campo en blanco", true, file);


                                        string Texto4 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        if (Texto4 == "")
                                        {
                                            errorMessages.Add(" ::::::::::::::::::::::" + "MSG: Se eliminó el contenido del campo Ciudad al hacer TAB");
                                        }
                                        //NUMERO PLAZAS
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNroPlaz']", Plazas);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        Thread.Sleep(2000);
                                        //FUNCIONARIO A REEMPLAZAR
                                        selenium.ScrollTo("0", "900");
                                        Thread.Sleep(6000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(6000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(6000);
                                        selenium.SendKeys("//input[@type='search']", Funcionario);
                                        selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                        Thread.Sleep(6000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(6000);

                                        //ADJUNTO
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys(Ruta);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Archivo adjunto", true, file);
                                        //GUARDAR
                                        selenium.Scroll("//a[@id='btnGuardar']");
                                        selenium.Click("//a[@id='btnGuardar']");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(10000);
                                        //VERIFICACION REGISTRO
                                        selenium.Scroll("//td[8]/a/i");
                                        selenium.Screenshot("Registro exitoso", true, file);
                                        Thread.Sleep(5000);
                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(3000);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónNovedadesTemporalesRolRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónNovedadesTemporalesRolRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();


                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    for (int i = 0; i < 1; i++)
                                    {
                                        selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                        Thread.Sleep(2000);
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro1 = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='{TipApli}'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                        string eliminarRegistro4 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser1}'";
                                        db.UpdateDeleteInsert(eliminarRegistro4, database, user);
                                        string eliminarRegistro5 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser2}'";
                                        db.UpdateDeleteInsert(eliminarRegistro5, database, user);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                        selenium.Click("//a[contains(.,'NOVEDADES')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                        selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Novedades Temporales colaborador", true, file);
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal);
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        selenium.Click("//a[@id='btnGuardar']");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Novedad Registrada", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Close();

                                        //Aprobador RRHH
                                        selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                        Thread.Sleep(2000);
                                        if (database == "ORA")
                                        {
                                            selenium.Click("//button[contains(.,'GESTION HUMANA')]");
                                        }
                                        else
                                        {
                                            selenium.Click("//button[contains(.,'Rol RRHH')]");
                                        }
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                        selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Novedades Temporales RRHH')]");
                                        selenium.Click("//a[contains(.,'Novedades Temporales RRHH')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Novedades Temporales RRHH", true, file);

                                        if (database == "ORA")
                                        {
                                            selenium.Click("//div[@id='ctl00_pBotones']/div");
                                            selenium.Scroll("//*[@id='tablaSolicitudes']/tbody/tr/td[10]/a/i");
                                            Thread.Sleep(1000);
                                            selenium.Click("//*[@id='tablaSolicitudes']/tbody/tr/td[10]/a/i");

                                        }
                                        else
                                        {
                                            selenium.Scroll("//*[@id='tablaSolicitudes']/tbody/tr/td[10]/a/i");
                                            selenium.Click("//*[@id='tablaSolicitudes']/tbody/tr/td[10]/a/i");
                                        }
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Novedad", true, file);

                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgNmNovte_ctl02_LinkButton1']/i");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("Detalle solicitud", true, file);

                                        Thread.Sleep(1000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                        //ENVIO CORREO
                                        selenium.Screenshot("Envia Correo Aprobación", true, file);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(5000);

                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónNovedadesTemporalesRolLider()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónNovedadesTemporalesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Concepto"].ToString().Length != 0 && rows["Concepto"].ToString() != null &&
                                rows["Cantidad"].ToString().Length != 0 && rows["Cantidad"].ToString() != null &&
                                rows["ValCuota"].ToString().Length != 0 && rows["ValCuota"].ToString() != null &&
                                rows["NumCuotas"].ToString().Length != 0 && rows["NumCuotas"].ToString() != null &&
                                rows["ValTotal"].ToString().Length != 0 && rows["ValTotal"].ToString() != null &&
                                rows["CodConc"].ToString().Length != 0 && rows["CodConc"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["IndActi"].ToString().Length != 0 && rows["IndActi"].ToString() != null &&
                                rows["IndActi2"].ToString().Length != 0 && rows["IndActi2"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string user = rows["user"].ToString();
                                string Concepto = rows["Concepto"].ToString();
                                string Cantidad = rows["Cantidad"].ToString();
                                string ValCuota = rows["ValCuota"].ToString();
                                string NumCuotas = rows["NumCuotas"].ToString();
                                string ValTotal = rows["ValTotal"].ToString();
                                string CodConc = rows["CodConc"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string IndActi = rows["IndActi"].ToString();
                                string IndActi2 = rows["IndActi2"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();


                                try
                                {
                                        string[] split = methodname.Split('.');
                                        string nombre = split[2];
                                        string[] split1 = nombre.Split('_');
                                        string modulo = split1[0];
                                        string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                        selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                        Thread.Sleep(2000);
                                        string eliminarRegistro = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro1 = $"DELETE NM_NOVTE WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                        string eliminarRegistro2 = $"DELETE NM_NOVED WHERE COD_EMPR = '{CodEmpr}' AND COD_EMPL = '{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                        string eliminarRegistro3 = $"DELETE NM_SOLTR where COD_RESP='{EmpleadoUser}' AND TIP_APLI='{TipApli}'";
                                        db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                        string eliminarRegistro4 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser1}'";
                                        db.UpdateDeleteInsert(eliminarRegistro4, database, user);
                                        string eliminarRegistro5 = $"DELETE NM_SOLTR where TIP_APLI='{TipApli}' and COD_RESP='{EmpleadoUser2}'";
                                        db.UpdateDeleteInsert(eliminarRegistro5, database, user);
                                        Thread.Sleep(2000);
                                        //NOVEDADES
                                        selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                        selenium.Click("//a[contains(.,'NOVEDADES')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Novedades Temporales colaborador')]");
                                        selenium.Click("//a[contains(.,'Novedades Temporales colaborador')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Novedades Temporales colaborador", true, file);
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomConc']", Concepto);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCanNove']", Cantidad);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCuot']", ValCuota);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCuot']", NumCuotas);
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtValTota']");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValTota']", ValTotal);
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        selenium.Click("//a[@id='btnGuardar']");
                                        Thread.Sleep(7000);
                                        selenium.Screenshot("Novedad Registrada", true, file);
                                        Thread.Sleep(7000);
                                        selenium.Close();

                                        //Aprobador Lider
                                        selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                        Thread.Sleep(2000);

                                        if (database == "SQL")
                                        {
                                            selenium.Click("//span[contains(.,'Rol Lider')]");
                                        }
                                        else
                                        {
                                            selenium.Click("//button[@id='pLider']");
                                        }
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'NOVEDADES')]");
                                        selenium.Click("//a[contains(.,'NOVEDADES')]");
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//a[contains(.,'Novedades Temporales Lider')]");
                                        selenium.Click("//a[contains(.,'Novedades Temporales Lider')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Novedades Temporales Lider", true, file);
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        selenium.Scroll("//table[@id='tblNmNovte']/tbody/tr/td[9]/a/i");
                                        Thread.Sleep(5000);
                                        selenium.Click("//table[@id='tblNmNovte']/tbody/tr/td[9]/a/i");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Novedad", true, file);
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmNovte_ctl02_LinkButton1']/i");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("Detalle solicitud", true, file);
                                        Thread.Sleep(4000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                        //ENVIO CORREO
                                        selenium.Screenshot("Envia Correo Aprobación", true, file);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(5000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_DatosAdicionales()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_DatosAdicionales")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["Estatura"].ToString().Length != 0 && rows["Estatura"].ToString() != null &&
                                rows["Peso"].ToString().Length != 0 && rows["Peso"].ToString() != null &&
                                rows["Raza"].ToString().Length != 0 && rows["Raza"].ToString() != null &&
                                rows["Telefono"].ToString().Length != 0 && rows["Telefono"].ToString() != null &&
                                rows["TelefonoCon"].ToString().Length != 0 && rows["TelefonoCon"].ToString() != null &&
                                rows["Seguro"].ToString().Length != 0 && rows["Seguro"].ToString() != null &&
                                rows["Enfermendades"].ToString().Length != 0 && rows["Enfermendades"].ToString() != null &&
                                rows["Medicamentos"].ToString().Length != 0 && rows["Medicamentos"].ToString() != null &&
                                rows["Alergias"].ToString().Length != 0 && rows["Alergias"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["Hobbies"].ToString().Length != 0 && rows["Hobbies"].ToString() != null &&
                                rows["Propositos"].ToString().Length != 0 && rows["Propositos"].ToString() != null &&
                                rows["Estatura2"].ToString().Length != 0 && rows["Estatura2"].ToString() != null &&
                                rows["Peso2"].ToString().Length != 0 && rows["Peso2"].ToString() != null &&
                                rows["Raza2"].ToString().Length != 0 && rows["Raza2"].ToString() != null &&
                                rows["Telefono2"].ToString().Length != 0 && rows["Telefono2"].ToString() != null &&
                                rows["TelefonoCon2"].ToString().Length != 0 && rows["TelefonoCon2"].ToString() != null &&
                                rows["Seguro2"].ToString().Length != 0 && rows["Seguro2"].ToString() != null &&
                                rows["Enfermendades2"].ToString().Length != 0 && rows["Enfermendades2"].ToString() != null &&
                                rows["Medicamentos2"].ToString().Length != 0 && rows["Medicamentos2"].ToString() != null &&
                                rows["Alergias2"].ToString().Length != 0 && rows["Alergias2"].ToString() != null &&
                                rows["Observacion2"].ToString().Length != 0 && rows["Observacion2"].ToString() != null &&
                                rows["Hobbies2"].ToString().Length != 0 && rows["Hobbies2"].ToString() != null &&
                                rows["Propositos2"].ToString().Length != 0 && rows["Propositos2"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string Estatura = rows["Estatura"].ToString();
                                string Peso = rows["Peso"].ToString();
                                string Raza = rows["Raza"].ToString();
                                string Telefono = rows["Telefono"].ToString();
                                string TelefonoCon = rows["TelefonoCon"].ToString();
                                string Seguro = rows["Seguro"].ToString();
                                string Enfermendades = rows["Enfermendades"].ToString();
                                string Medicamentos = rows["Medicamentos"].ToString();
                                string Alergias = rows["Alergias"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string Hobbies = rows["Hobbies"].ToString();
                                string Propositos = rows["Propositos"].ToString();
                                string Estatura2 = rows["Estatura2"].ToString();
                                string Peso2 = rows["Peso2"].ToString();
                                string Raza2 = rows["Raza2"].ToString();
                                string Telefono2 = rows["Telefono2"].ToString();
                                string TelefonoCon2 = rows["TelefonoCon2"].ToString();
                                string Seguro2 = rows["Seguro2"].ToString();
                                string Enfermendades2 = rows["Enfermendades2"].ToString();
                                string Medicamentos2 = rows["Medicamentos2"].ToString();
                                string Alergias2 = rows["Alergias2"].ToString();
                                string Observacion2 = rows["Observacion2"].ToString();
                                string Hobbies2 = rows["Hobbies2"].ToString();
                                string Restricciones = rows["Restricciones"].ToString();
                                string Entidad = rows["Entidad"].ToString();
                                string NumeroPersonas = rows["NumeroPersonas"].ToString();
                                string Recreacion = rows["Recreacion"].ToString();
                                string Placa = rows["Placa"].ToString();
                                string Direccion = rows["Direccion"].ToString();
                                string Extension = rows["Extension"].ToString();
                                string Comunidad = rows["Comunidad"].ToString();
                                string Condicion = rows["Condicion"].ToString();
                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Inicio
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Datos Adicionales')]");
                                    selenium.Click("//a[contains(.,'Datos Adicionales')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Adicionales", true, file);

                                    //---------------------------------------------------Pestaña Otros Datos--------------------------------------------------------------
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_pnOtrDa']/span");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Otros datos", true, file);
                                    //Observacion
                                    selenium.Clear("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnOtrDa_txtObsErva_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnOtrDa_txtObsErva_txtTexto']", Observacion);//Observacion
                                    Thread.Sleep(2000);
                                    //Hobies
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnOtrDa_KCtrlTxtHOB_EMPL_txtTexto']", Hobbies);//Hobbies
                                    Thread.Sleep(2000);
                                    //Propositos
                                    selenium.Clear("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnOtrDa_KCtrlTxtMIS_PROP_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnOtrDa_KCtrlTxtMIS_PROP_txtTexto']", Propositos);//Propositos
                                    //Lateralidad
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_TabContainer2_body']");
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_TabContainer2_pnOtrDa_rdblateralidad_0']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_TabContainer2_pnOtrDa_rdblateralidad_0']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_TabContainer2_body']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "50");
                                    Thread.Sleep(2000);

                                    //-------------------------------------------------Pestaña Salud----------------------------------------------
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_pnSalud']/span");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Salud", true, file);
                                    Thread.Sleep(2000);
                                    //Estatura
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtEstEmpl']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtEstEmpl']", Estatura);//Estatura188
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Estatura", true, file);
                                    //Peso
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtEstPeso']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtEstPeso']", Peso);//Peso34
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Peso", true, file);
                                    //Raza
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtCodRaza']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtCodRaza']", Raza);//Raza
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Raza", true, file);
                                    //Telefono
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtTelMedi']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtTelMedi']", Telefono);//Telefono333333333
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Telefono", true, file);
                                    //Seguro
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtEmpSegu']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtEmpSegu']", Seguro);//Seguro
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Seguro", true, file);
                                    Thread.Sleep(1000);
                                    //TelefonoCon
                                    selenium.Click("//div[contains(@id,'ctl00_pBotones')]/div");
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtTelEmer']");
                                    Thread.Sleep(1000);
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtTelEmer']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_txtTelEmer']", TelefonoCon);//Telefono333333333
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Telefono", true, file);
                                    //Medicamentos
                                    selenium.Clear("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_KCtrlTxtMedicamentos_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_KCtrlTxtMedicamentos_txtTexto']", Medicamentos);//Medicamentos
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Medicamentos", true, file);
                                    //Alergias
                                    selenium.Clear("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_KCtrlTxtOtros_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnSalud_KCtrlTxtOtros_txtTexto']", Alergias);//Alergias
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Alergias", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    selenium.ScrollTo("0", "50");

                                    //-----------------------------------Pestaña Servicios Salud----------------------------------------------
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_pnSerSalu']/span");
                                    Thread.Sleep(2000);
                                    //Grupo Apoyo
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSerSalu_Checkfor']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Grupo Apoyo", true, file);
                                    //Restricciones Medicas
                                    selenium.Clear("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnSerSalu_KCtrlTxtRES_MEDS_txtTexto']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_TabContainer2_pnSerSalu_KCtrlTxtRES_MEDS_txtTexto']", Restricciones);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Restricciones", true, file);
                                    //Entidad
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSerSalu_txtENTMEDS']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnSerSalu_txtENTMEDS']", Entidad);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Entidad", true, file);
                                    selenium.ScrollTo("0", "50");
                                    //------------------------------------------------Pestaña Vivienda--------------------------------------------------------------------
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_pnVivienda']/span");
                                    Thread.Sleep(2000);
                                    //Vivienda Propia
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnVivienda_rblVivProp_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Vivienda Propia", true, file);
                                    //Numero Personas Viven
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnVivienda_txtNroPers']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnVivienda_txtNroPers']", NumeroPersonas);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Numero Personas", true, file);
                                    //Servicios
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnVivienda_chkSerTele']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("TV", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnVivienda_chkSerTvsu']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Telefono", true, file);
                                    selenium.ScrollTo("0", "50");
                                    //---------------------------------------------------Pestaña Tiempo Libre-------------------------------------------------
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_PnTieLib']/span");
                                    Thread.Sleep(2000);
                                    //Recreacion
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_PnTieLib_txtRecReac']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_PnTieLib_txtRecReac']", Recreacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Recreacion", true, file);
                                    //Periocidad Deporte
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_PnTieLib_rblPerDepo_0']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Periocidad Deporte", true, file);
                                    //Periocidad Otro Trabajo
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_PnTieLib_rblPerTrab_0']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Periocidad Otro Trabajo", true, file);
                                    selenium.ScrollTo("0", "50");
                                    //-----------------------------------------------Pestaña Medio desplazamiento---------------------------------------------------------
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_pnMedDesp']/span");
                                    Thread.Sleep(2000);
                                    //Placa Carro
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnMedDesp_txtVehPlac']");
                                    Thread.Sleep(2000);
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnMedDesp_txtVehPlac']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnMedDesp_txtVehPlac']", Placa);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Placa", true, file);
                                    selenium.ScrollTo("0", "50");
                                    //-----------------------------------------------Pestaña Oficina---------------------------------------------------------------------------
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_pnOfocina']");
                                    Thread.Sleep(2000);
                                    //Direccion Oficina
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnOfocina_txtDirOfic']");
                                    Thread.Sleep(2000);
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnOfocina_txtDirOfic']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnOfocina_txtDirOfic']", Direccion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Direccion Oficina", true, file);
                                    //Extension Oficina
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnOfocina_txtExtOfic']");
                                    Thread.Sleep(2000);
                                    selenium.Clear("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnOfocina_txtExtOfic']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_TabContainer2_pnOfocina_txtExtOfic']", Extension);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Extension Oficina", true, file);
                                    selenium.ScrollTo("0", "50");
                                    //-----------------------------------------------Pestaña Datos Complementarios------------------------------------------------------------------
                                    selenium.Click("//a[@id='__tab_ctl00_ContenidoPagina_TabContainer2_pnDatCompl']");
                                    Thread.Sleep(2000);
                                    //Condicion especial
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_TabContainer2_pnDatCompl_ddlConEspe']", Condicion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Condicion Especial", true, file);
                                    //Comunidad
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_TabContainer2_pnDatCompl_ddlCOMLGTB']", Comunidad);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comunidad", true, file);
                                    selenium.ScrollTo("0", "50");
                                    //----------------------------------------------------ACTUALIZAR DATOS--------------------------------------------------------------

                                    //Actualizar
                                    selenium.Click("//a[contains(@id,'btnActualizar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Notificacion Actualizado Correcto", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(.,'Cerrar')]");
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);

                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_IngresoInformaciónEducaciónNoFormal()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_IngresoInformaciónEducaciónNoFormal")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&

                                rows["Modalidad"].ToString().Length != 0 && rows["Modalidad"].ToString() != null &&
                                rows["NomEstudios"].ToString().Length != 0 && rows["NomEstudios"].ToString() != null &&
                                rows["NomEspecifico"].ToString().Length != 0 && rows["NomEspecifico"].ToString() != null &&
                                rows["Institucion"].ToString().Length != 0 && rows["Institucion"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["FechaFin"].ToString().Length != 0 && rows["FechaFin"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Terminado"].ToString().Length != 0 && rows["Terminado"].ToString() != null &&
                                rows["TiempoEstudio"].ToString().Length != 0 && rows["TiempoEstudio"].ToString() != null &&
                                rows["Actualmente"].ToString().Length != 0 && rows["Actualmente"].ToString() != null &&
                                rows["UniTiem"].ToString().Length != 0 && rows["UniTiem"].ToString() != null &&
                                rows["EditNomEspecifico"].ToString().Length != 0 && rows["EditNomEspecifico"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["RmtEdnf"].ToString().Length != 0 && rows["RmtEdnf"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string RmtEdnf = rows["RmtEdnf"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string Modalidad = rows["Modalidad"].ToString();
                                string NomEstudios = rows["NomEstudios"].ToString();
                                string NomEspecifico = rows["NomEspecifico"].ToString();
                                string Institucion = rows["Institucion"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Terminado = rows["Terminado"].ToString();
                                string TiempoEstudio = rows["TiempoEstudio"].ToString();
                                string Actualmente = rows["Actualmente"].ToString();
                                string UniTiem = rows["UniTiem"].ToString();
                                string EditNomEspecifico = rows["EditNomEspecifico"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    string eliminarRegistro1 = $"delete BI_DTPNF where COD_EMPR='{CodEmpr}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    string eliminarRegistro = $"delete bi_ednfo where cod_empl='{EmpleadoUser}' and act_usua='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    //EDUCACION NO FORMAL
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mi Educación No Formal')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mi Educación No Formal", true, file);
                                    //NUEVO
                                    bool existe = selenium.ExistControl("//a[@id='ctl00_btnNuevo']");
                                    if (existe)
                                    {
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro Nuevo", true, file);
                                    }
                                    //MODALIDAD
                                    selenium.SelectElementByName("//select[contains(@name,'ddlNomModi')]", Modalidad);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Modalidad", true, file);
                                    //NOMBRE ESTUDIOS
                                    selenium.SelectElementByName("//select[contains(@name,'ddlNomEstu')]", NomEstudios);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Estudios", true, file);
                                    //NOMBRE ESPECIFICO
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMNomEspe_txtTexto']", NomEspecifico);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nombre Específico", true, file);
                                    //INSTITUCION
                                    selenium.SendKeys("//input[contains(@name,'txtNomInst')]", Institucion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Institución", true, file);
                                    //FECHA INICIO
                                    selenium.Click("//input[contains(@id,'kcfFecInic')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFecInic')]", FechaInicio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    //FECHA FIN
                                    selenium.Click("//input[contains(@id,'kcfFecTerm')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFecTerm')]", FechaFin);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Fin", true, file);
                                    //validaciones
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    //Validación 1 País
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValPais);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto1 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto1 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto1);
                                    }

                                    //Validación 2 Departamento
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto2 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto2 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto2);
                                    }

                                    //Validación Caracteres especiales
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto3 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto3 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto3);
                                    }

                                    //Validación Exitosa
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto4 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto4 == "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: Se eliminó el contenido del campo Ciudad al hacer TAB");
                                    }
                                    //TERMINDO ESTUDIOS
                                    selenium.SelectElementByName("//select[contains(@name,'ddlEstTerm')]", Terminado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Terminado", true, file);
                                    //ESTUDIA ACTUALMENTE
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlEstActu']", Actualmente);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Estudia Actualmente", true, file);
                                    //TIEMPO ESTUDIO
                                    selenium.SendKeys("//input[contains(@name,'txtTieEstu')]", TiempoEstudio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tiempo estudio", true, file);
                                    //TIEMPO 
                                    selenium.SelectElementByName("//select[contains(@name,'ddlUniTiem')]", UniTiem);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tíempo", true, file);
                                    selenium.returnDriver().ExecuteScript("arguments[0].scrollIntoView(true);", selenium.returnDriver().FindElement(By.XPath("//select[contains(@name,'ddlNomModi')]")));
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    //GUARDAR
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Agregado", true, file);
                                    Thread.Sleep(500);
                                    //DETALLE
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_dtgBiEdnfo_ctl03_LinkButton1\"]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Eliminar Registro", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(@id,'btnEliminar')]");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Registro Eliminado", true, file);

                                    Thread.Sleep(1000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_Idiomas()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_Idiomas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&

                                rows["Idioma"].ToString().Length != 0 && rows["Idioma"].ToString() != null &&
                                rows["Habla"].ToString().Length != 0 && rows["Habla"].ToString() != null &&
                                rows["Lee"].ToString().Length != 0 && rows["Lee"].ToString() != null &&
                                rows["Escribe"].ToString().Length != 0 && rows["Escribe"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["Idioma2"].ToString().Length != 0 && rows["Idioma2"].ToString() != null &&

                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();

                                string Idioma = rows["Idioma"].ToString();
                                string Idioma2 = rows["Idioma2"].ToString();
                                string Habla = rows["Habla"].ToString();
                                string Lee = rows["Lee"].ToString();
                                string Escribe = rows["Escribe"].ToString();
                                string Observacion = rows["Observacion"].ToString();


                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    IWebElement element = selenium.returnDriver().FindElement(By.XPath("//*[@id=\"MenuContex\"]/div[2]/div[1]/ul/li[1]/ul/li[9]/a"));
                                    IJavaScriptExecutor executor = (IJavaScriptExecutor)selenium.returnDriver();
                                    executor.ExecuteScript("arguments[0].click();", element);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis idiomas", true, file);

                                    int num = selenium.CountControl("//table[@id='ctl00_ContenidoPagina2_dgrBiEmidi']/tbody/tr[2]/td");
                                    if (num > 0)
                                    {
                                        string idiomaEnc = selenium.GetText("//table[@id='ctl00_ContenidoPagina2_dgrBiEmidi']/tbody/tr[2]/td");

                                        if (idiomaEnc != Idioma)
                                        {
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomIdio']", Idioma);
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlHabIdio']", Habla);
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlLeeIdio']", Lee);
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlEscIdio']", Escribe);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtObsErva']", Observacion);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Datos Ingresados", true, file);

                                            selenium.Click("//a[@id='btnGuardar']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Idioma Agregado", true, file);

                                            selenium.Click("//*[@id=\"ctl00_ContenidoPagina2_dgrBiEmidi_ctl02_LinkButton2\"]");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Eliminar idioma", true, file);

                                        }
                                        else
                                        {
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomIdio']", Idioma2);
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlHabIdio']", Habla);
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlLeeIdio']", Lee);
                                            selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlEscIdio']", Escribe);
                                            selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtObsErva']", Observacion);
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Datos Ingresados", true, file);

                                            selenium.Click("//a[@id='btnGuardar']");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Idioma Agregado", true, file);

                                            selenium.Click("//*[@id=\"ctl00_ContenidoPagina2_dgrBiEmidi_ctl03_LinkButton2\"]");
                                            Thread.Sleep(2000);
                                            selenium.Screenshot("Eliminar idioma", true, file);

                                        }
                                    }
                                    else
                                    {
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomIdio']", Idioma);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlHabIdio']", Habla);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlLeeIdio']", Lee);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlEscIdio']", Escribe);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtObsErva']", Observacion);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Datos Ingresados", true, file);

                                        selenium.Click("//a[@id='btnGuardar']");
                                        Thread.Sleep(6000);
                                        selenium.Screenshot("Idioma Agregado", true, file);

                                        selenium.Click("//*[@id=\"ctl00_ContenidoPagina2_dgrBiEmidi_ctl02_LinkButton2\"]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("Eliminar idioma", true, file);

                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_DatosBásicos()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_DatosBásicos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&

                                rows["Barrio"].ToString().Length != 0 && rows["Barrio"].ToString() != null &&
                                rows["NumCasa"].ToString().Length != 0 && rows["NumCasa"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["Telefono"].ToString().Length != 0 && rows["Telefono"].ToString() != null &&
                                rows["Libreta"].ToString().Length != 0 && rows["Libreta"].ToString() != null &&

                                rows["Barrio2"].ToString().Length != 0 && rows["Barrio2"].ToString() != null &&
                                rows["NumCasa2"].ToString().Length != 0 && rows["NumCasa2"].ToString() != null &&
                                rows["Ruta2"].ToString().Length != 0 && rows["Ruta2"].ToString() != null &&
                                rows["Telefono2"].ToString().Length != 0 && rows["Telefono2"].ToString() != null &&
                                rows["Libreta2"].ToString().Length != 0 && rows["Libreta2"].ToString() != null &&

                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();

                                string Barrio = rows["Barrio"].ToString();
                                string NumCasa = rows["NumCasa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Telefono = rows["Telefono"].ToString();
                                string Libreta = rows["Libreta"].ToString();

                                string Barrio2 = rows["Barrio2"].ToString();
                                string NumCasa2 = rows["NumCasa2"].ToString();
                                string Ruta2 = rows["Ruta2"].ToString();
                                string Telefono2 = rows["Telefono2"].ToString();
                                string Libreta2 = rows["Libreta2"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //MIS DATOS BASICOS
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    selenium.Click("//a[contains(.,'Mis Datos Básicos')]");
                                    Thread.Sleep(1000);
                                    bool butClose = selenium.ExistControl("//a[@id='ctl00_btnCerrar']/i");
                                    if (butClose)
                                    {
                                        selenium.Click("//a[@id='ctl00_btnCerrar']/i");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Error", true, file);

                                    }

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Datos Básicos", true, file);
                                    Thread.Sleep(2000);
                                    //BARRIO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtBarResiC']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtBarResiC']", Barrio);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Barrio", true, file);
                                    //NUMERO CASA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtNumCasa']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumCasa']", NumCasa);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Número casa", true, file);
                                    //RUTA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtRutResi']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtRutResi']", Ruta);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ruta", true, file);
                                    //TELEFONO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtTelResi']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtTelResi']", Telefono);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Teléfono", true, file);
                                    Keyboard.SendKeys("{ENTER}");
                                    selenium.ScrollTo("0", "200");
                                    Thread.Sleep(1000);
                                    if (database == "SQL")
                                    {
                                        //LIBRETA
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_txtNumLmil']");
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNumLmil']", Libreta);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Libreta", true, file);
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Agregados", true, file);

                                    //ACTUALIZAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[@id='btnActualizar']");
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Datos Básicos Ingresados", true, file);
                                    //BOTON CERRAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[@id='ctl00_btnCerrar']/i");
                                    Thread.Sleep(3000);
                                    Thread.Sleep(2000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_IngresoMisFamiliares()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";
            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_IngresoMisFamiliares")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&

                                rows["Id"].ToString().Length != 0 && rows["Id"].ToString() != null &&
                                rows["Nombre"].ToString().Length != 0 && rows["Nombre"].ToString() != null &&
                                rows["SegNombre"].ToString().Length != 0 && rows["SegNombre"].ToString() != null &&
                                rows["Relacion"].ToString().Length != 0 && rows["Relacion"].ToString() != null &&
                                rows["Apellido"].ToString().Length != 0 && rows["Apellido"].ToString() != null &&
                                rows["SegApellido"].ToString().Length != 0 && rows["SegApellido"].ToString() != null &&
                                rows["Sexo"].ToString().Length != 0 && rows["Sexo"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Beneficiario"].ToString().Length != 0 && rows["Beneficiario"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Sangre"].ToString().Length != 0 && rows["Sangre"].ToString() != null &&
                                rows["Sanguineo"].ToString().Length != 0 && rows["Sanguineo"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string user = rows["user"].ToString();
                                string database = rows["database"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string Id = rows["Id"].ToString();
                                string Nombre = rows["Nombre"].ToString();
                                string SegNombre = rows["SegNombre"].ToString();
                                string Relacion = rows["Relacion"].ToString();
                                string Apellido = rows["Apellido"].ToString();
                                string SegApellido = rows["SegApellido"].ToString();
                                string Sexo = rows["Sexo"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string Beneficiario = rows["Beneficiario"].ToString();
                                string EstCivil = rows["EstCivil"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Sangre = rows["Sangre"].ToString();
                                string Sanguineo = rows["Sanguineo"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();


                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE from bi_famil where cod_empl='{EmpleadoUser}' and cod_fami='{Id}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Familiares')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Familiares')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Familiares", true, file);

                                    bool existe = selenium.ExistControl("//a[contains(@id,'ctl00_btnNuevo')]");
                                    if (existe)
                                    {
                                        selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nuevo", true, file);

                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtCodFami')]", Id);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNomFami1')]", Nombre);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNomFami1')]", Nombre);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtNomFami2')]", SegNombre);
                                    Thread.Sleep(1500);
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipRela')]", Relacion);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtApeFami1')]", Apellido);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtApeFami2')]", SegApellido);
                                    Thread.Sleep(1500);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(1500);
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlSexFami')]", Sexo);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFecNaci_txtFecha')]", Fecha);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtPorBene')]", Beneficiario);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Iniciales Familiar", true, file);

                                    if (database == "SQL")
                                    {
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlEstCivi')]", EstCivil);
                                        Thread.Sleep(1500);

                                    }
                                    else
                                    {
                                        selenium.SelectElementByName("//*[@id=\"ctl00_ContenidoPagina_ddlGruSang\"]", Sangre);
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//*[@id=\"ctl00_ContenidoPagina_ddlFacSang\"]", Sanguineo);
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlEstCivi')]", EstCivil);
                                    }


                                    //Validación 1 País
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]", ValPais);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivip_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Agregar Dirección
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtDirFami']", "AV 7 28");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro Agregado", true, file);
                                    if (database == "SQL")
                                    {

                                        Thread.Sleep(500);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_Familiares_ctl05_LinkButton1']/i");
                                    }
                                    else
                                    {
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_Familiares_ctl04_LinkButton1']/i");
                                    }

                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Scroll("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{SPACE}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys(Ruta);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Documento Adjunto", true, file);
                                    selenium.Click("//a[contains(@id,'btnActualizar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Actualizado", true, file);
                                    Thread.Sleep(1000);
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(1000);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]

        public void BI_IngresoDocumentos()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_IngresoDocumentos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&

                                rows["Descripcion"].ToString().Length != 0 && rows["Descripcion"].ToString() != null &&
                                rows["Numero"].ToString().Length != 0 && rows["Numero"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["FechaExpe"].ToString().Length != 0 && rows["FechaExpe"].ToString() != null &&
                                rows["FechaVen"].ToString().Length != 0 && rows["FechaVen"].ToString() != null &&
                                rows["Observacion"].ToString().Length != 0 && rows["Observacion"].ToString() != null &&
                                rows["CodDocu"].ToString().Length != 0 && rows["CodDocu"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string Descripcion = rows["Descripcion"].ToString();
                                string Numero = rows["Numero"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string FechaExpe = rows["FechaExpe"].ToString();
                                string FechaVen = rows["FechaVen"].ToString();
                                string Observacion = rows["Observacion"].ToString();
                                string CodDocu = rows["CodDocu"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Ruta = rows["Ruta"].ToString();


                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //REGISTROS ELIMINAR
                                    string eliminarRegistro = $"DELETE bi_EMPDO where cod_empl='{EmpleadoUser}' and cod_docu='{CodDocu}' AND cod_empr='{CodEmpr}' AND act_usua='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);

                                    //MIS DOCUMENTOS
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Documentos')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Documentos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Documentos", true, file);
                                    //NUEVO
                                    bool existe = selenium.ExistControl("//a[@id='ctl00_btnNuevo']");
                                    if (existe)
                                    {
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Agregar Nuevo", true, file);
                                    //IDENTIDAD
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_chbIndEntr\"]");
                                    Thread.Sleep(5000);
                                    //DESCRIPCION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomDocu']", Descripcion);
                                    Thread.Sleep(2000);
                                    selenium.returnDriver().FindElement(By.Id("ctl00_ContenidoPagina_txtNumDocu")).Click();
                                    Thread.Sleep(2000);
                                    //NUMERO
                                    selenium.returnDriver().FindElement(By.Id("ctl00_ContenidoPagina_txtNumDocu")).SendKeys(Numero);
                                    Thread.Sleep(2000);
                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(2500);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Campo de Observación Requeridos", true, file);
                                    //CIUDAD
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipExpe_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ciudad", true, file);
                                    //FECHAS
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFecExpe_txtFecha')]", FechaExpe);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFecVenci_txtFecha')]", FechaVen);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Fechas", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValObser_txtTexto']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValObser_txtTexto']", Observacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    //ADJUNTO
                                    for (int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);

                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Agregado", true, file);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiEmpdo_ctl03_LinkButton1']/i");
                                    }
                                    else
                                    {
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgBiEmpdo_ctl03_LinkButton1']/i");
                                    }
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Eliminar Registro", true, file);
                                    selenium.Click("//a[@id='ctl00_btnEliminar']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro Eliminado", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_TallasPorPrendaDeEmpleado()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_TallasPorPrendaDeEmpleado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["Prenda4"].ToString().Length != 0 && rows["Prenda4"].ToString() != null &&
                                rows["Prenda3"].ToString().Length != 0 && rows["Prenda3"].ToString() != null &&
                                rows["Prenda2"].ToString().Length != 0 && rows["Prenda2"].ToString() != null &&
                                rows["Prenda1"].ToString().Length != 0 && rows["Prenda1"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string Prenda1 = rows["Prenda1"].ToString();
                                string Prenda2 = rows["Prenda2"].ToString();
                                string Prenda3 = rows["Prenda3"].ToString();
                                string Prenda4 = rows["Prenda4"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //ELIMINAR REGISTRO
                                    string eliminarRegistro = $"DELETE BI_EMTAL where COD_EMPL='{EmpleadoUser}' and cod_empr='{CodEmpr}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    //TALLAS EMPLEADO
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'EF Tallas Empleado')]");
                                    selenium.Click("//a[contains(.,'EF Tallas Empleado')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tallas Empleado", true, file);
                                    //PRENDA 1
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodPren']", Prenda1);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenda 1 seleccionada", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenda 1 Guardada", true, file);
                                    //ELIMINAR PRENDA 1
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrBiEmtal_ctl02_LinkButton1']/i");
                                    Thread.Sleep(1000);
                                    //PRENDA 2
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodPren']", Prenda2);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenda 2 seleccionada", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenda 2 Guardada", true, file);
                                    //PRENDA 2 ELIMINADA
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrBiEmtal_ctl02_LinkButton1']/i");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenda Eliminada", true, file);
                                    //PRENDA 3
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodPren']", Prenda3);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenda 3 seleccionada", true, file);
                                    //GUARDAR PRENDA 3
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Prenda 3 Guardada", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrBiEmtal_ctl02_lbSelDetalle']/i");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Detalle Prenda", true, file);
                                    //PRENDA
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodPren']", Prenda4);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Seleccionar Nueva prenda", true, file);
                                    //ACTUALIZAR
                                    selenium.Click("//a[@id='btnActualizar']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Notificacion prenda Actualizada", true, file);
                                    //NOTIFICACION
                                    selenium.Click("//a[contains(.,'Cerrar')]");

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_IngresoExperienciaLaboral()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_IngresoExperienciaLaboral")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["Empresa"].ToString().Length != 0 && rows["Empresa"].ToString() != null &&
                                rows["Direccion"].ToString().Length != 0 && rows["Direccion"].ToString() != null &&
                                rows["Telefono"].ToString().Length != 0 && rows["Telefono"].ToString() != null &&
                                rows["TipoEmpre"].ToString().Length != 0 && rows["TipoEmpre"].ToString() != null &&
                                rows["Correo"].ToString().Length != 0 && rows["Correo"].ToString() != null &&
                                rows["Salario"].ToString().Length != 0 && rows["Salario"].ToString() != null &&
                                rows["Empleo"].ToString().Length != 0 && rows["Empleo"].ToString() != null &&
                                rows["Cargo"].ToString().Length != 0 && rows["Cargo"].ToString() != null &&
                                rows["Dedicacion"].ToString().Length != 0 && rows["Dedicacion"].ToString() != null &&
                                rows["FechaIngre"].ToString().Length != 0 && rows["FechaIngre"].ToString() != null &&
                                rows["FechaReti"].ToString().Length != 0 && rows["FechaReti"].ToString() != null &&
                                rows["Personal"].ToString().Length != 0 && rows["Personal"].ToString() != null &&
                                rows["CargoDesemp"].ToString().Length != 0 && rows["CargoDesemp"].ToString() != null &&
                                rows["Area"].ToString().Length != 0 && rows["Area"].ToString() != null &&
                                rows["Contrato"].ToString().Length != 0 && rows["Contrato"].ToString() != null &&
                                rows["Retiro"].ToString().Length != 0 && rows["Retiro"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["JefeInmediato"].ToString().Length != 0 && rows["JefeInmediato"].ToString() != null &&
                                rows["CargoJefe"].ToString().Length != 0 && rows["CargoJefe"].ToString() != null &&
                                rows["EditDireccion"].ToString().Length != 0 && rows["EditDireccion"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["RmtHvex"].ToString().Length != 0 && rows["RmtHvex"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null)
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string RmtHvex = rows["RmtHvex"].ToString();

                                string Empresa = rows["Empresa"].ToString();
                                string Direccion = rows["Direccion"].ToString();
                                string Telefono = rows["Telefono"].ToString();
                                string TipoEmpre = rows["TipoEmpre"].ToString();
                                string Correo = rows["Correo"].ToString();
                                string Salario = rows["Salario"].ToString();
                                string Empleo = rows["Empleo"].ToString();
                                string Cargo = rows["Cargo"].ToString();
                                string Dedicacion = rows["Dedicacion"].ToString();
                                string FechaIngre = rows["FechaIngre"].ToString();
                                string FechaReti = rows["FechaReti"].ToString();
                                string Personal = rows["Personal"].ToString();
                                string CargoDesemp = rows["CargoDesemp"].ToString();
                                string Area = rows["Area"].ToString();
                                string Contrato = rows["Contrato"].ToString();
                                string Retiro = rows["Retiro"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string JefeInmediato = rows["JefeInmediato"].ToString();
                                string CargoJefe = rows["Cargojefe"].ToString();
                                string EditDireccion = rows["EditDireccion"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString(); 

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //BORRA REGISTROS
                                    string eliminarRegistro1 = $"DELETE BI_ARHEX where cod_empr='{CodEmpr}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE BI_DTPHV where cod_empr={CodEmpr} and ACT_USUA={EmpleadoUser}";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    string eliminarRegistro3 = $"DELETE bi_hvext where COD_EMPL={EmpleadoUser} and cod_empr={CodEmpr} and ACT_USUA={EmpleadoUser}";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    //MI EXPERIENCIA LABORAL
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mi Experiencia Laboral')]");
                                    selenium.Click("//a[contains(.,'Mi Experiencia Laboral')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mi Experiencia Laboral", true, file);
                                    //REGISTRO NUEVO
                                    bool existe = selenium.ExistControl("//a[@id='ctl00_btnNuevo']");
                                    if (existe)
                                    {
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Nuevo", true, file);
                                    //EMPRESA
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNomEmpr']", Empresa);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa", true, file);
                                    //DIRECCION
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtDirEmpr']", Direccion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Dirección", true, file);
                                    //TELEFONO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtTelEmpr']", Telefono);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Teléfono", true, file);
                                    //TIPO EMPRESA
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlTipEmpr']", TipoEmpre);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Empresa", true, file);
                                    //CORREO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtEntMail']", Correo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Correo", true, file);
                                    //SALARIO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtSalDemp']", Salario);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Salario", true, file);
                                    //EMPLEO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlEmpActu']", Empleo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empleo", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCarEjec']", Cargo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    //DEDICACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDedIcac']", Dedicacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Dedicación", true, file);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(500);
                                    //FECHA INGRESO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecIngr_txtFecha']", FechaIngre);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Ingreso", true, file);
                                    //FECHA RETIRO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_kcfFecReti_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecReti_txtFecha']", FechaReti);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Retiro", true, file);
                                    //MANEJA PERSONAL
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlManPers']", Personal);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Maneja Personal", true, file);
                                    //CARGO DESEMPEÑADO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCarDese']", CargoDesemp);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo Desempeñado", true, file);
                                    //AREA
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtDepEmpr']", Area);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Área", true, file);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlTipCont']", Contrato);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    //RETIRO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlMotReti']", Retiro);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Retiro", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //Validación 1 País
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", ValPais);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    //Validación 2 Departamento
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    //Validación Exitosa
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    //JEFE INMEDIATO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtJefInme']", JefeInmediato);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Jefe Inmediato", true, file);
                                    //CARGO JEFE
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtCarJefe']", CargoJefe);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo Jefe", true, file);
                                    //ADJUNTO
                                    selenium.Scroll("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Adjunto", true, file);
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Adjuntar Archivo", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(2000);
                                    selenium.ChangeAuxWindow();
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnNoProLog']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro Exitoso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //REGISTRO GUARDADO
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mi Experiencia Laboral')]");
                                    selenium.Click("//a[contains(.,'Mi Experiencia Laboral')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Experiencia Registrada", true, file);
                                    //DETALLE
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dgrBiHvext_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle", true, file);
                                    //ELIMINAR
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_btnEliminar']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Eliminado", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_IngresoInformaciónEducaciónFormal()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_IngresoInformaciónEducaciónFormal")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                 rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Modalidad"].ToString().Length != 0 && rows["Modalidad"].ToString() != null &&
                                rows["Estudios"].ToString().Length != 0 && rows["Estudios"].ToString() != null &&
                                rows["NomEspecifico"].ToString().Length != 0 && rows["NomEspecifico"].ToString() != null &&
                                rows["Institucion"].ToString().Length != 0 && rows["Institucion"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Metodologia"].ToString().Length != 0 && rows["Metodologia"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["FechaFin"].ToString().Length != 0 && rows["FechaFin"].ToString() != null &&
                                rows["TiempoEstudio"].ToString().Length != 0 && rows["TiempoEstudio"].ToString() != null &&
                                rows["TipoPeriodo"].ToString().Length != 0 && rows["TipoPeriodo"].ToString() != null &&
                                rows["Terminado"].ToString().Length != 0 && rows["Terminado"].ToString() != null &&
                                rows["Graduado"].ToString().Length != 0 && rows["Graduado"].ToString() != null &&
                                rows["FechaGrado"].ToString().Length != 0 && rows["FechaGrado"].ToString() != null &&
                                rows["Promedio"].ToString().Length != 0 && rows["Promedio"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["RmtEdfo"].ToString().Length != 0 && rows["RmtEdfo"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["TipoDocumento"].ToString().Length != 0 && rows["TipoDocumento"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string RmtEdfo = rows["RmtEdfo"].ToString();

                                string Modalidad = rows["Modalidad"].ToString();
                                string Estudios = rows["Estudios"].ToString();
                                string NomEspecifico = rows["NomEspecifico"].ToString();
                                string Institucion = rows["Institucion"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Metodologia = rows["Metodologia"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string TiempoEstudio = rows["TiempoEstudio"].ToString();
                                string TipoPeriodo = rows["TipoPeriodo"].ToString();
                                string Terminado = rows["Terminado"].ToString();
                                string Graduado = rows["Graduado"].ToString();
                                string FechaGrado = rows["FechaGrado"].ToString();
                                string Promedio = rows["Promedio"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();

                                try
                                {
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"DELETE BI_DTPEF where cod_empr='{CodEmpr}' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro1 = $"DELETE bi_edfor where cod_empl='{EmpleadoUser}' and cod_empr='{CodEmpr}' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    }
                                    else
                                    {
                                        string eliminarRegistroOra = $"DELETE BI_DTPEF where cod_empr='{CodEmpr}' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistroOra, database, user);
                                        string eliminarRegistro1Ora = $"DELETE bi_edfor where cod_empl='{EmpleadoUser}' and cod_empr='{CodEmpr}' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro1Ora, database, user);
                                    }
                                    //EDUCACION FORMAL
                                    Thread.Sleep(3000);
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Educacion Formal')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Educacion Formal')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Educación Formal", true, file);
                                    Thread.Sleep(2000);
                                    //NUEVO
                                    bool existe = selenium.ExistControl("//a[@id='ctl00_btnNuevo']");
                                    if (existe)
                                    {
                                        selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nuevo", true, file);
                                    //MODALIDAD
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomModi']", Modalidad);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Modalidad", true, file);
                                    //ESTUDIOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomEstu']", Estudios);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Estudios", true, file);
                                    //NOMBRE ESPECIFICO
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValMNomEspe_txtTexto']", NomEspecifico);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nombre Específico", true, file);
                                    //INSTITUCION
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNomInst']", Institucion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Estudios", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "277");
                                    //Validación 1 País
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValPais);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto1 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto1 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto1);
                                    }

                                    //Validación 2 Departamento
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto2 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto2 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto2);
                                    }

                                    //Validación Caracteres especiales
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto3 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto3 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto3);
                                    }

                                    //Validación Exitosa
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    string Texto4 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto4 == "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: Se eliminó el contenido del campo Ciudad al hacer TAB");
                                    }
                                    Thread.Sleep(500);

                                    if (database == "SQL")
                                    {
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodItem']", Metodologia);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Metodología", true, file);
                                    }

                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Ingresados", true, file);
                                    selenium.ScrollTo("0", "290");
                                    //FECHA INICIO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecInic_txtFecha']", FechaInicio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    //FECHA FINAL
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecTerm_txtFecha']", FechaFin);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Fin", true, file);
                                    //TIEMPO ESTUDIO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtTieEstu']", TiempoEstudio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tiempo Estudio", true, file);
                                    //TIPO PERIODO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlUniTiem']", TipoPeriodo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Periodo", true, file);
                                    //TERMINADO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlEstTerm']", Terminado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Terminado", true, file);
                                    //GRADUADO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlGraDuad']", Graduado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Graduado", true, file);
                                    //FECHA GRADO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecGrad_txtFecha']", FechaGrado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Grado", true, file);
                                    //PROMEDIO
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtProCarr']", Promedio);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Promedio", true, file);
                                    Thread.Sleep(2000);
                                    //CIUDAD
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    //ADJUNTO
                                    selenium.Scroll("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Adjuntar Archivo", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    bool exist = selenium.ExistControl("//a[contains(@id,'btnGuardar')]");
                                    if (exist)
                                    {
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    }

                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Agregado", true, file);
                                    //DETALLE REGISTRO
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiEdfor_ctl03_LinkButton1']/i");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Detalle", true, file);
                                    //ELIMINAR REGISTRO
                                    selenium.Click("//a[contains(@id,'btnEliminar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Eliminar Registro", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BP_SolicitudDePréstamos()
        {
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_SolicitudDePréstamos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&

                                rows["IngresosFami"].ToString().Length != 0 && rows["IngresosFami"].ToString() != null &&
                                rows["Externas"].ToString().Length != 0 && rows["Externas"].ToString() != null &&
                                rows["Vigentes"].ToString().Length != 0 && rows["Vigentes"].ToString() != null &&
                                rows["ValorInmueble"].ToString().Length != 0 && rows["ValorInmueble"].ToString() != null &&
                                rows["SelectPrestamo"].ToString().Length != 0 && rows["SelectPrestamo"].ToString() != null &&
                                rows["ValorSol"].ToString().Length != 0 && rows["ValorSol"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["ValorRemodela"].ToString().Length != 0 && rows["ValorRemodela"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string IngresosFami = rows["IngresosFami"].ToString();
                                string Externas = rows["Externas"].ToString();
                                string Vigentes = rows["Vigentes"].ToString();
                                string ValorInmueble = rows["ValorInmueble"].ToString();
                                string SelectPrestamo = rows["SelectPrestamo"].ToString();
                                string ValorSol = rows["ValorSol"].ToString();
                                string Fecha = rows["Fecha"].ToString();
                                string ValorRemodela = rows["ValorRemodela"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string FechaSim1 = rows["FechaSim1"].ToString();
                                string FechaSim2 = rows["FechaSim2"].ToString();


                                try
                                {
                                    List<string> errorsTest = new List<string>();
                                    List<string> errors = new List<string>();
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);

                                    string eliminarRegistro = $"DELETE bp_sopre where cod_empl='{EmpleadoUser}' and cod_empr='{CodEmpr}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    //MIS PRESTAMOS
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//a[contains(.,'Mis Prestamos')]");
                                    selenium.Click("//a[contains(.,'Mis Prestamos')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Préstamos", true, file);
                                    //NUEVO
                                    Thread.Sleep(500);
                                    selenium.Click("//*[@id=\"ctl00_btnNuevo\"]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("MIS SOLICITUDES DE PRÉSTAMOS", true, file);
                                    Thread.Sleep(1000);
                                    //INGRESOS FAMILIARES
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtIngFami']", IngresosFami);
                                    //EXTERNAS
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtDedExte']", Externas);
                                    //VIGENTES
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtComVige']", Vigentes);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados Formulario", true, file);
                                    //FECHAS
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_kcfFecSoliA_txtFecha']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecSoliA_txtFecha']", Fecha);
                                    Thread.Sleep(1000);
                                    //PRESTAMOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomPres']", SelectPrestamo);
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValInmu']", ValorInmueble);
                                    //VALOR INMUEBLE
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValRemo']", ValorRemodela);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtPlaPres']", "2");
                                    Thread.Sleep(1000);
                                    //VALOR SOLICITUD
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValPres']", ValorSol);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos Ingresados Formulario", true, file);
                                    //SIMULADOR
                                    selenium.Click("//a[contains(text(),'Simulador')]");
                                    Thread.Sleep(2000);

                                    //CUOTAS MENSUALES
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblCuotas_1']");
                                    Thread.Sleep(2000);

                                    //FECHAS
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDesem_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDesem_txtFecha']", FechaSim1);
                                    Thread.Sleep(1000);

                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDescue_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechaDescue_txtFecha']", FechaSim2);
                                    Thread.Sleep(1000);

                                    //VERIFICAR
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnVerificar']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Simulador Prestamo", true, file);

                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnSalir']");
                                    Thread.Sleep(1000);

                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(3000);
                                    //MIS PRESTAMOS
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//a[contains(.,'Mis Prestamos')]");
                                    selenium.Click("//a[contains(.,'Mis Prestamos')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_dtgBpSopre_ctl03_LinkButton1']/i");
                                    selenium.Screenshot("Solicitud Registrada", true, file);
                                    //DETALLE
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBpSopre_ctl03_LinkButton1']/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Ver Detalle", true, file);
                                    //ADJUNTAR ARCHIVO
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[contains(@id,'printable')]");
                                    selenium.Scroll("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//span[contains(@id,'ctl00_ContenidoPagina_Label2')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Adjuntar Archivo", true, file);
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{SPACE}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    //TIPO DOCUMENTO
                                    if (database == "ORA")
                                    {
                                        selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']", "PRUEBAS");
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU']", "COPIA DE LA CEDULA");
                                        Thread.Sleep(1000);
                                    }
                                    //ARCHIVO ADJUNTO GUARDADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAdiArch']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Archivo Adjunto", true, file);
                                    //MIS PRESTAMOS
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(3000);
                                    selenium.Scroll("//a[contains(.,'Mis Prestamos')]");
                                    selenium.Click("//a[contains(.,'Mis Prestamos')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Préstamos registrado", true, file);

                                    fv.ConvertWordToPDF(file, database);

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }

                                    Thread.Sleep(2000);
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosHoraMinutosRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónDePermisosHoraMinutosRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["PerMoAusentismo"].ToString().Length != 0 && rows["PerMoAusentismo"].ToString() != null &&
                                rows["PerFecIniAno"].ToString().Length != 0 && rows["PerFecIniAno"].ToString() != null &&
                                rows["PerFecIniMes"].ToString().Length != 0 && rows["PerFecIniMes"].ToString() != null &&
                                rows["PerFecIniDia"].ToString().Length != 0 && rows["PerFecIniDia"].ToString() != null &&
                                rows["PerFecIniHra"].ToString().Length != 0 && rows["PerFecIniHra"].ToString() != null &&
                                rows["PerFecIniMin"].ToString().Length != 0 && rows["PerFecIniMin"].ToString() != null &&
                                rows["PerFecIniUso"].ToString().Length != 0 && rows["PerFecIniUso"].ToString() != null &&
                                rows["PerFecFinAno"].ToString().Length != 0 && rows["PerFecFinAno"].ToString() != null &&
                                rows["PerFecFinMes"].ToString().Length != 0 && rows["PerFecFinMes"].ToString() != null &&
                                rows["PerFecFinDia"].ToString().Length != 0 && rows["PerFecFinDia"].ToString() != null &&
                                rows["PerFecFinHra"].ToString().Length != 0 && rows["PerFecFinHra"].ToString() != null &&
                                rows["PerFecFinMin"].ToString().Length != 0 && rows["PerFecFinMin"].ToString() != null &&
                                rows["PerFecFinUso"].ToString().Length != 0 && rows["PerFecFinUso"].ToString() != null &&
                                rows["PerObservacion"].ToString().Length != 0 && rows["PerObservacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["RmtPerm"].ToString().Length != 0 && rows["RmtPerm"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["CodSoli"].ToString().Length != 0 && rows["CodSoli"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string PerMoAusentismo = rows["PerMoAusentismo"].ToString();
                                string PerFecIniAno = rows["PerFecIniAno"].ToString();
                                string PerFecIniMes = rows["PerFecIniMes"].ToString();
                                string PerFecIniDia = rows["PerFecIniDia"].ToString();
                                string PerFecIniHra = rows["PerFecIniHra"].ToString();
                                string PerFecIniMin = rows["PerFecIniMin"].ToString();
                                string PerFecIniUso = rows["PerFecIniUso"].ToString();
                                string PerFecFinAno = rows["PerFecFinAno"].ToString();
                                string PerFecFinMes = rows["PerFecFinMes"].ToString();
                                string PerFecFinDia = rows["PerFecFinDia"].ToString();
                                string PerFecFinHra = rows["PerFecFinHra"].ToString();
                                string PerFecFinMin = rows["PerFecFinMin"].ToString();
                                string PerFecFinUso = rows["PerFecFinUso"].ToString();
                                string PerObservacion = rows["PerObservacion"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string RmtPerm = rows["RmtPerm"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string CodSoli = rows["CodSoli"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTRO
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    string eliminarRegistro3 = $"DELETE NM_AUSEN where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(4000);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Nuevo Permiso", true, file);
                                    //AUSENTISMO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", PerMoAusentismo);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Screenshot("Ausentismo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "250");
                                    string FechaInicio = $"{PerFecIniDia}/{PerFecIniMes}/{PerFecIniAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Salida
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecIniHra, PerFecIniUso, 5);
                                    Thread.Sleep(500);
                                    string FechaFinal = $"{PerFecFinDia}/{PerFecFinMes}/{PerFecFinAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaFinPermiso')]", FechaFinal);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    // Selecciona la Hora de Entrada
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecFinHra, PerFecFinUso, 6);
                                    selenium.SendKeys("//textarea[contains(@name,'txtTexto')]", PerObservacion);
                                    //adjunto
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    selenium.Screenshot("Datos", true, file);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);

                                    if (selenium.ExistControl("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i"))
                                    {
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tblNmCtper']/tbody/tr[2]/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        //Aprobar Solicitud
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }
                                        Thread.Sleep(10000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        public void Adjuntar()
        {
            Thread.Sleep(1000);
            Keyboard.SendKeys("{PGDN}");
            Thread.Sleep(500);
            Keyboard.SendKeys("{PGDN}");
            Thread.Sleep(500);
            selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblArcAdju\"]");
            Thread.Sleep(1000);
            Keyboard.SendKeys("{TAB}");
            Thread.Sleep(1000);
            Keyboard.SendKeys("{ENTER}");
            Thread.Sleep(2000);


        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesRolLiderRolJefeEspecífico()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónVacacionesRolLiderRolJefeEspecífico")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                // Data Documentos  RL/////////////////////
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                //rows["rmt3"].ToString().Length != 0 && rows["rmt3"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["FechaHasta"].ToString().Length != 0 && rows["FechaHasta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                //rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["FechaDesde"].ToString().Length != 0 && rows["FechaDesde"].ToString() != null &&
                                rows["FechaDesde2"].ToString().Length != 0 && rows["FechaDesde2"].ToString() != null &&
                                rows["FechaHasta2"].ToString().Length != 0 && rows["FechaHasta2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                // Data Documentos  RL/////////////////////
                                string user = rows["user"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                //string rmt3 = rows["rmt3"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string FechaHasta = rows["FechaHasta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                //string url = rows["url"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDesde = rows["FechaDesde"].ToString();
                                string FechaDesde2 = rows["FechaDesde2"].ToString();
                                string FechaHasta2 = rows["FechaHasta2"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                    if (database == "ORA")
                                    {
                                        string eliminarVacaciones1 = $"Delete from NM_PROVA where COD_EMPL ='193454'";
                                        db.UpdateDeleteInsert(eliminarVacaciones1, database, user);

                                        string eliminarSolicitud4 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='14224258'";
                                        db.UpdateDeleteInsert(eliminarSolicitud4, database, user);
                                    }

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //FECHA DESDE
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    //FECHA HASTA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaHasta);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Fechas", true, file);
                                    //OBSERVACIONES
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Guardar", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud Ingresada", true, file);
                                    //VERIFICAR REGISTRO
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro Guardado", true, file);
                                    Thread.Sleep(4000);
                                    selenium.Close();

                                    //Ingreso jefe1
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {
                                        selenium.ScrollTo("0", "300");
                                        Thread.Sleep(5000);
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);

                                        }
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //Ingreso jefe especifico
                                    selenium.LoginApps(app, JefeUser2, JefePass2, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Específico", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {
                                        selenium.ScrollTo("0", "300");
                                        Thread.Sleep(5000);
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);

                                        }
                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACIONES
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobaciones en Solicitud", true, file);


                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesLiderJefeDelLider()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónVacacionesLiderJefeDelLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                // Data Documentos  RL/////////////////////
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                rows["Cod_care"].ToString().Length != 0 && rows["Cod_care"].ToString() != null &&
                                rows["NroCont"].ToString().Length != 0 && rows["NroCont"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["FechaHasta"].ToString().Length != 0 && rows["FechaHasta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["FechaDesde"].ToString().Length != 0 && rows["FechaDesde"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                // Data Documentos  RL/////////////////////
                                string user = rows["user"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                string Cod_care = rows["Cod_care"].ToString();
                                string NroCont = rows["NroCont"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string FechaHasta = rows["FechaHasta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDesde = rows["FechaDesde"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                    if (database == "SQL")
                                    {
                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='11'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);
                                    }
                                    else
                                    {
                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='14224258'";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);
                                    }

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //Nuevo
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    //Fecha desde
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    //Fecha hasta
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaHasta);
                                    //Observaciones
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    //Guardar
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Alerta Registro", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud Ingresada", true, file);
                                    //Verificar registro
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Guardado", true, file);
                                    selenium.Close();

                                    //Ingreso jefe1
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr[2]/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);
                                        }
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Lider", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //jefe del lider
                                    selenium.LoginApps(app, JefeUser2, JefePass2, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe del Lider", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);

                                        }
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Vacaciones Aprobado Jefe Lider", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobaciones en Solicitud", true, file);

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónPermisoSubflujoJefeInmediato()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónPermisoSubflujoJefeInmediato")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Solicitud Licencias y Calamidades Rechazo
                                //rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                rows["JefeUser3"].ToString().Length != 0 && rows["JefeUser3"].ToString() != null &&
                                rows["JefePass3"].ToString().Length != 0 && rows["JefePass3"].ToString() != null &&
                                //rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["HoraInicio"].ToString().Length != 0 && rows["HoraInicio"].ToString() != null &&
                                rows["Horario"].ToString().Length != 0 && rows["Horario"].ToString() != null &&
                                rows["FechaFin"].ToString().Length != 0 && rows["FechaFin"].ToString() != null &&
                                rows["HoraFin"].ToString().Length != 0 && rows["HoraFin"].ToString() != null &&
                                rows["Observa"].ToString().Length != 0 && rows["Observa"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                string JefeUser3 = rows["JefeUser3"].ToString();
                                string JefePass3 = rows["JefePass3"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string HoraInicio = rows["HoraInicio"].ToString();
                                string Horario = rows["Horario"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string HoraFin = rows["HoraFin"].ToString();
                                string Observa = rows["Observa"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTRO
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro5 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro5, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser1}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistro3 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser2}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistro4 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser3}'";
                                    db.UpdateDeleteInsert(eliminarRegistro4, database, user);
                                    Thread.Sleep(4000);
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    //Selecciona la opción de Mis Permisos
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1000);

                                    if (database == "ORA")
                                    {
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Mis Permisos", true, file);
                                        //Agrega un nuevo registro
                                        selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Nuevo Registro", true, file);
                                        Thread.Sleep(1000);
                                        //Selecciona el Motivo
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        //Selecciona Fecha de Inicio
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtFecSoli_txtFecha')]");
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha')]", FechaInicio);
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                        Thread.Sleep(100);
                                        // Selecciona la Hora de Salida
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraInicio, Horario, 5);
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]");
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]", FechaFin);
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraFin, Horario, 6);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsErva_txtTexto')]", Observa);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        //ADJUNTO Y TIPO DOCUMENTO
                                        for(int i=0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        } 
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys(Ruta);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Archivo adjunto", true, file);
                                        //GUARDAR
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        //Selecciona la opción de Mis Permisos
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'Mis Permisos')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Registro Guardado Exitosamente", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                    }
                                    else
                                    {
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Mis Permisos", true, file);

                                        //Agrega un nuevo registro
                                        selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Nuevo Registro", true, file);
                                        Thread.Sleep(1000);

                                        //Selecciona el Motivo
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMaus')]", Motivo);
                                        Thread.Sleep(2000);
                                        //Selecciona Fecha de Inicio
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtFecSoli_txtFecha')]");
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaIniPermiso_txtFecha')]", FechaInicio);
                                        Thread.Sleep(500);
                                        selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                        Thread.Sleep(100);
                                        // Selecciona la Hora de Salida
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraInicio, Horario, 5);
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]");
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_kcfFechaFinPermiso_txtFecha')]", FechaFin);
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//div[@id='ctl00_ContenidoPagina_KCtrlHorEntr_div_caja']/input[2]");
                                        Thread.Sleep(1000);
                                        selenium.ClockAut(HoraFin, Horario, 6);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Datos Ingresados", true, file);
                                        Thread.Sleep(1000);
                                        Thread.Sleep(1000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsErva_txtTexto')]", Observa);
                                        selenium.Screenshot("Datos Ingresados", true, file);

                                        //adjunto
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys(Ruta);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Archivo adjunto", true, file);
                                        //GUARDAR
                                        selenium.Click("//a[contains(@id,'btnGuardar')]");
                                        Thread.Sleep(1000);
                                        Thread.Sleep(3000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                        selenium.Click("//a[contains(.,'Mis Permisos')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro Guardado Exitosamente", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Close();

                                    }

                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud

                                    Thread.Sleep(2000);

                                    if (selenium.ExistControl("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i"))
                                    {

                                        selenium.Click("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i");
                                        selenium.Screenshot("Ver Detalle Solicitud", true, file);

                                        //Aprobar Solicitud
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }

                                        Thread.Sleep(10000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);

                                    selenium.Close();
                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    //Selecciona la opción de Mis Permisos
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1000);
                                    //Detalle
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Aprobación registrada", true, file);
                                    fv.ConvertWordToPDF(file, database);


                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesLiderJefeEspecíficoÁrbolNómina()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónVacacionesLiderJefeEspecíficoÁrbolNómina")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                rows["JefeUser3"].ToString().Length != 0 && rows["JefeUser3"].ToString() != null &&
                                rows["JefePass3"].ToString().Length != 0 && rows["JefePass3"].ToString() != null &&

                                // Data Documentos 
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["rmt1"].ToString().Length != 0 && rows["rmt1"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null &&
                                rows["rmt2"].ToString().Length != 0 && rows["rmt2"].ToString() != null &&
                                //rows["Cod_care"].ToString().Length != 0 && rows["Cod_care"].ToString() != null &&
                                rows["NroCont"].ToString().Length != 0 && rows["NroCont"].ToString() != null &&
                                rows["Estado"].ToString().Length != 0 && rows["Estado"].ToString() != null &&
                                rows["FechaHasta"].ToString().Length != 0 && rows["FechaHasta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["FechaDesde"].ToString().Length != 0 && rows["FechaDesde"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                string JefeUser3 = rows["JefeUser3"].ToString();
                                string JefePass3 = rows["JefePass3"].ToString();

                                // Data Documentos  RL/////////////////////
                                string user = rows["user"].ToString();
                                string rmt1 = rows["rmt1"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();
                                string rmt2 = rows["rmt2"].ToString();
                                //string Cod_care = rows["Cod_care"].ToString();
                                string NroCont = rows["NroCont"].ToString();
                                string Estado = rows["Estado"].ToString();
                                string FechaHasta = rows["FechaHasta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDesde = rows["FechaDesde"].ToString();


                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser2}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud2, database, user);

                                    string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser3}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud3, database, user);

                                    if (database == "ORA")
                                    {
                                        string eliminarVacaciones1 = $"Delete from NM_PROVA where COD_EMPL ='193454'";
                                        db.UpdateDeleteInsert(eliminarVacaciones1, database, user);
                                    }

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //Nuevo
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    selenium.Screenshot("Nuevo Registro", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "277");
                                    //FECHAS
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaHasta);
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(500);
                                    //OBSERVACIONES
                                    selenium.Click("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    Screenshot("Alerta Guardar", true,file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Solicitud Ingresada", true, file);

                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Registro Guardado", true, file);

                                    selenium.Close();

                                    //Flujo Autorizacion Lider
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);


                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody/tr/td[10]/a/i"))
                                    {
                                        if (database == "ORA")
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[10]/a/i");
                                            Thread.Sleep(2000);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody/tr/td[10]/a/i");
                                            Thread.Sleep(2000);
                                        }
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobado Vacaciones Jefe", true, file);

                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //Flujo Autorizacion Jefe especifico
                                    selenium.LoginApps(app, JefeUser2, JefePass2, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Especifico", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {
                                        if (database == "ORA")
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(2000);
                                        }

                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobado Vacaciones Jefe Específico", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //Flujo Autorizacion Arbol nomina

                                    selenium.LoginApps(app, JefeUser3, JefePass3, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {

                                        selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                        Thread.Sleep(20000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobado Vacaciones Árbol Nómina", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }
                                    selenium.Close();

                                    //VERIFICAR APROBACIONES
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobaciones en Solicitud", true, file);

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_ReporteHistóricoVacaciones()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_ReporteHistóricoVacaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/Hist_Vacaciones.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "300");
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkHisVaca')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Histórico de Vacaciones", true, file);

                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);

                                    Thread.Sleep(500);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Generado", true, file);

                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(7000);
                                    Screenshot("Imprimir PDF", true, file);
                                    Keyboard.SendKeys("{ESC}");

                                    //PDF
                                    selenium.Click("//a[@id='ctl00_btnImprimirPDFToolbar']");
                                    Thread.Sleep(7000);
                                    Screenshot("PDF", true, file);

                                    //ABRIR PDF DESCARGADO
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/Hist_Vacaciones.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(30000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoNóminaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteNivelEndeudamientoNóminaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE NOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nómina Resumido", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    //Abrir pdf
                                    if (database == "ORA")
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706122240614.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);
                                    }
                                    else
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706122121178.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);

                                    }

                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void NM_ReporteNivelEndeudamientoNóminaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteNivelEndeudamientoNóminaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE NOMINA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_0']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE DETALLADO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nómina Detallado", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    //Abrir pdf
                                    if (database == "ORA")
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706124437196.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);
                                    }
                                    else
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706124027112.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);

                                    }

                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPrimaResumido()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteNivelEndeudamientoPrimaResumido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE RESUMIDO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_0']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Resumido", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    //Abrir pdf
                                    if (database == "ORA")
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706141355964.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);
                                    }
                                    else
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706141553801.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);

                                    }

                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteNivelEndeudamientoPrimaDetallado()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteNivelEndeudamientoPrimaDetallado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    //CHECK NIVEL ENDEUDAMIENTO
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(2000);
                                    //fechas
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlFecDesdA']", "2021");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fechas", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_chkNivEnde')]");
                                    Thread.Sleep(1000);
                                    //TIPO DE REPORTE PRIMA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipReport_1']");
                                    Thread.Sleep(2000);
                                    //FORMA REPORTE DETALLE
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblNivEnde_1']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prima Detalle", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(8000);
                                    Screenshot("Reporte Endeudamiento Generado", true, file);
                                    Thread.Sleep(6000);
                                    //Abrir pdf
                                    if (database == "ORA")
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706151601425.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);
                                    }
                                    else
                                    {
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoKNmRnien_20220706151113228.PDF");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(60000);

                                    }

                                    Screenshot("PDF ABIERTO", true, file);
                                    Thread.Sleep(10000);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_ReporteRetenciónSemestral()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_ReporteRetenciónSemestral")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ReporteSemestral.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkRetSeme']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Retención Semestral", true, file);
                                    if (database == "SQL")
                                    {
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAnoProc']", "2016");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlSemProc']", "Semestre 2");
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlAnoProc']", "2018");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlSemProc']", "Semestre 1");
                                        Thread.Sleep(1000);
                                    }
                                    selenium.Screenshot("Datos Retencion", true, file);
                                    Thread.Sleep(1000);

                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);

                                    Thread.Sleep(2000);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Generado", true, file);

                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(10000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ReporteSemestral");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ReporteSemestral.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();


                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_ReporteSeguridadSocial()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_ReporteSeguridadSocial")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Fecha"].ToString().Length != 0 && rows["Fecha"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string Fecha = rows["Fecha"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ReporteSeguridad.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.ScrollTo("0", "300");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkSegSoci']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlFecCoti_txtFecha')]", Fecha);
                                    selenium.Screenshot("Check Seguridad Social", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(15000);
                                    Screenshot("Imprimir PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ReporteSeguridad");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ReporteSeguridad.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_CertificadoFijoImágenesKpeConfi()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoFijoImágenesKpeConfi")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/CertificadoFijo.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(20000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //PUESTO DE TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(2000);
                                    //CHECK CERTIFICADO LABORAL
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Check Certificado Laboral (Sueldo Fijo)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(8000);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    Thread.Sleep(3000);
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(5000);
                                    Screenshot("Reporte Generado", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Certificado Fijo", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("CertificadoFijo");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoFijo.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_CertificadoLaboralFijoDatos()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoLaboralFijoDatos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/CertificadoFijoDatos.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    //CHECK CERFIFICADO FIJO
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(1500);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Certificado Laboral (Sueldo Fijo)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(5000);
                                    Screenshot("Reporte Generado", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Certificado Fijo Datos", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='Imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 4; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("CertificadoFijoDatos");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoFijoDatos.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónCesantíasRolRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónCesantíasRolRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoPass1"].ToString().Length != 0 && rows["EmpleadoPass1"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                //Variables
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["Valor"].ToString().Length != 0 && rows["Valor"].ToString() != null &&
                                rows["TipoDocumento"].ToString().Length != 0 && rows["TipoDocumento"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null &&
                                rows["CodEmpr"].ToString().Length != 0 && rows["CodEmpr"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string user = rows["user"].ToString();
                                //Variables
                                string Motivo = rows["Motivo"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string Valor = rows["Valor"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();
                                string CodEmpr = rows["CodEmpr"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTROS PREVIOS

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarConflicto = $"Delete from NM_REQCE where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarConflicto, database, user);

                                    string eliminarCesantia = $"Delete from NM_CESPA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarCesantia, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    //NUEVO
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    selenium.Screenshot("Nuevo", true, file);
                                    //MOTIVO
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCodMces')]", Motivo);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(1000);
                                    //TIPO SOLICITUD
                                    selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlTipSoli')]", TipoSolicitud);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Tipo Solicitud", true, file);
                                    Thread.Sleep(1000);
                                    //VALOR
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValCesp')]", Valor);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Valores Ingresados", true, file);

                                    //OBSERVACIONES
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_txtTexto')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_txtObsSeva_txtTexto')]", Observaciones);
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    Thread.Sleep(1000);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Alerta Registro", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(10000);
                                    Screenshot("Alerta Registro", true, file);
                                    selenium.AcceptAlert();
                                    //VERIFICACION REGISTRO
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cesantía Registrada", true, file);
                                    selenium.Close();


                                    //Aprobacion rhh
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Aprobador", true, file);
                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//*[@id='pRRHH']");
                                    }
                                    Thread.Sleep(2000);
                                    //CESANTIAS COLABORADORES
                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Cesantias')]");
                                    selenium.Click("//a[contains(.,'Cesantias')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Cesantías de Mis Colaboradores", true, file);
                                    Thread.Sleep(1500);
                                    //DETALLE
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Detalle de la Solicitud", true, file);
                                    Thread.Sleep(1500);

                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i"))
                                    {
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Solicitud", true, file);
                                        Thread.Sleep(1500);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl02_LinkButton1']/i[1]");
                                        Thread.Sleep(1500);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(3000);
                                        Screenshot("Cesantía Aprobada", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");

                                    }

                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION RRHH EN COLABORADOR

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobación Rol RRHH Registrada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_AprobaciónVacacionesRolRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_AprobaciónVacacionesRolRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoPass1"].ToString().Length != 0 && rows["EmpleadoPass1"].ToString() != null &&
                                rows["DiasTomados"].ToString().Length != 0 && rows["DiasTomados"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["FechaFinal"].ToString().Length != 0 && rows["FechaFinal"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string DiasTomados = rows["DiasTomados"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string FechaFinal = rows["FechaFinal"].ToString();
                                string user = rows["user"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //eliminar registros previos

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);


                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //NUEVO
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnNuevo')]");
                                    Thread.Sleep(7000);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaInicio);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Fecha inicio", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']", FechaFinal);
                                    Thread.Sleep(3000);
                                    selenium.Tab("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    selenium.Screenshot("Fecha final", true, file);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Datos Registrados", true, file);
                                    Thread.Sleep(1000);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1000);
                                    Screenshot("Vacaciones Registrada", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(1000);
                                    try
                                    {
                                        if (selenium.ExistControl("//a[contains(@id,'btnCerrar')]"))
                                        {
                                            selenium.Click("//a[contains(@id,'btnCerrar')]");
                                        }
                                        else
                                        {
                                            selenium.Screenshot("Registro exitoso", true, file);
                                        }
                                    }
                                    catch (Exception e)
                                    {

                                    }
                                    //MIS VACACIONES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Vacaciones registrada", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //Aprobador 1
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Aprobador RRHH", true, file);
                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pRRHH']/span");
                                    }

                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    selenium.Click("//a[contains(.,'PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Vacaciones')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);
                                    selenium.ScrollTo("0", "400");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Detalle de la Solicitud", true, file);
                                    Thread.Sleep(5000);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {

                                        selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Solicitud", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Aprobar", true, file);
                                        Thread.Sleep(5000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES PENDIENTES POR APROBAR DE MIS COLABORADORES");
                                    }
                                   
                                    selenium.Close();
                                    Thread.Sleep(1000);

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS VACACIONES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //detalle
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    selenium.Screenshot("Aprobacion RRHH", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Close();
                                    Thread.Sleep(1000);

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_CertificadoLaboralSueldoVariable()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoLaboralSueldoVariable")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/CertificadoVariable.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    //CHECK EN CERTIFICADO VARIABLE
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerVari']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerVari']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Certificado Laboral (Sueldo Variable)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(8000);
                                    
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();

                                    if (selenium.CountWindow() >= 2)
                                    {
                                        selenium.ChangeWindow(modalWin);
                                        Thread.Sleep(4000);
                                        Screenshot("Reporte Generado", true, file);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Variable", true, file); ;
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{DOWN}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("CertificadoVariable");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoVariable.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        LimpiarProcesos();
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                    }
                                    else

                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: EL CERTIFICADO LABORAL VARIABLE NO SE GENERO PARA EL EMPEADO " + EmpleadoUser);
                                    }
                                    selenium.ChangeWindow(mainWin);

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_CertificadoLaboralCatedráticos()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoLaboralCatedráticos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/CertificadoCatedráticos.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO/MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(500);
                                    //CHECK CERTIFICADO CATEDRATICO
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerCate']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerCate']");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Check Certificado Laboral (Catedráticos)", true, file);
                                    //GENERAR
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Generar Reporte", true, file);
                                    Thread.Sleep(8000);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin);
                                        Thread.Sleep(5000);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Certificado Laboral Catedráticos", true, file);
                                        Thread.Sleep(5000);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{DOWN}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("CertificadoCatedráticos");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoCatedráticos.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        LimpiarProcesos();
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: EL CERTIFICADO LABORAL CATEDRATICO NO SE GENORO PARA EL EMPLEADO " + EmpleadoUser);
                                    }
                                    selenium.ChangeWindow(mainWin);

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteDeVacacionesColaboradores()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteDeVacacionesColaboradores")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Variables
                                rows["Id"].ToString().Length != 0 && rows["Id"].ToString() != null &&
                                rows["Nombre"].ToString().Length != 0 && rows["Nombre"].ToString() != null &&
                                rows["Apellido"].ToString().Length != 0 && rows["Apellido"].ToString() != null
                                //rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null 
                                )

                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                //Variables
                                string Id = rows["Id"].ToString();
                                string Nombre = rows["Nombre"].ToString();
                                string Apellido = rows["Apellido"].ToString();
                                //string Ruta = rows["Ruta"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/Reporte De Vacaciones..pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);

                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                    }

                                    selenium.Screenshot("Rol Lider", true, file);
                                    //REPORTE POR ID
                                    Thread.Sleep(1500);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'Reporte de Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'Reporte de Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Reporte de Vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuCedEmpl')]", Id);
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_btnConsulCed')]/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Reporte Consulta por Identificación", true, file);
                                    Thread.Sleep(500);
                                    //REPORTE POR NOMBRE
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuNomEmpl')]", Nombre);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_btnConsulNom')]/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Consulta por Nombres", true, file);
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtConsuAplEmpl')]", Apellido);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_ContenidoPagina_btnConsulApe')]/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Consulta por Apellidos", true, file);
                                    Thread.Sleep(500);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_lnkAll']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Generar Todos", true, file);
                                    Thread.Sleep(1000);
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(7000);
                                    Screenshot("Imprimir PDF", true, file);
                                    Keyboard.SendKeys("{ESC}");

                                    //PDF
                                    selenium.Click("//a[@id='ctl00_btnImprimirPDFToolbar']");
                                    Thread.Sleep(7000);
                                    Screenshot("PDF", true, file);

                                    //ABRIR PDF DESCARGADO
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/Reporte De Vacaciones..pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(30000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BP_FlujoAprobaciónBeneficioDePersonalRolRRHH()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_FlujoAprobaciónBeneficioDePersonalRolRRHH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["EmpleadoUser1"].ToString().Length != 0 && rows["EmpleadoUser1"].ToString() != null &&
                                rows["EmpleadoPass1"].ToString().Length != 0 && rows["EmpleadoPass1"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["EmpleadoUser3"].ToString().Length != 0 && rows["EmpleadoUser3"].ToString() != null &&
                                rows["EmpleadoUser3"].ToString().Length != 0 && rows["EmpleadoUser3"].ToString() != null &&
                                rows["EmpleadoUser4"].ToString().Length != 0 && rows["EmpleadoUser4"].ToString() != null &&
                                rows["EmpleadoUser4"].ToString().Length != 0 && rows["EmpleadoUser4"].ToString() != null &&
                                //Variables
                                rows["Empresa"].ToString().Length != 0 && rows["Empresa"].ToString() != null &&
                                rows["Valor"].ToString().Length != 0 && rows["Valor"].ToString() != null &&
                                rows["Beneficio"].ToString().Length != 0 && rows["Beneficio"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();
                                string EmpleadoUser3 = rows["EmpleadoUser3"].ToString();
                                string EmpleadoPass3 = rows["EmpleadoPass3"].ToString();
                                string EmpleadoUser4 = rows["EmpleadoUser4"].ToString();
                                string EmpleadoPass4 = rows["EmpleadoPass4"].ToString();
                                string user = rows["user"].ToString();
                                //Variables
                                string Empresa = rows["Empresa"].ToString();
                                string Beneficio = rows["Beneficio"].ToString();
                                string Valor = rows["Valor"].ToString();
                                string Modalidad = rows["Modalidad"].ToString();
                                string Programa = rows["Programa"].ToString();
                                string Calendario = rows["Calendario"].ToString();
                                string TipIntensidad = rows["TipIntensidad"].ToString();
                                string TipDocumento = rows["TipDocumento"].ToString();

                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    if (database == "SQL")
                                    {
                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarDetalle = $"Delete from BP_OTOBE where ACT_USUA='{EmpleadoUser}'and COD_EMPL ='{EmpleadoUser}' and COD_BENE ='4545'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser1}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);
                                    }
                                    else
                                    {
                                        string EliminarConsecutivo = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo, database, user);

                                        string EliminarDetalle = $"Delete from BP_OTOBE where COD_BENE ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(EliminarDetalle, database, user);

                                        string EliminarConsecutivo1 = $"Delete from NM_SOLTR where tip_apli ='B' AND COD_RESP ='{EmpleadoUser1}'";
                                        db.UpdateDeleteInsert(EliminarConsecutivo1, database, user);

                                    }
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'Beneficios Organizacionales')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'Beneficios Organizacionales')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud de Beneficios", true, file);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_rbBenef_0')]");
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlNomTibe')]", Beneficio);
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlEntBen')]", "Prueba");
                                        Thread.Sleep(1500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_txtValSoli')]", Valor);
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Datos de la Solicitud", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_rbBenef_1')]");
                                        Thread.Sleep(1500);
                                        //TIPO DE AUXILIO
                                        selenium.SelectElementByName("//select[contains(@id,'ddlNomTibe')]", Beneficio);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo acceso", true, file);
                                        //MODALIDAD
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlClaSifi')]", Modalidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Modalidad", true, file);
                                        //PROGRAMA
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlProGram')]", Programa);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Programa", true, file);
                                        //CALENDARIO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlCalEnda')]", Calendario);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Calendario", true, file);
                                        //TIPO DE INTENSIDAD
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlSemEstr')]", TipIntensidad);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo intensidad", true, file);
                                        //TIPO DOCUMENTO
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento2_ddlTIP_DOCU')]", TipDocumento);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Tipo documento", true, file);
                                        ////SELECCIONAR FAMILIAR
                                        selenium.ScrollTo("0", "500");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_chcod']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Familiar", true, file);
                                        ////VALOR UNITARIO
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_dtgBiFamil_ctl02_ValSoli']", ValorSolicitado);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Valor solicitado", true, file);
                                        selenium.Scroll("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]");
                                        Thread.Sleep(2000);
                                        selenium.SendKeys("//textarea[contains(@id,'ctl00_ContenidoPagina_KtxtObserSoli_txtTexto')]", Observaciones);
                                        selenium.Screenshot("Observaciones", true, file);
                                    }
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Solicitud Radicada", true, file);

                                    selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Verificar Solicitud", true, file);
                                    selenium.Close();

                                    //Aprobador 1
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Aprobador RRHH", true, file);
                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//button[contains(.,'Rol RRHH')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pRRHH']/span");
                                    }
                                    selenium.Screenshot("Rol RRHH", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'BENEFICIOS ORGANIZACIONALES')]");
                                    selenium.Click("//a[contains(.,'BENEFICIOS ORGANIZACIONALES')]");
                                    Thread.Sleep(1000);
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[11]/ul[1]/li[1]/a[1]");
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[10]/ul[1]/li[2]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[10]/ul[1]/li[2]/a[1]");
                                    }
                                    Thread.Sleep(1000);
                                    //DETALLE 1
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBpOtobeP_ctl03_LinkButton2']/i[1]");
                                    Thread.Sleep(5000);
                                    //DETALLE 2
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBpBeoto_ctl02_LinkButton1']/i[1]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle de la Solicitud", true, file);
                                    Thread.Sleep(2000);
                                    //APROBAR
                                    selenium.Screenshot("Aprobación", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Enviar Correo Aprobación", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_btnEnviar')]");
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //VALIDACION SOLICITUD APROBADA
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("(//a[contains(@href, 'frmBpBeotoL.aspx')])[2]");
                                    Thread.Sleep(1000);
                                    selenium.Click("(//a[contains(@href, 'frmBpBeotoL.aspx')])[2]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Solicitud de Beneficios", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(3000);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgBpBeoto_ctl03_LinkButton1']/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Aprobacion RRHH", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void GN_CertificadoLaboralMembrete()
        {
            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_CertificadoLaboralMembrete")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                //Variables
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["Correo"].ToString().Length != 0 && rows["Correo"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string user = rows["user"].ToString();
                                //Variables
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string Correo = rows["Correo"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";


                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/CertificadoFijoMembrete.pdf");
                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MI PUESTO TRABAJO
                                    selenium.Scroll("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(1500);
                                    //MIS REPORTES
                                    selenium.Scroll("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    selenium.Screenshot("Mis Reportes", true, file);
                                    //CHECK CERTIFICADO FIJO
                                    Thread.Sleep(1000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerFijo']");
                                    selenium.Screenshot("Check Certificado Fijo", true, file);
                                    //GENERAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(4000);

                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin);
                                        Thread.Sleep(5000);
                                        Screenshot("Certificado fijo Generado", true, file);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Laboral Sueldo Fijo", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{DOWN}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("CertificadoFijoMembrete");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoFijoMembrete.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        LimpiarProcesos();
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                    }

                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    //Segundo certificado
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerVari']");
                                    selenium.Screenshot("Check Certificado Variable", true, file);
                                    //GENERAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(4000);
                                    //String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin1);
                                        Thread.Sleep(4000);
                                        Screenshot("Certificado Laboral Variable Generado", true, file);
                                        selenium.MaximizeWindow(); 
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Laboral Sueldo Variable", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }


                                        for (int i = 0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("CertificadoVariableMembrete");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoVariableMembrete.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        LimpiarProcesos();

                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                    }

                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);

                                    //Tercer certificado
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_chkCerCate']");
                                    selenium.Screenshot("Check Certificado Catedráticos", true, file);
                                    //GENERAR
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(@id,'ctl00_btnGenerar')]");
                                    Thread.Sleep(4000);

                                    String modalWin2 = selenium.PopupWindow();
                                    if (selenium.CountWindow() == 2)
                                    {
                                        selenium.ChangeWindow(modalWin2);
                                        Thread.Sleep(4000);
                                        Screenshot("Certificado Laboral Catedráticos Generado", true, file);
                                        selenium.MaximizeWindow();
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Certificado Laboral Catedráticos", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='Imprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        for (int i = 0; i < 4; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("CertificadoCatedraticoMembrete");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoCatedraticoMembrete.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        LimpiarProcesos();

                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Close();
                                    }

                                    Thread.Sleep(2000);
                                    selenium.ChangeWindow(mainWin);
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_AprobaciónRequisiciónDePersonalJefeInmediato()
        {
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1"; 

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_AprobaciónRequisiciónDePersonalJefeInmediato")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();

                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string url = rows["url"].ToString();


                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }

                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    ////Process:Login//////////////////////////////////
                                    string error = string.Empty;
                                    string errorfilter = string.Empty;
                                    List<string> errorMessagesMetodo = new List<string>();

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);

                                    //Process: Requisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Requisición de Personal", true, file);
                                    //NUEVO
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Nueva Requisición de Personal", true, file);
                                    //GRUPO
                                    selenium.SelectElementByName("//select[contains(@id,'ContenidoPagina_ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Requisición de Personal", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ContenidoPagina_ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(1000);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Requisición de Personal", true, file);

                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(1000);
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    //COSTO
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Costo", true, file);
                                    //PLAZAS
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ContenidoPagina_ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Cargo", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ContenidoPagina_ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Motivo", true, file);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ContenidoPagina_ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Contrato", true, file);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlContrDeta']", TipoContratoRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //PUBLICAR
                                    selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlVisSuew']", PublicardadRequi);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Publicar", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "700");
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ciudad", true, file);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1500);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ_txtTexto')]", ComentarioRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Comentarios", true, file);
                                    //PLAZAS
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(1500);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Plazas", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(1500);
                                    Thread.Sleep(10000);
                                    selenium.AcceptAlert();
                                    selenium.AcceptAlert();
                                    Thread.Sleep(10000);
                                    selenium.Scroll("//td[8]/a/i");
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //LIDER
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Aprobación de Requisiciones')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Aprobación de Requisiciones", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblTipOrd_1']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConsul']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_soldap_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_Estsoli_ctl02_LinkButton1']/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Aprobación", true, file);

                                    if (selenium.ExistControl("//input[contains(@id,'Aprueba')]"))
                                    {
                                        selenium.Scroll("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(500);
                                        Thread.Sleep(500);
                                        selenium.Click("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(500);


                                        Thread.Sleep(1000);
                                        selenium.AcceptAlert();

                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Aprobación terminada", true, file);
                                    }
                                    else
                                    {
                                        selenium.Screenshot("Sin boton aprobación", true, file);
                                    }
                                    //ENVIO CORREO
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Envia Correo Aprobación", true, file);
                                    selenium.Click("//input[contains(@id,'btnEnviar')]");
                                 

                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void NM_FlujoDeAprobaciónCesantíasRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoDeAprobaciónCesantíasRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (//Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Cesantias
                                rows["MotivoSolicitud"].ToString().Length != 0 && rows["MotivoSolicitud"].ToString() != null &&
                                rows["TipoSolicitud"].ToString().Length != 0 && rows["TipoSolicitud"].ToString() != null &&
                                rows["ValorSolicitado"].ToString().Length != 0 && rows["ValorSolicitado"].ToString() != null &&
                                rows["FechaCorte"].ToString().Length != 0 && rows["FechaCorte"].ToString() != null &&
                                rows["ObsCesantia"].ToString().Length != 0 && rows["ObsCesantia"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EmpleadoUser1 = rows["EmpleadoUser1"].ToString();
                                string EmpleadoPass1 = rows["EmpleadoPass1"].ToString();
                                ///Datos Cesantias
                                string MotivoSolicitud = rows["MotivoSolicitud"].ToString();
                                string TipoSolicitud = rows["TipoSolicitud"].ToString();
                                string ValorSolicitado = rows["ValorSolicitado"].ToString();
                                string FechaCorte = rows["FechaCorte"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string ObsCesantia = rows["ObsCesantia"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina2 = rows["Maquina"].ToString();
                                string user = rows["user"].ToString();

                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTROS PREVIOS

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='C' AND COD_RESP ='{EmpleadoUser1}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    string eliminarConflicto = $"Delete from NM_REQCE where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarConflicto, database, user);

                                    string eliminarCesantia = $"Delete from NM_CESPA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarCesantia, database, user);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);

                                    //Process: Solicitud de cesantias
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nueva Solicitud Cesantías", true, file);
                                    //MOTIVO SOLICITUD
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMces')]", MotivoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //TIPO SOLICITUD
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipSoli')]", TipoSolicitud);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Solicitud", true, file);
                                    //VALOR SOLICITADO
                                    selenium.SendKeys("//input[contains(@id,'txtValCesp')]", ValorSolicitado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Valor Solicitado", true, file);
                                    //OBSERVACIONES
                                    selenium.SendKeys("//textarea[contains(@id,'txtObsSeva_txtTexto')]", ObsCesantia);
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtObserSoli_txtTexto')]", ObsCesantia);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos nueva cesantía", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(3000);
                                    try
                                    {
                                        Screenshot("Alerta 1", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(3000);
                                        Screenshot("Alerta 2", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Cesantías Registrada", true, file);
                                    selenium.Close();


                                    //Aprobacion Lider
                                    selenium.LoginApps(app, EmpleadoUser1, EmpleadoPass1, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Aprobador", true, file);
                                    Thread.Sleep(1000);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//*[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    //CESANTIAS COLABORADORES
                                    selenium.Scroll("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//a[contains(.,'Cesantias de Mis Colaboradores')]");
                                    selenium.Click("//a[contains(.,'Cesantias de Mis Colaboradores')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Cesantías de Mis Colaboradores", true, file);
                                    Thread.Sleep(1500);
                                    //DETALLE
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Detalle de la Solicitud", true, file);
                                    Thread.Sleep(1500);

                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i"))
                                    {
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Solicitud", true, file);
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(3000);
                                        Screenshot("Alerta Aprobador", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");

                                    }

                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION LIDER EN COLABORADOR

                                    //Login Empleado
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Empleado", true, file);
                                    Thread.Sleep(1000);
                                    //MIS SOLICITUDES
                                    selenium.Scroll("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Scroll("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Cesantias')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Mis Cesantías", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCesan_ctl03_LinkButton1']/i");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Aprobación Rol Lider Registrada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_ActualizarInformaciónDatosBásicos()
        {
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_ActualizarInformaciónDatosBásicos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["UdpDatoBasico"].ToString().Length != 0 && rows["UdpDatoBasico"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Modulo"].ToString().Length != 0 && rows["Modulo"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string UdpDatoBasico = rows["UdpDatoBasico"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina2 = rows["Maquina"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    List<string> errorMessagesMetodo = new List<string>();
                                    DateTime dateAndTime = DateTime.Now;
                                    string datetime = dateAndTime.ToString("ddMMyyyy_HHmmss");
                                    string UpdateData = UdpDatoBasico + datetime;
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2500);
                                    //DATOS BASICOS
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(2200);
                                    selenium.Click("//a[contains(.,'Mis Datos Básicos')]");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Datos Básicos", true, file);
                                    //DATO A ACTUALIZAR
                                    selenium.Clear("//input[contains(@name,'txtBarResiC')]");
                                    selenium.SendKeys("//input[contains(@name,'txtBarResiC')]", UpdateData);
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Actualiza datos básicos", true, file);
                                    //ACTUALIZAR
                                    selenium.Click("//a[contains(@id,'btnActualizar')]");
                                    Thread.Sleep(2500);

                                    try
                                    {
                                        Thread.Sleep(3000);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mensaje actualización de datos básicos", true, file);

                                    string Result = selenium.GetText("//span[contains(@id,'lblError')]");

                                    if (Result != "Se actualizaron los datos correctamente.")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: El resultado de la aplicacion no es el esperado...   Error: " + Result);
                                    }
                                    else
                                    {
                                        selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                        selenium.Click("//a[contains(.,'Mis Datos Básicos')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Dato almacenado", true, file);

                                        string UpdateTextBox = selenium.GetTextFromTextBox("//input[contains(@name,'txtBarResiC')]");
                                        if (UpdateTextBox != UpdateData)
                                        {
                                            errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: El dato almacenado no corresponde: Almacenar: " + UpdateData + " Almacenado: " + UpdateTextBox);
                                        }
                                    }
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_EducaciónFormal()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_EducaciónFormal")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["Modalidad"].ToString().Length != 0 && rows["Modalidad"].ToString() != null &&
                                rows["NomProfesion"].ToString().Length != 0 && rows["NomProfesion"].ToString() != null &&
                                rows["NomEspecifico"].ToString().Length != 0 && rows["NomEspecifico"].ToString() != null &&
                                rows["NomInstitucion"].ToString().Length != 0 && rows["NomInstitucion"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["AnoInicio"].ToString().Length != 0 && rows["AnoInicio"].ToString() != null &&
                                rows["MesInicio"].ToString().Length != 0 && rows["MesInicio"].ToString() != null &&
                                rows["DiaInicio"].ToString().Length != 0 && rows["DiaInicio"].ToString() != null &&
                                rows["AnoFin"].ToString().Length != 0 && rows["AnoFin"].ToString() != null &&
                                rows["MesFin"].ToString().Length != 0 && rows["MesFin"].ToString() != null &&
                                rows["DiaFin"].ToString().Length != 0 && rows["DiaFin"].ToString() != null &&
                                rows["TiempoEducacion"].ToString().Length != 0 && rows["TiempoEducacion"].ToString() != null &&
                                rows["UniTiempo"].ToString().Length != 0 && rows["UniTiempo"].ToString() != null &&
                                rows["Terminado"].ToString().Length != 0 && rows["Terminado"].ToString() != null &&
                                rows["Graduado"].ToString().Length != 0 && rows["Graduado"].ToString() != null &&
                                rows["AnoGrado"].ToString().Length != 0 && rows["AnoGrado"].ToString() != null &&
                                rows["MesGrado"].ToString().Length != 0 && rows["MesGrado"].ToString() != null &&
                                rows["DiaGrado"].ToString().Length != 0 && rows["DiaGrado"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string Modalidad = rows["Modalidad"].ToString();
                                string NomProfesion = rows["NomProfesion"].ToString();
                                string NomEspecifico = rows["NomEspecifico"].ToString();
                                string NomInstitucion = rows["NomInstitucion"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string AnoInicio = rows["AnoInicio"].ToString();
                                string MesInicio = rows["MesInicio"].ToString();
                                string DiaInicio = rows["DiaInicio"].ToString();
                                string AnoFin = rows["AnoFin"].ToString();
                                string MesFin = rows["MesFin"].ToString();
                                string DiaFin = rows["DiaFin"].ToString();
                                string TiempoEducacion = rows["TiempoEducacion"].ToString();
                                string UniTiempo = rows["UniTiempo"].ToString();
                                string Terminado = rows["Terminado"].ToString();
                                string Graduado = rows["Graduado"].ToString();
                                string AnoGrado = rows["AnoGrado"].ToString();
                                string MesGrado = rows["MesGrado"].ToString();
                                string DiaGrado = rows["DiaGrado"].ToString();
                                string url = rows["url"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                try
                                {
                                    string user = "";
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ONATALIA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAQMETRIZACION

                                    if (database == "SQL")
                                    {
                                        string eliminarRegistro = $"DELETE BI_DTPEF where cod_empr='9' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                        string eliminarRegistro1 = $"DELETE bi_edfor where cod_empl='{EmpleadoUser}' and cod_empr='9' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    }
                                    else
                                    {
                                        string eliminarRegistroOra = $"DELETE BI_DTPEF where cod_empr='421' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistroOra, database, user);
                                        string eliminarRegistro1Ora = $"DELETE bi_edfor where cod_empl='{EmpleadoUser}' and cod_empr='421' and act_usua='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarRegistro1Ora, database, user);
                                    }
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Educacion Formal')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Educación formal", true, file);
                                    //MODALIDAD
                                    selenium.SelectElementByName("//select[contains(@name,'Modi')]", Modalidad);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Modalidad", true, file);
                                    //PROFESION
                                    selenium.SelectElementByName("//select[contains(@name,'NomEstu')]", NomProfesion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Profesión", true, file);
                                    //NOMBRE ESPECIFICO
                                    selenium.SendKeys("//textarea[contains(@id,'KCtrlTxtValMNomEspe_txtTexto')]", NomEspecifico);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nombre Específico", true, file);
                                    //NOMBRE INSTITUCION
                                    selenium.SendKeys("//input[contains(@name,'NomInst')]", NomInstitucion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nombre Institución", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "300");
                                    //Validación 1 País
                                    Thread.Sleep(1000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    string Texto1 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto1 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto1);
                                    }
                                    //Validación 2 Departamento
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);

                                    string Texto2 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto2 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto2);
                                    }

                                    //Validación Caracteres especiales
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);

                                    string Texto3 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto3 != "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se eliminó el contenido del campo Ciudad al hacer TAB, el texto encontado es: " + Texto3);
                                    }

                                    //Validación Exitosa

                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);

                                    string Texto4 = selenium.GetTextFromTextBox("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    if (Texto4 == "")
                                    {
                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: Se eliminó el contenido del campo Ciudad al hacer TAB");
                                    }

                                    //FECHA INICIO
                                    string FechaInicio = $"{DiaInicio}/{MesInicio}/{AnoInicio}";
                                    selenium.SendKeys("//input[contains(@id,'kcfFecInic')]", FechaInicio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Incio", true, file);
                                    //FECHA FIN
                                    string FechaFin = $"{DiaFin}/{MesFin}/{AnoFin}";
                                    selenium.SendKeys("//input[contains(@id,'kcfFecTerm')]", FechaFin);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Fin", true, file);
                                    //TIEMPO EDUCACION
                                    selenium.SendKeys("//input[contains(@name,'txtTieEstu')]", TiempoEducacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tiempo educación", true, file);
                                    //TIEMPO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlUniTiem')]", UniTiempo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tiempo", true, file);
                                    //TERMINADO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlEstTerm')]", Terminado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Terminado", true, file);
                                    //GRADUADO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlGraDuad')]", Graduado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Graduado", true, file);
                                    //FECHA GRADO
                                    string FechaGrado = $"{DiaGrado}/{MesGrado}/{AnoGrado}";
                                    selenium.SendKeys("//input[contains(@id,'kcfFecGrad')]", FechaGrado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Grado", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    if (selenium.CountControl("//*[@id='ctl00_ContenidoPagina_dtgBiEdfor_ctl03_LinkButton1']/i") > 0)
                                    {
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Educación Formal Registrada", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiEdfor_ctl03_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Educación Formal a modificar", true, file);
                                        //PROMEDIO
                                        selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtProCarr']", "3");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Promedio", true, file);
                                        Thread.Sleep(2000);
                                        //CIUDAD
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", Ciudad);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Ciudad", true, file);
                                        //ADJUNTO
                                        selenium.Scroll("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys(Ruta);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Adjuntar Archivo", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(@id,'btnActualizar')]");
                                        Thread.Sleep(2000);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro Actualizado", true, file);
                                        //ELIMINAR
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiEdfor_ctl03_LinkButton1']/i");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro a Eliminar",true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(@id,'btnEliminar')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro Eliminado", true, file);
                                    }
                                    else
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("No existe educacion formal", true, file);

                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se inserto el estudio formal");
                                    }
                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_EducaciónNoFormal()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_EducaciónNoFormal")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["EnFModalidad"].ToString().Length != 0 && rows["EnFModalidad"].ToString() != null &&
                                rows["EnFNomEstudions"].ToString().Length != 0 && rows["EnFNomEstudions"].ToString() != null &&
                                rows["EnFAnoInicio"].ToString().Length != 0 && rows["EnFAnoInicio"].ToString() != null &&
                                rows["EnFInstitucion"].ToString().Length != 0 && rows["EnFInstitucion"].ToString() != null &&
                                rows["EnFMesInicio"].ToString().Length != 0 && rows["EnFMesInicio"].ToString() != null &&
                                rows["EnFDiaInicio"].ToString().Length != 0 && rows["EnFDiaInicio"].ToString() != null &&
                                rows["EnFAnoFin"].ToString().Length != 0 && rows["EnFAnoFin"].ToString() != null &&
                                rows["EnFMesFin"].ToString().Length != 0 && rows["EnFMesFin"].ToString() != null &&
                                rows["EnFDiaFin"].ToString().Length != 0 && rows["EnFDiaFin"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["EnFTerminado"].ToString().Length != 0 && rows["EnFTerminado"].ToString() != null &&
                                rows["EnfTiempoEstudio"].ToString().Length != 0 && rows["EnfTiempoEstudio"].ToString() != null &&
                                rows["EnfUnidad"].ToString().Length != 0 && rows["EnfUnidad"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string EnFModalidad = rows["EnFModalidad"].ToString();
                                string EnFNomEstudions = rows["EnFNomEstudions"].ToString();
                                string EnFAnoInicio = rows["EnFAnoInicio"].ToString();
                                string EnFInstitucion = rows["EnFInstitucion"].ToString();
                                string EnFMesInicio = rows["EnFMesInicio"].ToString();
                                string EnFDiaInicio = rows["EnFDiaInicio"].ToString();
                                string EnFAnoFin = rows["EnFAnoFin"].ToString();
                                string EnFMesFin = rows["EnFMesFin"].ToString();
                                string EnFDiaFin = rows["EnFDiaFin"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string EnFTerminado = rows["EnFTerminado"].ToString();
                                string EnfTiempoEstudio = rows["EnfTiempoEstudio"].ToString();
                                string EnfUnidad = rows["EnfUnidad"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string Ruta = rows["Ruta"].ToString();

                                try
                                {

                                    string database = "";
                                    string user = "";
                                    string CodEmpr = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                        CodEmpr = "9";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                        CodEmpr = "421";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ONATALIA";
                                        CodEmpr = "421";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                        CodEmpr = "9";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //REGISTROS
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    string eliminarRegistro1 = $"delete BI_DTPNF where COD_EMPR='{CodEmpr}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    string eliminarRegistro = $"delete bi_ednfo where cod_empl='{EmpleadoUser}' and act_usua='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Mi Educación No Formal')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Educación no formal", true, file);
                                    //MODALIDAD
                                    selenium.SelectElementByName("//select[contains(@name,'ddlNomModi')]", EnFModalidad);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Modalidad", true, file);
                                    //ESTUDIOS
                                    selenium.SelectElementByName("//select[contains(@name,'ddlNomEstu')]", EnFNomEstudions);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Estudios", true, file);
                                    //INSTITUCION
                                    selenium.SendKeys("//input[contains(@name,'txtNomInst')]", EnFInstitucion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Institución", true, file);
                                    //FECHA INICIO
                                    string FechaInicio = $"{EnFDiaInicio}/{EnFMesInicio}/{EnFAnoInicio}";
                                    selenium.SendKeys("//input[contains(@id,'kcfFecInic')]", FechaInicio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    //FECHA FINAL
                                    string FechaFinal = $"{EnFDiaFin}/{EnFMesFin}/{EnFAnoFin}";
                                    selenium.SendKeys("//input[contains(@id,'kcfFecTerm')]", FechaFinal);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    selenium.Scroll("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    //Validación 1 País
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValPais);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //TERMINO ESTUDIOS
                                    selenium.SelectElementByName("//select[contains(@name,'ddlEstTerm')]", EnFTerminado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Termino estudios", true, file);
                                    //TIEMPO ESTUDIO
                                    selenium.SendKeys("//input[contains(@name,'txtTieEstu')]", EnfTiempoEstudio);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tiempo estudio", true, file);
                                    Keyboard.SendKeys("{TAB}");
                                    //TIEMPO UNIDAD
                                    selenium.SelectElementByName("//select[contains(@id,'ddlUniTiem')]", EnfUnidad);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tiempo", true, file);
                                    //FECHA INICIO
                                    selenium.SendKeys("//input[contains(@id,'kcfFecInic')]", FechaInicio);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos educación no formal", true, file);
                                    Thread.Sleep(2000);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Registrada educación no formal", true, file);
                                    //ACTUALIZAR 
                                    if (selenium.ExistControl("//*[@id='ctl00_ContenidoPagina_dtgBiEdnfo_ctl03_LinkButton1']"))
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Existe educación no formal", true, file);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiEdnfo_ctl03_LinkButton1']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Actualizar educación no formal", true, file);
                                        //CIUDAD
                                        selenium.ScrollTo("0", "700");
                                        Thread.Sleep(2000);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipUbi_txtDivPoli')]", Ciudad);
                                        Thread.Sleep(500);
                                        Keyboard.SendKeys("{TAB}");
                                        selenium.Click("//div[@id='ctl00_pBotones']/div");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Ciudad", true, file);
                                        //ADJUNTO
                                        selenium.Scroll("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys(Ruta);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(1000);
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Adjuntar Archivo", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(@id,'btnActualizar')]");
                                        Thread.Sleep(2000);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro Actualizado", true, file);
                                        //ELIMINAR
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgBiEdnfo_ctl03_LinkButton1']");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro a Eliminar", true, file);
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(@id,'btnEliminar')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Registro Eliminado", true, file);

                                    }
                                    else
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("No existe educacion no formal", true, file);

                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se inserto el estudio no formal");
                                    }
                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_ExperienciaLaboral()
        {

            List<string> errorMessages = new List<string>();
            List<string> errorMessagesMetodo = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }
            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_ExperienciaLaboral")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["ElEmpresa"].ToString().Length != 0 && rows["ElEmpresa"].ToString() != null &&
                                rows["ElDireccion"].ToString().Length != 0 && rows["ElDireccion"].ToString() != null &&
                                rows["ElTelefono"].ToString().Length != 0 && rows["ElTelefono"].ToString() != null &&
                                rows["ElTipEmpresa"].ToString().Length != 0 && rows["ElTipEmpresa"].ToString() != null &&
                                rows["ElEmplActual"].ToString().Length != 0 && rows["ElEmplActual"].ToString() != null &&
                                rows["ElCargoEjecutivo"].ToString().Length != 0 && rows["ElCargoEjecutivo"].ToString() != null &&
                                rows["ElDedicacion"].ToString().Length != 0 && rows["ElDedicacion"].ToString() != null &&
                                rows["ElFecIngAno"].ToString().Length != 0 && rows["ElFecIngAno"].ToString() != null &&
                                rows["ElFecIngMes"].ToString().Length != 0 && rows["ElFecIngMes"].ToString() != null &&
                                rows["ElFecIniDia"].ToString().Length != 0 && rows["ElFecIniDia"].ToString() != null &&
                                rows["ElFecRetAno"].ToString().Length != 0 && rows["ElFecRetAno"].ToString() != null &&
                                rows["ElFecRetMes"].ToString().Length != 0 && rows["ElFecRetMes"].ToString() != null &&
                                rows["ElFecRetDia"].ToString().Length != 0 && rows["ElFecRetDia"].ToString() != null &&
                                rows["ElManejaPersonal"].ToString().Length != 0 && rows["ElManejaPersonal"].ToString() != null &&
                                rows["ElCargoDesempeno"].ToString().Length != 0 && rows["ElCargoDesempeno"].ToString() != null &&
                                rows["ElArea"].ToString().Length != 0 && rows["ElArea"].ToString() != null &&
                                rows["ELTipContrato"].ToString().Length != 0 && rows["ELTipContrato"].ToString() != null &&
                                rows["ELMotivoRetiro"].ToString().Length != 0 && rows["ELMotivoRetiro"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["ElJefeInmediato"].ToString().Length != 0 && rows["ElJefeInmediato"].ToString() != null &&
                                rows["ELCarogoJefeInme"].ToString().Length != 0 && rows["ELCarogoJefeInme"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string ElEmpresa = rows["ElEmpresa"].ToString();
                                string ElDireccion = rows["ElDireccion"].ToString();
                                string ElTelefono = rows["ElTelefono"].ToString();
                                string ElTipEmpresa = rows["ElTipEmpresa"].ToString();
                                string ElEmplActual = rows["ElEmplActual"].ToString();
                                string ElCargoEjecutivo = rows["ElCargoEjecutivo"].ToString();
                                string ElDedicacion = rows["ElDedicacion"].ToString();
                                string ElFecIngAno = rows["ElFecIngAno"].ToString();
                                string ElFecIngMes = rows["ElFecIngMes"].ToString();
                                string ElFecIniDia = rows["ElFecIniDia"].ToString();
                                string ElFecRetAno = rows["ElFecRetAno"].ToString();
                                string ElFecRetMes = rows["ElFecRetMes"].ToString();
                                string ElFecRetDia = rows["ElFecRetDia"].ToString();
                                string ElManejaPersonal = rows["ElManejaPersonal"].ToString();
                                string ElCargoDesempeno = rows["ElCargoDesempeno"].ToString();
                                string ElArea = rows["ElArea"].ToString();
                                string ELTipContrato = rows["ELTipContrato"].ToString();
                                string ELMotivoRetiro = rows["ELMotivoRetiro"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string ElJefeInmediato = rows["ElJefeInmediato"].ToString();
                                string ELCarogoJefeInme = rows["ELCarogoJefeInme"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();

                                try
                                {

                                    string database = "";
                                    string user = "";
                                    string CodEmpr = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                        CodEmpr = "9";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                        CodEmpr = "421";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ONATALIA";
                                        CodEmpr = "421";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                        CodEmpr = "9";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //BORRA REGISTROS
                                    string eliminarRegistro1 = $"DELETE BI_ARHEX where cod_empr='{CodEmpr}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE BI_DTPHV where cod_empr={CodEmpr} and ACT_USUA={EmpleadoUser}";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    string eliminarRegistro3 = $"DELETE bi_hvext where COD_EMPL={EmpleadoUser} and cod_empr={CodEmpr} and ACT_USUA={EmpleadoUser}";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Mi Experiencia Laboral')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Experiencia Laboral", true, file);
                                    //EMPRESA
                                    selenium.SendKeys("//input[contains(@id,'txtNomEmpr')]", ElEmpresa);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Empresa ", true, file);
                                    //DIRECCION
                                    selenium.SendKeys("//input[contains(@id,'txtDirEmpr')]", ElDireccion);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Dirección", true, file);
                                    //TELEFONO
                                    selenium.SendKeys("//input[contains(@id,'txtTelEmpr')]", ElTelefono);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Teléfono ", true, file);
                                    //TIPO EMPRESA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipEmpr')]", ElTipEmpresa);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Tipo empresa ", true, file);
                                    //EMPLEO ACTUAL
                                    selenium.SelectElementByName("//select[contains(@id,'ddlEmpActu')]", ElEmplActual);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Empleo actual ", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCarEjec')]", ElCargoEjecutivo);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Cargo Laboral", true, file);
                                    //DEDICACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDedIcac']", ElDedicacion);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Dedicación", true, file);
                                    //FECHA INICIO
                                    string FechaInicio = $"{ElFecIniDia}/{ElFecIngMes}/{ElFecIngAno}";
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_kcfFecIngr_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecIngr_txtFecha']", FechaInicio);
                                    selenium.Screenshot("Fecha inicio", true, file);
                                    //FECHA RETIRO
                                    string FechaRetiro = $"{ElFecRetDia}/{ElFecRetMes}/{ElFecRetAno}";
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_kcfFecReti_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_kcfFecReti_txtFecha']", FechaRetiro);
                                    //MANEJA PERSONAL
                                    selenium.SelectElementByName("//select[contains(@name,'ddlManPers')]", ElManejaPersonal);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Maneja Personal", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "250");
                                    Thread.Sleep(1500);
                                    //CARGO DESEMPEÑADO
                                    selenium.SendKeys("//input[contains(@id,'txtCarDese')]", ElCargoDesempeno);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Cargo", true, file);
                                    //AREA
                                    selenium.SendKeys("//input[contains(@id,'txtDepEmpr')]", ElArea);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Área", true, file);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ELTipContrato);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Tipo contrato ", true, file);
                                    //MOTIVO RETIRO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlMotReti')]", ELMotivoRetiro);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Retiro", true, file);
                                    selenium.ScrollTo("0", "250");
                                    //Validación 1 País
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", ValPais);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]");
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    Thread.Sleep(1000);
                                    //JEFE INMEDIATO
                                    selenium.SendKeys("//input[contains(@id,'txtJefInme')]", ElJefeInmediato);
                                    Thread.Sleep(1000);
                                    //CARGO JEFE INMEDIATO
                                    selenium.SendKeys("//input[contains(@id,'txtCarJefe')]", ELCarogoJefeInme);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Datos Experiencia Laboral", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(2000);
                                    selenium.ChangeAuxWindow();
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnNoProLog']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro Exitoso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //VERIFICAR REGISTRO
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Mi Experiencia Laboral')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Guardar Experiencia Laboral", true, file);
                                    Thread.Sleep(2000);
                                    //ACTUALIZAR REGISTRO
                                    if (selenium.ExistControl("//*[@id='ctl00_ContenidoPagina_dgrBiHvext_ctl03_LinkButton1']"))
                                    {
                                        Thread.Sleep(1500);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dgrBiHvext_ctl03_LinkButton1']");
                                        Thread.Sleep(2000);
                                        selenium.ScrollTo("0","500");
                                        Thread.Sleep(1000);
                                        //CIUDAD
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli']");
                                        Thread.Sleep(500);
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_KCtrDivipEmpre_txtDivPoli']", Ciudad);
                                        Thread.Sleep(500);
                                        //ADJUNTO
                                        selenium.Scroll("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id=\"ctl00_ContenidoPagina_lblAdjunto\"]");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys(Ruta);
                                        Thread.Sleep(2000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Adjunto", true, file);
                                        selenium.SelectElementByName("//select[contains(@id,'ctl00_ContenidoPagina_KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Adjuntar Archivo", true, file);
                                        selenium.Click("//a[contains(@id,'btnActualizar')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Experiencia laboral editada", true, file);
                                        //ELIMINAR REGISTRO
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dgrBiHvext_ctl03_LinkButton1']");
                                        Thread.Sleep(2000);
                                        selenium.Click("//a[contains(@id,'btnEliminar')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Elimina Experiencia Laboral", true, file);
                                    }
                                    else
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("No Existe Exp Laboral", true, file);

                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se inserto la experiencia laboral");
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void BI_Familiares()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BI_Familiares")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["FaIdenti"].ToString().Length != 0 && rows["FaIdenti"].ToString() != null &&
                                rows["FaNombre"].ToString().Length != 0 && rows["FaNombre"].ToString() != null &&
                                rows["FaApellido"].ToString().Length != 0 && rows["FaApellido"].ToString() != null &&
                                rows["FaSexo"].ToString().Length != 0 && rows["FaSexo"].ToString() != null &&
                                rows["FaNaciAno"].ToString().Length != 0 && rows["FaNaciAno"].ToString() != null &&
                                rows["FaNaciMes"].ToString().Length != 0 && rows["FaNaciMes"].ToString() != null &&
                                rows["FaNaciDia"].ToString().Length != 0 && rows["FaNaciDia"].ToString() != null &&
                                rows["FaVive"].ToString().Length != 0 && rows["FaVive"].ToString() != null &&
                                rows["FaGrupoSangre"].ToString().Length != 0 && rows["FaGrupoSangre"].ToString() != null &&
                                rows["FaFactosSangui"].ToString().Length != 0 && rows["FaFactosSangui"].ToString() != null &&
                                rows["FaEstadoCivil"].ToString().Length != 0 && rows["FaEstadoCivil"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string FaIdenti = rows["FaIdenti"].ToString();
                                string FaNombre = rows["FaNombre"].ToString();
                                string FaApellido = rows["FaApellido"].ToString();
                                string FaSexo = rows["FaSexo"].ToString();
                                string FaNaciAno = rows["FaNaciAno"].ToString();
                                string FaNaciMes = rows["FaNaciMes"].ToString();
                                string FaNaciDia = rows["FaNaciDia"].ToString();
                                string FaVive = rows["FaVive"].ToString();
                                string FaGrupoSangre = rows["FaGrupoSangre"].ToString();
                                string FaFactosSangui = rows["FaFactosSangui"].ToString();
                                string FaEstadoCivil = rows["FaEstadoCivil"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string FaEstadoCivil1 = rows["FaEstadoCivil1"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);
                                    //MI INFORMACION PERSONAL/FAMILIARES
                                    selenium.Click("//a[contains(.,'MI INFORMACIÓN PERSONA')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Familiares')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Familiares", true, file);
                                    //IDENTIFICACION
                                    selenium.Click("//input[contains(@id,'txtCodFami')]");
                                    selenium.SendKeys("//input[contains(@id,'txtCodFami')]", FaIdenti);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Identificación", true, file);
                                    //NOMBRE
                                    selenium.Click("//input[contains(@id,'txtNomFami1')]");
                                    selenium.SendKeys("//input[contains(@id,'txtNomFami1')]", FaNombre);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nombre", true, file);
                                    //APELLIDO
                                    selenium.Click("//input[contains(@id,'txtApeFami1')]");
                                    selenium.SendKeys("//input[contains(@id,'txtApeFami1')]", FaApellido);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Apellido", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "250");
                                    Thread.Sleep(1000);
                                    //SEXO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlSexFami')]", FaSexo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Sexo", true, file);
                                    //FECHA NACIMIENTO
                                    string FechaNacimiento = $"{FaNaciDia}/{FaNaciMes}/{FaNaciAno}";
                                    selenium.Click("//input[contains(@id,'kcfFecNaci')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFecNaci')]", FechaNacimiento);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Fecha Nacimiento", true, file);
                                    //GRUPO SANGUINEO
                                    bool valGrupSang = selenium.ExistControl("//select[contains(@id,'ddlGruSang')]");
                                    if (valGrupSang)
                                    {
                                        selenium.Click("//select[contains(@id,'ddlGruSang')]");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[contains(@id,'ddlGruSang')]", FaGrupoSangre);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Grupo Sangre", true, file);
                                        selenium.Click("//select[contains(@id,'ddlFacSang')]");
                                        Thread.Sleep(2000);
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFacSang')]", FaFactosSangui);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Sangre", true, file);

                                    }

                                    //ESTADO CIVIL
                                    bool valEstCivil = selenium.ExistControl("//select[contains(@id,'ddlEstCivi')]");
                                    if (valEstCivil)
                                    {
                                        selenium.Click("//select[contains(@id,'ddlEstCivi')]");
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//select[contains(@id,'ddlEstCivi')]", FaEstadoCivil);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Estado Civil", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_ddlEstCivi']");
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//*[@id='ctl00_ContenidoPagina_ddlEstCivi']", FaEstadoCivil);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Estado Civil", true, file);
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_pBotones']/div[1]");
                                    //DIRECCION
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_txtDirFami']");
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_txtDirFami']");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtDirFami']", "AV 7 48");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Dirección", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Guardar Familiares", true, file);
                                    Thread.Sleep(1000);

                                    //EDITAR REGISTRO
                                    if (selenium.ExistControl("//a[@id='ctl00_ContenidoPagina_Familiares_ctl03_LinkButton1']/i"))
                                    {
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Familiar a editar", true, file);
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_Familiares_ctl03_LinkButton1']/i");
                                        Thread.Sleep(1500);
                                        selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlEstCivi']", FaEstadoCivil1);
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Estado Civil editado", true, file);
                                        Thread.Sleep(3000);
                                        selenium.Click("//a[@id='btnActualizar']");
                                        Thread.Sleep(6000);

                                        try
                                        {
                                            Screenshot("Registro Actualizado", true, file);
                                            selenium.AcceptAlert();
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    else
                                    {
                                        selenium.Screenshot("No existe Familiar para editar", true, file);

                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se inserto la referencia familiar");
                                    }
                                    //ELIMINAR REGISTRO
                                    Thread.Sleep(4000);
                                    if (selenium.ExistControl("//*[@id='ctl00_ContenidoPagina_Familiares_ctl03_LinkButton1']/i"))
                                    {
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Familiar", true, file);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_Familiares_ctl03_LinkButton1']/i");
                                        selenium.Click("//a[contains(@id,'btnEliminar')]");
                                        Thread.Sleep(1500);
                                        selenium.Screenshot("Elimina Familiar", true, file);

                                        try
                                        {
                                            Screenshot("Registro Eliminado", true, file);
                                            selenium.AcceptAlert();
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    else
                                    {
                                        selenium.Screenshot("No existe Familiar", true, file);

                                        errorMessagesMetodo.Add(" ::::::::::::::::::::::" + "MSG: No se inserto la referencia familiar");
                                    }
                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónLicenciasyCalamidadesRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónLicenciasyCalamidadesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos licencias y calamidades
                                rows["TipoCalamidad"].ToString().Length != 0 && rows["TipoCalamidad"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["ObsCalami"].ToString().Length != 0 && rows["ObsCalami"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["EmpleadoUser2"].ToString().Length != 0 && rows["EmpleadoUser2"].ToString() != null &&
                                rows["EmpleadoPass2"].ToString().Length != 0 && rows["EmpleadoPass2"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos licencias y calamidades
                                string TipoCalamidad = rows["TipoCalamidad"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string ObsCalami = rows["ObsCalami"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string EmpleadoUser2 = rows["EmpleadoUser2"].ToString();
                                string EmpleadoPass2 = rows["EmpleadoPass2"].ToString();

                                try
                                {

                                    string database = "";
                                    string user = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ONATALIA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='L' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarLicen = $"Delete from NM_LIYCA where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarLicen, database, user);

                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);

                                    //Process: Calamidades y Licencias
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(200);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Licencias y calamidades", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ingresar calamidad", true, file);
                                    //TIPO CALAMIDAD
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMaus')]", TipoCalamidad);
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'KCtrlFechaFecDesd')]", FechaInicio);
                                    Thread.Sleep(5000);
                                    ChromeDriver driver = selenium.returnDriver();
                                    driver.FindElement(By.XPath("//textarea[contains(@id,'Texto')]")).SendKeys(ObsCalami);
                                    driver.FindElement(By.XPath("//textarea[contains(@id,'Texto')]")).SendKeys(ObsCalami);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Datos calamidad", true, file);
                                    driver.FindElement(By.XPath("//a[contains(@id,'btnGuardar')]")).Click();
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Guardar", true, file);

                                    try
                                    {
                                        Thread.Sleep(500);
                                        Screenshot("Alerta", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {

                                    }
                                    Thread.Sleep(1000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(200);
                                    selenium.Scroll("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.Click("//a[contains(.,'Licencias y/o calamidades')]");
                                    selenium.AcceptAlert();
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Licencias y calamidades Registrada", true, file);
                                    selenium.Close();

                                    //Abrir en Rol Lider para Aprobar Licencia y/o Calamidad
                                    Thread.Sleep(2000);
                                    selenium.LoginApps(app, EmpleadoUser2, EmpleadoPass2, url, file);
                                    Thread.Sleep(500);
                                    if (database == "ORA")
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);

                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(3000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li/ul/li[7]/a");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);

                                        Thread.Sleep(2500);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(@id,'pLider')]");
                                        selenium.Screenshot("Rol Lider", true, file);

                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                        Thread.Sleep(1000);
                                        selenium.Scroll("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Click("//a[contains(.,'Licencias y Calamidades por aprobar')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Licencias y Calamidades por aprobar", true, file);
                                        Thread.Sleep(1000);
                                    }

                                    if (selenium.ExistControl("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i"))
                                    {
                                        //SELECCIONAR REGISTRO
                                        selenium.Click("//table[@id='tableLicencias']/tbody/tr/td[11]/a/i");
                                        selenium.Screenshot("Seleccionar Registro Licencias y Calamidades", true, file);
                                        Thread.Sleep(2500);
                                        //REGISTRO POR APROBAR
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmLiyca_ctl02_LinkButton1']/i");
                                        selenium.Screenshot("Registro para Aprobar", true, file);
                                        Thread.Sleep(2500);
                                        //APROBACION
                                        selenium.Click("//input[contains(@id,'Aprueba')]");
                                        Thread.Sleep(2000);
                                        Screenshot("Aprobar", true, file);
                                        selenium.AcceptAlert();
                                        selenium.Screenshot("Alerta de Aprobación Exitosa", true, file);
                                        Thread.Sleep(5000);
                                        //ENVIO CORREO
                                        selenium.Screenshot("Envia Correo Aprobación", true, file);
                                        selenium.Click("//input[contains(@id,'btnEnviar')]");
                                        Thread.Sleep(5000);

                                    }
                                    else
                                    {
                                        Assert.Fail("ERROR: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    Thread.Sleep(1000);

                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteListadoPermisosLíderesAsigNiveles()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            // TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteListadoPermisosLíderesAsigNiveles")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ListadoLideres.pdf");
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);

                                    selenium.Click("//button[contains(@id,'pAsistente')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Listado Permisos Lideres')]");
                                    selenium.Click("//a[contains(.,'Listado Permisos Lideres')]");

                                    Thread.Sleep(500);
                                    selenium.Screenshot("Listado de Permisos Lideres", true, file);


                                    selenium.Click("//input[contains(@id,'KCtrlFecInic')]");
                                    selenium.SendKeys("//input[contains(@id,'KCtrlFecInic')]", FechaInicio);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_chkAprobado']");
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_chkRechazado']");
                                        Thread.Sleep(1000);
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_rblAgruparPor_1']");
                                        Thread.Sleep(1000);
                                    }
                                    selenium.Click("//input[contains(@id,'btnConsultar')]");
                                    selenium.Click("//input[contains(@id,'btnConsultar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Listado", true, file);
                                    selenium.SetImplicitTimeoutSeconds(5);
                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        string Error = selenium.GetText("//span[contains(@id,'lblError')]");
                                        Assert.Fail("ERROR AL CONSULTAR LOS PERMISOS DEL LIDER\n" + Error +
                                                    "\nNO EXISTEN PERMISOS DE LOS LIDERES DESDE LA FECHA " + FechaInicio + " HASTA EL MES EN CURSO");
                                    }
                                    else
                                    {
                                        selenium.Click("//input[contains(@id,'btnReporte')]");
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Reporte", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='ctl00_btnImprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{DOWN}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("ListadoLideres");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ListadoLideres.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        LimpiarProcesos();

                                    }


                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteManualFuncionesAprobados()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteManualFuncionesAprobados")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["Cargo"].ToString().Length != 0 && rows["Cargo"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string Cargo = rows["Cargo"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ManualFunciones.pdf");
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(1000);

                                    //////REPORTES FUNCIONES APROBADOS\\\\\\
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(1000);
                                    selenium.Scroll("//a[contains(.,'ANALISIS Y COMPETENCIAS')]");
                                    selenium.Click("//a[contains(.,'ANALISIS Y COMPETENCIAS')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Listado Manual Funciones Aprobadas')]");
                                    selenium.SendKeys("//input[contains(@id,'txtConsuNomCarg')]", Cargo);
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Consulta por nombre", true, file);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_btnConsulNom']/span[1]");
                                    Thread.Sleep(3000);
                                    selenium.Click("//td[7]/a/i");

                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Error", true, file);

                                        string Error = selenium.GetText("//span[contains(@id,'lblError')]");
                                        Assert.Fail(Error);
                                    }
                                    else
                                    {
                                        Thread.Sleep(500);
                                        selenium.Screenshot("Reporte manual de funciones aprobados", true, file);
                                        //PDF IMPRIMIR
                                        selenium.Click("//a[@id='ctl00_btnImprimir']");
                                        Thread.Sleep(20000);
                                        Screenshot("IMPRIMIR PDF", true, file);
                                        //GUARDAR PDF
                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }

                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{DOWN}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);

                                        for (int i = 0; i < 5; i++)
                                        {
                                            Keyboard.SendKeys("{TAB}");
                                            Thread.Sleep(1000);
                                        }
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("ManualFunciones");
                                        Thread.Sleep(5000);
                                        Keyboard.SendKeys("{ENTER}");
                                        Thread.Sleep(5000);
                                        //ABRIR PDF
                                        string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ManualFunciones.pdf");
                                        Process.Start(pdfPath);
                                        Thread.Sleep(6000);
                                        Screenshot("PDF ABIERTO", true, file);
                                        LimpiarProcesos();
                                    }
                                        fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }

                                    if (e.ToString().IndexOf("chrome not reachable") == -1)
                                    {
                                        Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    }

                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosHoraRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónDePermisosHoraRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["PerMoAusentismo"].ToString().Length != 0 && rows["PerMoAusentismo"].ToString() != null &&
                                rows["PerFecIniAno"].ToString().Length != 0 && rows["PerFecIniAno"].ToString() != null &&
                                rows["PerFecIniMes"].ToString().Length != 0 && rows["PerFecIniMes"].ToString() != null &&
                                rows["PerFecIniDia"].ToString().Length != 0 && rows["PerFecIniDia"].ToString() != null &&
                                rows["PerFecIniHra"].ToString().Length != 0 && rows["PerFecIniHra"].ToString() != null &&
                                rows["PerFecIniMin"].ToString().Length != 0 && rows["PerFecIniMin"].ToString() != null &&
                                rows["PerFecIniUso"].ToString().Length != 0 && rows["PerFecIniUso"].ToString() != null &&
                                rows["PerFecFinAno"].ToString().Length != 0 && rows["PerFecFinAno"].ToString() != null &&
                                rows["PerFecFinMes"].ToString().Length != 0 && rows["PerFecFinMes"].ToString() != null &&
                                rows["PerFecFinDia"].ToString().Length != 0 && rows["PerFecFinDia"].ToString() != null &&
                                rows["PerFecFinHra"].ToString().Length != 0 && rows["PerFecFinHra"].ToString() != null &&
                                rows["PerFecFinMin"].ToString().Length != 0 && rows["PerFecFinMin"].ToString() != null &&
                                rows["PerFecFinUso"].ToString().Length != 0 && rows["PerFecFinUso"].ToString() != null &&
                                rows["PerObservacion"].ToString().Length != 0 && rows["PerObservacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["RmtPerm"].ToString().Length != 0 && rows["RmtPerm"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["CodSoli"].ToString().Length != 0 && rows["CodSoli"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string PerMoAusentismo = rows["PerMoAusentismo"].ToString();
                                string PerFecIniAno = rows["PerFecIniAno"].ToString();
                                string PerFecIniMes = rows["PerFecIniMes"].ToString();
                                string PerFecIniDia = rows["PerFecIniDia"].ToString();
                                string PerFecIniHra = rows["PerFecIniHra"].ToString();
                                string PerFecIniMin = rows["PerFecIniMin"].ToString();
                                string PerFecIniUso = rows["PerFecIniUso"].ToString();
                                string PerFecFinAno = rows["PerFecFinAno"].ToString();
                                string PerFecFinMes = rows["PerFecFinMes"].ToString();
                                string PerFecFinDia = rows["PerFecFinDia"].ToString();
                                string PerFecFinHra = rows["PerFecFinHra"].ToString();
                                string PerFecFinMin = rows["PerFecFinMin"].ToString();
                                string PerFecFinUso = rows["PerFecFinUso"].ToString();
                                string PerObservacion = rows["PerObservacion"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string RmtPerm = rows["RmtPerm"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string CodSoli = rows["CodSoli"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTRO
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistroPrevio1 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nuevo Permiso", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", PerMoAusentismo);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "250");
                                    string FechaInicio = $"{PerFecIniDia}/{PerFecIniMes}/{PerFecIniAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Salida
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecIniHra, PerFecIniUso, 5);
                                    Thread.Sleep(500);
                                    string FechaFinal = $"{PerFecFinDia}/{PerFecFinMes}/{PerFecFinAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaFinPermiso')]", FechaFinal);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Entrada
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecFinHra, PerFecFinUso, 6);
                                    selenium.SendKeys("//textarea[contains(@name,'txtTexto')]", PerObservacion);
                                    //adjunto
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    selenium.Screenshot("Datos", true, file);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();
                                    
                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);

                                    if (selenium.ExistControl("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i"))
                                    {
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tblNmCtper']/tbody/tr[2]/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        //Aprobar Solicitud
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }
                                        Thread.Sleep(10000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónDePermisosRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {
                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["PerMoAusentismo"].ToString().Length != 0 && rows["PerMoAusentismo"].ToString() != null &&
                                rows["PerFecIniAno"].ToString().Length != 0 && rows["PerFecIniAno"].ToString() != null &&
                                rows["PerFecIniMes"].ToString().Length != 0 && rows["PerFecIniMes"].ToString() != null &&
                                rows["PerFecIniDia"].ToString().Length != 0 && rows["PerFecIniDia"].ToString() != null &&
                                rows["PerFecIniHra"].ToString().Length != 0 && rows["PerFecIniHra"].ToString() != null &&
                                rows["PerFecIniMin"].ToString().Length != 0 && rows["PerFecIniMin"].ToString() != null &&
                                rows["PerFecIniUso"].ToString().Length != 0 && rows["PerFecIniUso"].ToString() != null &&
                                rows["PerFecFinAno"].ToString().Length != 0 && rows["PerFecFinAno"].ToString() != null &&
                                rows["PerFecFinMes"].ToString().Length != 0 && rows["PerFecFinMes"].ToString() != null &&
                                rows["PerFecFinDia"].ToString().Length != 0 && rows["PerFecFinDia"].ToString() != null &&
                                rows["PerFecFinHra"].ToString().Length != 0 && rows["PerFecFinHra"].ToString() != null &&
                                rows["PerFecFinMin"].ToString().Length != 0 && rows["PerFecFinMin"].ToString() != null &&
                                rows["PerFecFinUso"].ToString().Length != 0 && rows["PerFecFinUso"].ToString() != null &&
                                rows["PerObservacion"].ToString().Length != 0 && rows["PerObservacion"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["CodEmpresa"].ToString().Length != 0 && rows["CodEmpresa"].ToString() != null &&
                                rows["RmtPerm"].ToString().Length != 0 && rows["RmtPerm"].ToString() != null &&
                                rows["TipApli"].ToString().Length != 0 && rows["TipApli"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null &&
                                rows["CodSoli"].ToString().Length != 0 && rows["CodSoli"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string PerMoAusentismo = rows["PerMoAusentismo"].ToString();
                                string PerFecIniAno = rows["PerFecIniAno"].ToString();
                                string PerFecIniMes = rows["PerFecIniMes"].ToString();
                                string PerFecIniDia = rows["PerFecIniDia"].ToString();
                                string PerFecIniHra = rows["PerFecIniHra"].ToString();
                                string PerFecIniMin = rows["PerFecIniMin"].ToString();
                                string PerFecIniUso = rows["PerFecIniUso"].ToString();
                                string PerFecFinAno = rows["PerFecFinAno"].ToString();
                                string PerFecFinMes = rows["PerFecFinMes"].ToString();
                                string PerFecFinDia = rows["PerFecFinDia"].ToString();
                                string PerFecFinHra = rows["PerFecFinHra"].ToString();
                                string PerFecFinMin = rows["PerFecFinMin"].ToString();
                                string PerFecFinUso = rows["PerFecFinUso"].ToString();
                                string PerObservacion = rows["PerObservacion"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string user = rows["user"].ToString();
                                string CodEmpresa = rows["CodEmpresa"].ToString();
                                string RmtPerm = rows["RmtPerm"].ToString();
                                string TipApli = rows["TipApli"].ToString();
                                string CodSoli = rows["CodSoli"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();


                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTRO
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where cod_empr = '{CodEmpresa}' and COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);
                                    string eliminarRegistroPrevio1 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = '{TipApli}' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);

                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(1500);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permisos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nuevo Permiso", true, file);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", PerMoAusentismo);
                                    Thread.Sleep(2000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "250");
                                    string FechaInicio = $"{PerFecIniDia}/{PerFecIniMes}/{PerFecIniAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(@id,'ctl00_btnCerrar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Salida
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecIniHra, PerFecIniUso, 5);
                                    Thread.Sleep(500);
                                    string FechaFinal = $"{PerFecFinDia}/{PerFecFinMes}/{PerFecFinAno}";
                                    Thread.Sleep(500);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaFinPermiso')]", FechaFinal);
                                    Thread.Sleep(2000);
                                    // Selecciona la Hora de Entrada
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(1000);
                                    selenium.ClockAut(PerFecFinHra, PerFecFinUso, 6);
                                    selenium.SendKeys("//textarea[contains(@name,'txtTexto')]", PerObservacion);
                                    //adjunto
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    selenium.Screenshot("Datos", true, file);
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(500);
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(1500);
                                    selenium.Close();

                                    //Login Jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");

                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);

                                    if (selenium.ExistControl("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i"))
                                    {
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tblNmCtper']/tbody/tr[2]/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        //Aprobar Solicitud
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }
                                        Thread.Sleep(10000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }



        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosCompensatoriosHoraRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();

            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónDePermisosCompensatoriosHoraRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["Hora1"].ToString().Length != 0 && rows["Hora1"].ToString() != null &&
                                rows["Jornada1"].ToString().Length != 0 && rows["Jornada1"].ToString() != null &&
                                rows["Hora2"].ToString().Length != 0 && rows["Hora2"].ToString() != null &&
                                rows["HoraCompensar1"].ToString().Length != 0 && rows["HoraCompensar1"].ToString() != null &&
                                rows["HoraCompensar2"].ToString().Length != 0 && rows["HoraCompensar2"].ToString() != null &&
                                rows["Jornada2"].ToString().Length != 0 && rows["Jornada2"].ToString() != null &&
                                rows["ObservacionesPermiso"].ToString().Length != 0 && rows["ObservacionesPermiso"].ToString() != null &&
                                rows["ObservacionesSolicitud"].ToString().Length != 0 && rows["ObservacionesSolicitud"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string url = rows["url"].ToString();
                                string user = rows["user"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string Hora1 = rows["Hora1"].ToString();
                                string Jornada1 = rows["Jornada1"].ToString();
                                string Hora2 = rows["Hora2"].ToString();
                                string HoraCompensar1 = rows["HoraCompensar1"].ToString();
                                string HoraCompensar2 = rows["HoraCompensar2"].ToString();
                                string Jornada2 = rows["Jornada2"].ToString();
                                string ObservacionesPermiso = rows["ObservacionesPermiso"].ToString();
                                string ObservacionesSolicitud = rows["ObservacionesSolicitud"].ToString();
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTROS
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro3 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(2000);

                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //MOTIVO AUSENTISMO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", Motivo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //FECHA INICIO
                                    Thread.Sleep(7000);
                                    selenium.Click("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    //HORA INICIO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(Hora1, Jornada1, 5);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Inicio", true, file);
                                    //HORA FINAL
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(Hora2, Jornada1, 6);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Final", true, file);
                                    //COMPENSATORIO DIA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C16']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Día Compensatorio", true, file);
                                    //HORA INICIO COMPENSATORIO
                                    selenium.ScrollTo("0", "500");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(HoraCompensar1, Jornada2, 7);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Inicio Compensatorio", true, file);
                                    //HORA FIN COMPENSATORIO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(HoraCompensar2, Jornada2, 8);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Fin Compensatorio", true, file);
                                    //AGREGAR COMPENSATORIO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                    Thread.Sleep(5000);
                                    selenium.ScrollTo("0", "700");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Compensatorio Agregado", true, file);
                                    //OBSERVACIONES DE PERMISOS
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservacionesPermiso);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Observaciones Permiso", true, file);
                                    //OBSERVACIONES SOLICITUD
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservacionesSolicitud);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Observaciones Solicitud", true, file);
                                    //ADJUNTO
                                    for(int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Screenshot("Alerta Permiso Guardado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //APROBACION ROL LIDER
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Lider", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i"))
                                    {
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tblNmCtper']/tbody/tr[2]/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        //Aprobar Solicitud
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }
                                        Thread.Sleep(10000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónDePermisosCompensatoriosHoraMinutosRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();

            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónDePermisosCompensatoriosHoraMinutosRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["TipoDocumAdjunto"].ToString().Length != 0 && rows["TipoDocumAdjunto"].ToString() != null &&
                                rows["Motivo"].ToString().Length != 0 && rows["Motivo"].ToString() != null &&
                                rows["FechaInicio"].ToString().Length != 0 && rows["FechaInicio"].ToString() != null &&
                                rows["Hora1"].ToString().Length != 0 && rows["Hora1"].ToString() != null &&
                                rows["Jornada1"].ToString().Length != 0 && rows["Jornada1"].ToString() != null &&
                                rows["Hora2"].ToString().Length != 0 && rows["Hora2"].ToString() != null &&
                                rows["HoraCompensar1"].ToString().Length != 0 && rows["HoraCompensar1"].ToString() != null &&
                                rows["HoraCompensar2"].ToString().Length != 0 && rows["HoraCompensar2"].ToString() != null &&
                                rows["Jornada2"].ToString().Length != 0 && rows["Jornada2"].ToString() != null &&
                                rows["ObservacionesPermiso"].ToString().Length != 0 && rows["ObservacionesPermiso"].ToString() != null &&
                                rows["ObservacionesSolicitud"].ToString().Length != 0 && rows["ObservacionesSolicitud"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string url = rows["url"].ToString();
                                string user = rows["user"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumAdjunto = rows["TipoDocumAdjunto"].ToString();
                                string Motivo = rows["Motivo"].ToString();
                                string FechaInicio = rows["FechaInicio"].ToString();
                                string Hora1 = rows["Hora1"].ToString();
                                string Jornada1 = rows["Jornada1"].ToString();
                                string Hora2 = rows["Hora2"].ToString();
                                string HoraCompensar1 = rows["HoraCompensar1"].ToString();
                                string HoraCompensar2 = rows["HoraCompensar2"].ToString();
                                string Jornada2 = rows["Jornada2"].ToString();
                                string ObservacionesPermiso = rows["ObservacionesPermiso"].ToString();
                                string ObservacionesSolicitud = rows["ObservacionesSolicitud"].ToString();
                                try
                                {
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //ELIMINAR REGISTROS
                                    string eliminarRegistroPrevio = $"DELETE NM_CTDPE where ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistroPrevio, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_CTPER where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro2 = $"DELETE NM_SOLTR where tip_apli = 'P' and ACT_USUA = '{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro2, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro3 = $"DELETE NM_AUSEN where COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRegistro3, database, user);
                                    Thread.Sleep(2000);

                                    //INICIO PRUEBA
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //MOTIVO AUSENTISMO
                                    selenium.SelectElementByName("//select[contains(@name,'ddlCodMaus')]", Motivo);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    //FECHA INICIO
                                    Thread.Sleep(7000);
                                    selenium.Click("//input[contains(@id,'kcfFechaIniPermiso')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'kcfFechaIniPermiso')]", FechaInicio);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Fecha Inicio", true, file);
                                    //HORA INICIO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorSali_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(Hora1, Jornada1, 5);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Inicio", true, file);
                                    //HORA FINAL
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorEntr_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(Hora2, Jornada1, 6);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Final", true, file);
                                    //COMPENSATORIO DIA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgDiaComp_ctl02_C16']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Día Compensatorio", true, file);
                                    //HORA INICIO COMPENSATORIO
                                    selenium.ScrollTo("0", "500");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCoi_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(HoraCompensar1, Jornada2, 7);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Inicio Compensatorio", true, file);
                                    //HORA FIN COMPENSATORIO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlHorCof_txtHora']");
                                    Thread.Sleep(2000);
                                    selenium.ClockAut(HoraCompensar2, Jornada2, 8);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Hora Fin Compensatorio", true, file);
                                    //AGREGAR COMPENSATORIO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAgrComp']");
                                    Thread.Sleep(5000);
                                    selenium.ScrollTo("0", "700");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Compensatorio Agregado", true, file);
                                    //OBSERVACIONES DE PERMISOS
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", ObservacionesPermiso);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Observaciones Permiso", true, file);
                                    //OBSERVACIONES SOLICITUD
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErvaSoli_txtTexto']", ObservacionesSolicitud);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Observaciones Solicitud", true, file);
                                    //ADJUNTO
                                    for (int i = 0; i < 2; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumAdjunto);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Screenshot("Alerta Permiso Guardado", true, file);
                                        Thread.Sleep(5000);
                                        selenium.AcceptAlert();
                                    }
                                    catch { }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(500);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();

                                    //APROBACION ROL LIDER
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Login Lider", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Permisos de Mis Colaboradores')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Permisos de Mis Colaboradores", true, file);

                                    //Ver Detalle de la Solicitud
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i"))
                                    {
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//table[@id='tblNmCtper']/tbody/tr/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tblNmCtper']/tbody/tr[2]/td[9]/a/i");
                                            selenium.Screenshot("Ver Detalle Solicitud", true, file);
                                        }
                                        //Aprobar Solicitud
                                        selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprueba']");
                                        Thread.Sleep(1000);
                                        if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                        {
                                            selenium.Click("//a[@id='ctl00_btnCerrar']");

                                        }
                                        Thread.Sleep(10000);
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Solicitud Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("Error: NO EXISTEN SOLICITUDES POR APROBAR DE MIS COLABORADORES");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Close();
                                    fv.ConvertWordToPDF(file, database);

                                    //VERIFICAR APROBACION
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    //MIS PERMISOS
                                    selenium.Click("//button[contains(@id,'pColaborador')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Permisos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Mis Permiso", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgNmCtper_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Permiso Aprobado", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Close();
                                    //////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_SolicitudDePrórrogasRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_SolicitudDePrórrogasRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Prorroga
                                rows["EmpleadoPro"].ToString().Length != 0 && rows["EmpleadoPro"].ToString() != null &&
                                rows["TipoProrroga"].ToString().Length != 0 && rows["TipoProrroga"].ToString() != null &&
                                rows["DiasProrroga"].ToString().Length != 0 && rows["DiasProrroga"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Prorroga
                                string EmpleadoPro = rows["EmpleadoPro"].ToString();
                                string TipoProrroga = rows["TipoProrroga"].ToString();
                                string DiasProrroga = rows["DiasProrroga"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();


                                try
                                {
                                    string user = "";
                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ONATALIA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //ELIMINAR REGISTRO
                                    Thread.Sleep(2000);
                                    string eliminarRegistro = $"DELETE NM_PRORR where COD_EMPL = '{EmpleadoPro}'";
                                    db.UpdateDeleteInsert(eliminarRegistro, database, user);
                                    Thread.Sleep(2000);
                                    string eliminarRegistro1 = $"DELETE NM_SOLTR where tip_apli = 'PR' and ACT_USUA = '{EmpleadoPro}'";
                                    db.UpdateDeleteInsert(eliminarRegistro1, database, user);
                                    Thread.Sleep(4000);


                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    ////////////////////////////////////////////////////
                                    /////Rol Lider
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    selenium.Screenshot("Rol Lider", true, file);
                                    if (database == "SQL")
                                    {
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(5000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(5000);
                                    }
                                    selenium.Screenshot("Prórrogas de contratos", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                    {
                                        selenium.Click("//a[@id='ctl00_btnCerrar']");

                                    }
                                    selenium.Screenshot("Nueva Prórroga", true, file);
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.SendKeys("//*[@id='ctl00_ContenidoPagina_txtCodEmplAux']", EmpleadoPro);
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_txtCodEmpl']");
                                        selenium.Click("//input[contains(@id,'btnCargar')]");
                                        Thread.Sleep(3000);

                                    }
                                    else
                                    {
                                        selenium.SendKeys("//input[contains(@id,'txtCodEmplAux')]", EmpleadoPro);
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_txtCodEmpl']");
                                        Thread.Sleep(1000);
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_btnCargar']");
                                        Thread.Sleep(3000);
                                    }
                                    //TIPO PRORROGA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipPror')]", TipoProrroga);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo Prórroga",true,file);
                                    Thread.Sleep(2000);
                                    //OBSERVACIONES
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_txtObsErva_txtTexto']", "PRUEBA PRORROGAS POR LIDER");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Prórroga de contratos Diligenciada", false, file);
                                    //GUARDAR PRORROGA
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro Ingresado Correctamente", false, file);
                                    //VERIFICAR REGISTRO
                                    if (database == "SQL")
                                    {
                                        Thread.Sleep(2000);
                                        selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[22]/a");
                                        Thread.Sleep(5000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(2000);
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul/li[20]/a");
                                        Thread.Sleep(5000);
                                    }
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Prórrogas de contratos Registrada", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteManualdeFuncionesPorCargo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1"; 

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteManualdeFuncionesPorCargo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ManualFunciones.pdf");

                                    ////LOGIN APP////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////


                                    ///////////////////REPORTE
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Reporte Manual de Funciones')]");

                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        Assert.Fail(selenium.GetText("//span[contains(@id,'lblError')]"));
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Manual Funciones", true, file);

                                    Thread.Sleep(2000);

                                    //Ventana Emergente
                                    selenium.ChangeAuxWindow();
                                    selenium.SelectElementByName("//select[@id='ctl00_ContentPopapModel_ddlTipReporte']", "Por Cargo");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Seleccionar Por CARGO", true, file);

                                    Thread.Sleep(5000);
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnGenerar']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ManualFunciones");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ManualFunciones.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();


                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_ReporteManualdeFuncionesPorRol()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1"; 

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_ReporteManualdeFuncionesPorRol")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();

                                try
                                {

                                    string database = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";

                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";

                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/ManualFunciones1.pdf");
                                    ////LOGIN APP////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////
                                    

                                    ///////////////////REPORTE
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Reporte Manual de Funciones')]");

                                    if (selenium.ExistControl("//span[contains(@id,'lblError')]"))
                                    {
                                        Assert.Fail(selenium.GetText("//span[contains(@id,'lblError')]"));
                                    }

                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Manual Funciones", true, file);

                                    Thread.Sleep(2000);

                                    //Ventana Emergente
                                    selenium.ChangeAuxWindow();
                                    selenium.SelectElementByName("//select[@id='ctl00_ContentPopapModel_ddlTipReporte']", "Por Rol");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Seleccionar Por ROL", true, file);

                                    Thread.Sleep(5000);
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnGenerar']");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Reporte Generado", true, file);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_btnImprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("ManualFunciones1");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ManualFunciones1.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();

                                    Thread.Sleep(2000);
                                    Thread.Sleep(2000);
                                    selenium.Close();


                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void NM_FlujoAprobaciónVacacionesRolLider()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.NM_FlujoAprobaciónVacacionesRolLider")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["VacFecDesdeAno"].ToString().Length != 0 && rows["VacFecDesdeAno"].ToString() != null &&
                                rows["VacFecDesdeMes"].ToString().Length != 0 && rows["VacFecDesdeMes"].ToString() != null &&
                                rows["VacFecDesdeDia"].ToString().Length != 0 && rows["VacFecDesdeDia"].ToString() != null &&
                                rows["VacFecHastaAno"].ToString().Length != 0 && rows["VacFecHastaAno"].ToString() != null &&
                                rows["VacFecHastaMes"].ToString().Length != 0 && rows["VacFecHastaMes"].ToString() != null &&
                                rows["VacFecHastaDia"].ToString().Length != 0 && rows["VacFecHastaDia"].ToString() != null &&
                                rows["VacFecRegresoAno"].ToString().Length != 0 && rows["VacFecRegresoAno"].ToString() != null &&
                                rows["VacFecRegresoKMes"].ToString().Length != 0 && rows["VacFecRegresoKMes"].ToString() != null &&
                                rows["VacFecRegresoDia"].ToString().Length != 0 && rows["VacFecRegresoDia"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string VacFecDesdeAno = rows["VacFecDesdeAno"].ToString();
                                string VacFecDesdeMes = rows["VacFecDesdeMes"].ToString();
                                string VacFecDesdeDia = rows["VacFecDesdeDia"].ToString();
                                string VacFecHastaAno = rows["VacFecHastaAno"].ToString();
                                string VacFecHastaMes = rows["VacFecHastaMes"].ToString();
                                string VacFecHastaDia = rows["VacFecHastaDia"].ToString();
                                string VacFecRegresoAno = rows["VacFecRegresoAno"].ToString();
                                string VacFecRegresoKMes = rows["VacFecRegresoKMes"].ToString();
                                string VacFecRegresoDia = rows["VacFecRegresoDia"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();

                                try
                                {
                                    string database = "";
                                    string user = "";
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        user = "ODESAR";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        user = "ONATALIA";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                        user = "SDesar";
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //eliminar registros previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);
                                    string eliminarVacaciones = $"Delete from NM_PROVA where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarVacaciones, database, user);
                                    string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='{JefeUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud1, database, user);
                                    if (database == "SQL")
                                    {
                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='124";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);
                                        string eliminarSolicitud3 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='11";
                                        db.UpdateDeleteInsert(eliminarSolicitud3, database, user);

                                    }
                                    else
                                    {
                                        string eliminarSolicitud2 = $"Delete from NM_SOLTR where tip_apli ='A' AND COD_RESP ='45504088";
                                        db.UpdateDeleteInsert(eliminarSolicitud2, database, user);
                                    }
    
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES
                                    Thread.Sleep(2500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //NUEVO
                                    selenium.Click("//div[@id='ctl00_pBotones']/div/a[2]");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Ingreso Vacaciones", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']");
                                    Thread.Sleep(2000);
                                    string FechaDesde = $"{VacFecDesdeDia}/{VacFecDesdeMes}/{VacFecDesdeAno}";
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis1_txtFecha']", FechaDesde);
                                    selenium.Screenshot("Fecha Desde", true, file);

                                    ChromeDriver driver = selenium.returnDriver();
                                    string FechaHasta = $"{VacFecHastaDia}/{VacFecHastaMes}/{VacFecHastaAno}";
                                    Thread.Sleep(1500);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']");
                                    driver.FindElement(By.XPath("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']")).Click();
                                    driver.FindElement(By.XPath("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']")).Clear();
                                    driver.FindElement(By.XPath("//input[@id='ctl00_ContenidoPagina_KCtrlFecDis2_txtFecha']")).SendKeys(FechaHasta);
                                    selenium.Screenshot("Fecha Hasta", true, file);
                                    Thread.Sleep(1000);
                                    selenium.Click("//textarea[contains(@id,'KtxtObserSoli')]");
                                    Thread.Sleep(1000);
                                    driver.FindElement(By.XPath("//textarea[contains(@id,'KtxtObserSoli')]")).SendKeys("PRUEBAS");
                                    Thread.Sleep(1000);
                                    driver.FindElement(By.XPath("//textarea[contains(@id,'KtxtObserSoli')]")).SendKeys("PRUEBAS");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Datos de vacaciones", true, file);
                                    //GUARDAR
                                    driver.FindElement(By.XPath("//a[contains(@id,'btnGuardar')]")).Click();
                                    Thread.Sleep(5000);
                                    Screenshot("Vacaciones Registro", true, file);
                                    selenium.AcceptAlert();
                                    Thread.Sleep(2000);
                                    //VERIFICAR REGISTRO
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(500);
                                    selenium.Screenshot("Mis vacaciones", true, file);
                                    Thread.Sleep(2000);
                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //-------------------------------APROBAR REGISTRO-------------------------------------------------
                                    //Ingreso jefe1
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login Jefe1", true, file);

                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                    }
                                    else
                                    {
                                        selenium.Click("//button[@id='pLider']");
                                    }
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Jefe Lider", true, file);

                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    selenium.Click("//a[contains(.,'Vacaciones')]");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Vacaciones de Mis Colaboradores", true, file);

                                    if (selenium.ExistControl("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]"))
                                    {
                                        selenium.ScrollTo("0", "300");
                                        Thread.Sleep(5000);
                                        if (database == "SQL")
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(5000);
                                        }
                                        else
                                        {
                                            selenium.Click("//*[@id='tableVacaciones']/tbody[1]/tr/td[10]/a[1]/i[1]");
                                            Thread.Sleep(5000);
                                        }

                                        selenium.Screenshot("Solicitud Aprobar", true, file);
                                        selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_Aprueba')]");
                                        Thread.Sleep(1000);
                                        selenium.Screenshot("Aprobada", true, file);
                                    }
                                    else
                                    {
                                        Assert.Fail("NO EXISTEN SOLICITUDES PARA APROBAR DE MIS COLABORADORES");
                                    }

                                    Thread.Sleep(1000);
                                    selenium.Close();

                                    //Verificar estado solicitud
                                    //INICIO
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Click("//div[@id='MenuContex']/div[2]/div/ul/li[3]/a");
                                    selenium.Screenshot("Mis Solicitudes", true, file);
                                    //MIS VACACIONES
                                    Thread.Sleep(2500);
                                    selenium.Click("//a[contains(.,'Mis Vacaciones')]");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Mis Vacaciones", true, file);
                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dgrNmProva_ctl02_LinkButton1']/i");
                                    Thread.Sleep(2500);
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(2500);
                                    selenium.Screenshot("Estado Flujo", true, file);

                                    //////
                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaAbierta()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaAbierta")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaCerrada()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaCerrada")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Grupo Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaMixta()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaMixta")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Grupo Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaDirecta()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_CancelaciónRequisiciónDespuésSolicitudConvocatoriaDirecta")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Grupo Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "988");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleadosD_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Propuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for(int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_CancelaciónRequisiciónDespuésSolicitudPromoción()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_CancelaciónRequisiciónDespuésSolicitudPromoción")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisicion", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_CancelaciónRequisiciónDespuésSolicitudTransferencias()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_CancelaciónRequisiciónDespuésSolicitudTransferencias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Grupo Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro requisicion", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaAbiertaContratoFijo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaAbiertaContratoFijo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string Empresa = rows["Empresa"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Requisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", Empresa);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro requisicion", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", Empresa);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaAbiertaContratoIndefinido()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaAbiertaContratoIndefinido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Requisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaCerradaContratoFijo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaCerradaContratoFijo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Requisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaCerradaContratoIndefinido()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaCerradaContratoIndefinido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Requisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaMixtaContratoFijo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaMixtaContratoFijo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Requisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaMixtaContratoIndefinido()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaMixtaContratoIndefinido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Requisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //ADJUNTO
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }
        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaPromociónContratoFijo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaPromociónContratoFijo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaPromociónContratoIndefinido()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaPromociónContratoIndefinido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaTransferenciaContratoFijo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaTransferenciaContratoFijo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }


        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaTransferenciaContratoIndefinido()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaTransferenciaContratoIndefinido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();
                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "900");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaDirectaContratoFijo()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaDirectaContratoFijo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "988");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleadosD_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //DETALLE
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void SL_SolicitudRequisiciónMultiempresaConvocatoriaDirectaContratoIndefinido()
        {
            List<string> errorMessagesMetodo = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.SL_SolicitudRequisiciónMultiempresaConvocatoriaDirectaContratoIndefinido")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                //Datos Requisicion    
                                rows["GrupoRequi"].ToString().Length != 0 && rows["GrupoRequi"].ToString() != null &&
                                rows["ConvoRequi"].ToString().Length != 0 && rows["ConvoRequi"].ToString() != null &&
                                rows["FilSelRequi"].ToString().Length != 0 && rows["FilSelRequi"].ToString() != null &&
                                rows["CCostoRequi"].ToString().Length != 0 && rows["CCostoRequi"].ToString() != null &&
                                rows["PlazasRequi"].ToString().Length != 0 && rows["PlazasRequi"].ToString() != null &&
                                rows["CargoRequi"].ToString().Length != 0 && rows["CargoRequi"].ToString() != null &&
                                rows["MotivoRequi"].ToString().Length != 0 && rows["MotivoRequi"].ToString() != null &&
                                rows["ContratoRequi"].ToString().Length != 0 && rows["ContratoRequi"].ToString() != null &&
                                rows["TipoContratoRequi"].ToString().Length != 0 && rows["TipoContratoRequi"].ToString() != null &&
                                rows["SueldoRequi"].ToString().Length != 0 && rows["SueldoRequi"].ToString() != null &&
                                rows["ValPais"].ToString().Length != 0 && rows["ValPais"].ToString() != null &&
                                rows["ValDepartamento"].ToString().Length != 0 && rows["ValDepartamento"].ToString() != null &&
                                rows["ValCaracteresEsp"].ToString().Length != 0 && rows["ValCaracteresEsp"].ToString() != null &&
                                rows["Ciudad"].ToString().Length != 0 && rows["Ciudad"].ToString() != null &&
                                rows["ComentarioRequi"].ToString().Length != 0 && rows["ComentarioRequi"].ToString() != null &&
                                rows["PublicardadRequi"].ToString().Length != 0 && rows["PublicardadRequi"].ToString() != null &&
                                rows["MotivoCancelaRequi"].ToString().Length != 0 && rows["MotivoCancelaRequi"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Maquina"].ToString().Length != 0 && rows["Maquina"].ToString() != null
                                )
                            {
                                //LOGIN
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                //Datos Requisicion                                               
                                string GrupoRequi = rows["GrupoRequi"].ToString();
                                string ConvoRequi = rows["ConvoRequi"].ToString();
                                string FilSelRequi = rows["FilSelRequi"].ToString();
                                string CCostoRequi = rows["CCostoRequi"].ToString();
                                string PlazasRequi = rows["PlazasRequi"].ToString();
                                string CargoRequi = rows["CargoRequi"].ToString();
                                string MotivoRequi = rows["MotivoRequi"].ToString();
                                string ContratoRequi = rows["ContratoRequi"].ToString();
                                string TipoContratoRequi = rows["TipoContratoRequi"].ToString();
                                string SueldoRequi = rows["SueldoRequi"].ToString();
                                string ValPais = rows["ValPais"].ToString();
                                string ValDepartamento = rows["ValDepartamento"].ToString();
                                string ValCaracteresEsp = rows["ValCaracteresEsp"].ToString();
                                string Ciudad = rows["Ciudad"].ToString();
                                string ComentarioRequi = rows["ComentarioRequi"].ToString();
                                string PublicardadRequi = rows["PublicardadRequi"].ToString();
                                string MotivoCancelaRequi = rows["MotivoCancelaRequi"].ToString();
                                string url = rows["url"].ToString();
                                string Maquina = rows["Maquina"].ToString();
                                string Funcionario = rows["Funcionario"].ToString();
                                string Ruta = rows["Ruta"].ToString();
                                string TipoDocumento = rows["TipoDocumento"].ToString();
                                string PersonalPropuesto = rows["PersonalPropuesto"].ToString();
                                string ddlCodEmprs = rows["ddlCodEmprs"].ToString();

                                try
                                {
                                    string database = string.Empty;
                                    string User = string.Empty;
                                    string cod_empr = string.Empty;

                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                        User = "ODESAR";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                        User = "ONATALIA";
                                        cod_empr = "421";
                                    }
                                    else if (url.ToLower() == "http://ophtsph:8085/".ToLower())

                                    {
                                        database = "SQL";
                                        User = "SDesar";
                                        cod_empr = "9";
                                    }
                                    //eliminar datos previos
                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='R' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, User);

                                    string eliminarRequi = $"Delete from SL_REQPE where COD_EMPL ='{EmpleadoUser}' and ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarRequi, database, User);

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //Process:Login//////////////////////////////////
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    ////////////////////////////////////////////////////

                                    //Process: Rquisision////////////////////////////////
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Requisición de Pe')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición de personal", true, file);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //NUEVO
                                    selenium.Click("//a[contains(@id,'btnNuevo')]");
                                    Thread.Sleep(2000);
                                    //GRUPO REQUISICION
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodGrse')]", GrupoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Requisición", true, file);
                                    //CONVOCATORIA
                                    selenium.SelectElementByName("//select[contains(@id,'ddlForCobe')]", ConvoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Convocatoria", true, file);
                                    //FILTRO
                                    if (ConvoRequi == "Convocatoria")
                                    {
                                        selenium.SelectElementByName("//select[contains(@id,'ddlFilSele')]", FilSelRequi);
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("Filtro", true, file);
                                    }
                                    Thread.Sleep(2000);
                                    //COSTO
                                    selenium.Click("//input[contains(@id,'txtCodCcos')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtCodCcos')]", CCostoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Costo", true, file);
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    //PLAZAS
                                    selenium.Click("//input[contains(@id,'txtNroPlaz')]");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[contains(@id,'txtNroPlaz')]", PlazasRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Plazas", true, file);
                                    //CARGO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodCarp')]", CargoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Cargo", true, file);
                                    Thread.Sleep(2000);
                                    //MOTIVO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodMoti')]", MotivoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Motivo", true, file);
                                    Thread.Sleep(2000);
                                    //CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlTipCont')]", ContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Contrato", true, file);
                                    Thread.Sleep(2000);
                                    //TIPO CONTRATO
                                    selenium.SelectElementByName("//select[contains(@id, 'ddlContrDeta')]", TipoContratoRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Tipo contrato", true, file);
                                    //CIUDAD
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.ScrollTo("0", "800");
                                    //Validación 1 País
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValPais);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de País para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación 2 Departamento
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValDepartamento);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Caracteres especiales
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", ValCaracteresEsp);
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Ingreso de Departamento para validar", true, file);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //Validación Exitosa
                                    Thread.Sleep(1500);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1500);
                                    selenium.SendKeys("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]", Ciudad);
                                    Thread.Sleep(1500);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Validación de campo en blanco", true, file);
                                    //COMENTARIOS
                                    selenium.SendKeys("//textarea[contains(@id,'KtxtDetRequ')]", ComentarioRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Comentario", true, file);
                                    Thread.Sleep(2000);
                                    //PUBLICAR SUELDO
                                    selenium.SelectElementByName("//select[contains(@id,'ddlVisSuew')]", PublicardadRequi);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Publicar sueldo", true, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Datos Requisición Personal", true, file);
                                    //FUNCIONARIO A REEMPLAZAR
                                    selenium.ScrollTo("0", "988");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[contains(@id,'ctl00_ContenidoPagina_KCtrlDivPoli_txtDivPoli')]");
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{TAB}");
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    selenium.SendKeys("//input[@type='search']", Funcionario);
                                    selenium.Screenshot("Funcionario a Reemplazar", true, file);
                                    Thread.Sleep(6000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(6000);
                                    //BUSQUEDA PERSONAL PROPUESTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    Thread.Sleep(2000);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", PersonalPropuesto);
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(6000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleadosD_ctl02_Lnkbfiltro']");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("Personal Porpuesto", true, file);
                                    Thread.Sleep(2000);
                                    //ADJUNTO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroApellido']");
                                    Thread.Sleep(1000);
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(2000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", TipoDocumento);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);
                                    //GUARDAR
                                    selenium.Click("//a[contains(@id,'btnGuardar')]");
                                    Thread.Sleep(5000);
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    try
                                    {
                                        Thread.Sleep(6000);
                                        Screenshot("Alerta Registro Exitoso Requisición Personal", true, file);
                                        selenium.AcceptAlert();
                                    }
                                    catch
                                    {
                                    }
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Registro Requisición", true, file);
                                    //CANCELAR REQUISICION
                                    Thread.Sleep(1000);
                                    selenium.Click("//button[contains(@id,'pLider')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'SELECCIÓN DE PERSONAL')]");
                                    Thread.Sleep(200);
                                    selenium.Click("//a[contains(.,'Requisición de Personal')]");
                                    Thread.Sleep(5000);
                                    //EMPRESA
                                    Thread.Sleep(2000);
                                    selenium.SelectElementByName("//select[contains(@id,'ddlCodEmpr')]", ddlCodEmprs);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Empresa Seleccionada", true, file);
                                    //DETALLE
                                    selenium.Click("//*[@id='printable']");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.Click("//td[8]/a/i");
                                    Thread.Sleep(2500);
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtMotCanc']", MotivoCancelaRequi);
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Cancelar Req", true, file);
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnConCanc']");
                                    Thread.Sleep(2000);
                                    try
                                    {
                                        Screenshot("Alerta Cancelar Registro", true, file);
                                        selenium.AcceptAlert();
                                        Thread.Sleep(8000);
                                        selenium.Screenshot("Requisición cancelada", true, file);

                                    }
                                    catch
                                    {
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    ////////////////////////////////////////////////////
                                    if (errorMessagesMetodo.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorMessagesMetodo);
                                        Assert.Fail(string.Format("El caso de prueba presento los siguientes errores:{0}{1}",
                                                            Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }

                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);

                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());

                                    break;
                                }
                            }
                        }

                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }
        }

        [TestMethod]
        public void CO_VisualizaciónEncuestas()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.CO_VisualizaciónEncuestas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string EliminarRegistro = $"delete from CO_ENCUE where cod_empr = 9 and cod_vari = 9";
                                        db.UpdateDeleteInsert(EliminarRegistro, database, user);
                                    }
                                    else
                                    {
                                        string EliminarRegistro = $"delete from CO_ENCUE where cod_empr = 421 and cod_vari = 8";
                                        db.UpdateDeleteInsert(EliminarRegistro, database, user);

                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ENCUESTAS
                                    selenium.Click("//a[contains(.,'ENCUESTAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Encuestas')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A ENCUESTAS", true, file);

                                    //SELECCIONAR DETALLE
                                    selenium.Click("//td[4]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("DETALLE ENCUESTA", true, file);

                                    //SELECCIONAR DETALLE 2
                                    selenium.Click("//td[4]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("ENCUESTA", true, file);

                                    //ENCUESTA
                                    selenium.ScrollTo("0", "400");
                                    selenium.Screenshot("VISUALIZACION ENCUESTA", true, file);
                                    Thread.Sleep(2000);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void CO_DiligenciarEncuestasInserciónResultados()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.CO_DiligenciarEncuestasInserciónResultados")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["Respuesta1"].ToString().Length != 0 && rows["Respuesta1"].ToString() != null &&
                                rows["Respuesta2"].ToString().Length != 0 && rows["Respuesta2"].ToString() != null &&
                                rows["Respuesta3"].ToString().Length != 0 && rows["Respuesta3"].ToString() != null &&
                                rows["Respuesta4"].ToString().Length != 0 && rows["Respuesta4"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();
                                string Respuesta3 = rows["Respuesta3"].ToString();
                                string Respuesta4 = rows["Respuesta4"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string EliminarRegistro = $"delete from CO_ENCUE where cod_empr = 9 and cod_vari = 9";
                                        db.UpdateDeleteInsert(EliminarRegistro, database, user);
                                    }
                                    else
                                    {
                                        string EliminarRegistro = $"delete from CO_ENCUE where cod_empr = 421 and cod_vari = 8";
                                        db.UpdateDeleteInsert(EliminarRegistro, database, user);

                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ENCUESTAS
                                    selenium.Click("//a[contains(.,'ENCUESTAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Encuestas')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A ENCUESTAS", true, file);

                                    //SELECCIONAR DETALLE
                                    selenium.Click("//td[4]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("DETALLE ENCUESTA", true, file);

                                    //SELECCIONAR DETALLE 2
                                    selenium.Click("//td[4]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("ENCUESTA", true, file);

                                    //ENCUESTA
                                    selenium.ScrollTo("0", "400");
                                    selenium.Screenshot("VISUALIZACION ENCUESTA", true, file);
                                    Thread.Sleep(2000);

                                    //LLENAR ENCUESTA
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgPreguntas_ctl02_ddlRespuestas']", Respuesta1);
                                    Thread.Sleep(1500);

                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgPreguntas_ctl03_ddlRespuestas']", Respuesta2);
                                    Thread.Sleep(1500);

                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgPreguntas_ctl04_ddlRespuestas']", Respuesta3);
                                    Thread.Sleep(1500);

                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgPreguntas_ctl05_ddlRespuestas']", Respuesta4);
                                    Thread.Sleep(1500);

                                    selenium.Screenshot("ENCUESTA LISTA", true, file);
                                    Thread.Sleep(1500);

                                    //GUARDAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(1500);
                                    selenium.Screenshot("Encuesta diligenciada", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void CO_VisualizaciónResultados()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.CO_VisualizaciónResultados")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA


                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A RESULTADOS
                                    selenium.Click("//a[contains(.,'ENCUESTAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Resultado de Clima Organizacional')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A RESULTADOS", true, file);

                                    //SELECCIONAR LISTADO
                                    selenium.Click("//td[4]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("LISTADO", true, file);

                                    //RESULTADO
                                    selenium.Screenshot("RESULTADOS", true, file);
                                    Thread.Sleep(2000);


                                    //REPORTE TOTAL
                                    selenium.Click("//a[contains(.,'ENCUESTAS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Resultado de Clima Organizacional')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//td[5]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("REPORTE TOTAL", true, file);
                                    selenium.Click("//a[contains(.,'Total')]");
                                    Thread.Sleep(4000);

                                    //VENTANA REPORTE TOTAL
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("REPORTE TOTAL", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin);

                                    //REPORTE CENTRO COSTO
                                    Thread.Sleep(2000);
                                    selenium.Click("//td[5]/a/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("REPORTE CENTRO COSTO", true, file);
                                    selenium.Click("//a[contains(.,'Centro de Costo')]");
                                    Thread.Sleep(4000);

                                    //VENTANA REPORTE TOTAL
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("REPORTE CENTRO COSTO", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin1);
                                    Thread.Sleep(4000);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void FD_FormaciónDesarrolloConfirmaciónCursos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloConfirmaciónCursos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba
                                rows["Confirmacion"].ToString().Length != 0 && rows["Confirmacion"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Confirmacion = rows["Confirmacion"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string BorrarREgistro = $"delete from fd_dplin where rmt_para = 73 and ide_ntif = 51880161 and cod_empr = 421";
                                        db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }
                                    else
                                    {

                                        string BorrarREgistro = $"delete from fd_dplin where rmt_para = 178 and ide_ntif = 4 and cod_empr = 9";
                                        db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Confirmación a Cursos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A CONFIRMACION CURSOS", true, file);

                                    //CONFIRMAR ASISTENCIA
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_dtgFdCoCur_ctl02_ddlConfCurso']", Confirmacion);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Confirmar asistencia", true, file);
                                    //GUARDAR
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_Adicionar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Confirmacion exitosa", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void FD_FormaciónDesarrolloCertificadoCursos()
        {
           
            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloCertificadoCursos" +
                    "")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba
                                rows["Certificado"].ToString().Length != 0 && rows["Certificado"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Certificado = rows["Certificado"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestoranewverauto/".ToLower())
                                    {
                                        database = "ORA";
                                    }

                                    if (url.ToLower() == "http://ophtsph:8088/".ToLower())
                                    {

                                        database = "ORA";
                                    }
                                    if (url.ToLower() == "http://ophtsph:8085/".ToLower())
                                    {
                                        database = "SQL";
                                    }


                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        //string BorrarREgistro = $"delete from fd_dplin where rmt_para = 73 and ide_ntif = 51880161 and cod_empr = 421";
                                        //db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }
                                    else
                                    {

                                        string BorrarREgistro = $"update FD_PLCUR SET EST_CURS='E' WHERE RMT_PARA='178'";
                                        db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               
                                    //BORRADO PDF
                                    File.Delete("C:/Users/kactusscm/Downloads/CertificadoCursos.pdf");
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Certificados Cursos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Certificado Cursos", true, file);

                                    //SELECCIONAR DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdPlcur_ctl03_lbSelDetalle']/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Certificado a generar", true, file);
                                    //SELECCIONAR TIPO CERTIFICADO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCerCurs']", Certificado);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Certificado a generar", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(5000);
                                    //VENTANA EMERGENTE
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    Thread.Sleep(3000);
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(5000);
                                    Screenshot("Certificado Generado", true, file);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("Certificado", true, file);
                                    Thread.Sleep(5000);
                                    //PDF IMPRIMIR
                                    selenium.Click("//a[@id='imprimir']");
                                    Thread.Sleep(20000);
                                    Screenshot("IMPRIMIR PDF", true, file);
                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 6; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("CertificadoCursos");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    //ABRIR PDF
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/CertificadoCursos.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        //string BorrarREgistro = $"delete from fd_dplin where rmt_para = 73 and ide_ntif = 51880161 and cod_empr = 421";
                                        //db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }
                                    else
                                    {

                                        string actualizar = $"update FD_PLCUR SET EST_CURS='P' WHERE RMT_PARA='178'";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                    }

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }



        [TestMethod]
        public void FD_FormaciónDesarrolloInscripción()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloInscripción")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba



                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();


                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string ActualizarCheck = $"Update FD_PARAM set INS_JEFE ='N' Where COS_CURS= 5";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                        string BorrarREgistro = $"delete from fd_dplin where rmt_para = 73 and ide_ntif = 51880161 and cod_empr = 421";
                                        db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarCheck = $"Update FD_PARAM set INS_JEFE ='N' Where COS_CURS= 5";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                        string BorrarREgistro = $"delete from fd_dplin where rmt_para = 178 and ide_ntif = 123 and cod_empr = 9";
                                        db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }
                                 
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS/INSCRIPCION
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Inscripción a Cursos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A INSCRIPCION CURSOS", true, file);

                                    //DETALLE
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgFdPlcur_ctl03_LinkButton1']/i[1]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle", true, file);

                                    //INSCRIBIRSE
                                    selenium.Scroll("//*[@id='ctl00_ContenidoPagina_btnInscribirse']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_btnInscribirse']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Inscrito", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void FD_FormaciónDesarrolloInscripciónWebJefe()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloInscripciónWebJefe")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba



                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();


                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string ActualizarCheck = $"Update FD_PARAM set INS_JEFE ='S' Where COS_CURS= 5";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                        string BorrarREgistro = $"delete from fd_dplin where rmt_para = 73 and ide_ntif = 51880161 and cod_empr = 421";
                                        db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarCheck = $"Update FD_PARAM set INS_JEFE ='S' Where COS_CURS= 5 and cod_prog= 8";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                        string BorrarREgistro = $"delete from fd_dplin where rmt_para = 178 and ide_ntif = 123 and cod_empr = 9";
                                        db.UpdateDeleteInsert(BorrarREgistro, database, user);
                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL LIDER", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("LIDER", true, file);
                                    }
                                    //INGRESO A FORMACION Y DESARROLLO/INSCRIPCION
                                    selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Inscripcion a Cursos')]");
                                    selenium.Click("//a[contains(.,'Inscripcion a Cursos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A INSCRIPCION CURSOS", true, file);

                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdPlcur_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    //INSCRIBIRSE PARTICIPANTES
                                    selenium.ScrollTo("0", "400");
                                    selenium.Screenshot("INSCRIBIR POSTULADOS ", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_LkbInscribir']");
                                    Thread.Sleep(2000);
                                    //INSCRIBIR
                                    selenium.ScrollTo("0", "800");
                                    selenium.Screenshot("INSCRIPCION POSTULADO", true, file);
                                    Thread.Sleep(3000);

                                    if (database == "ORA")
                                    {
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgFdDplin_ctl03_btnInscribirse']/i[1]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("INSCRIPCION EXITOSA", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//*[@id='ctl00_ContenidoPagina_dtgFdDplin_ctl03_btnInscribirse']/i[1]");
                                        Thread.Sleep(5000);
                                        selenium.Screenshot("INSCRIPCION EXITOSA", true, file);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void FD_FormaciónDesarrolloSolicitudesFormación()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloSolicitudesFormación")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&

                                //Datos Prueba
                                rows["Registro"].ToString().Length != 0 && rows["Registro"].ToString() != null &&
                                rows["Requerimiento"].ToString().Length != 0 && rows["Requerimiento"].ToString() != null &&
                                rows["Especificacion"].ToString().Length != 0 && rows["Especificacion"].ToString() != null &&
                                rows["Curso"].ToString().Length != 0 && rows["Curso"].ToString() != null



                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Registro = rows["Registro"].ToString();
                                string Requerimiento = rows["Requerimiento"].ToString();
                                string Especificacion = rows["Especificacion"].ToString();
                                string Curso = rows["Curso"].ToString();


                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/SelfServiceTestNewVerAuto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA


                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(eliminarNecesidad, database, user);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);


                                    //INGRESO A MIS CURSOS/NECESIDADES FORMACION
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis necesidades de Formación')]");
                                    selenium.Click("//a[contains(.,'Mis necesidades de Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A NECESIDADES DE FORMACION", true, file);

                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(3000);

                                    //REGISTRO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRegi']", Registro);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro", true, file);
                                    //REQUERIMIENTO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRequ']", Requerimiento);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Requerimiento", true, file);
                                    //ESPECIFICACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomEspe']", Especificacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Especificacion", true, file);
                                    //CURSOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomCurs']", Curso);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Curso", true, file);
                                    //APLICAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(3000);

                                    //ACEPTAR ALERTA
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(3000);

                                    //VERIFICAR REGISTRO
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis necesidades de Formación')]");
                                    selenium.Click("//a[contains(.,'Mis necesidades de Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("REGISTRO EXITOSO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void FD_FormaciónDesarrolloSolicitudesFormaciónJefe()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloSolicitudesFormaciónJefe")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&

                                //Datos Prueba
                                rows["Registro"].ToString().Length != 0 && rows["Registro"].ToString() != null &&
                                rows["Requerimiento"].ToString().Length != 0 && rows["Requerimiento"].ToString() != null &&
                                rows["Especificacion"].ToString().Length != 0 && rows["Especificacion"].ToString() != null &&
                                rows["Curso"].ToString().Length != 0 && rows["Curso"].ToString() != null &&
                                rows["Perspectiva"].ToString().Length != 0 && rows["Perspectiva"].ToString() != null &&
                                rows["Objetivo"].ToString().Length != 0 && rows["Objetivo"].ToString() != null &&
                                rows["Intensidad"].ToString().Length != 0 && rows["Intensidad"].ToString() != null &&
                                rows["FechaInicial"].ToString().Length != 0 && rows["FechaInicial"].ToString() != null &&
                                rows["FechaFinal"].ToString().Length != 0 && rows["FechaFinal"].ToString() != null &&
                                rows["Valor"].ToString().Length != 0 && rows["Valor"].ToString() != null &&
                                rows["Ruta"].ToString().Length != 0 && rows["Ruta"].ToString() != null &&
                                rows["Empleado"].ToString().Length != 0 && rows["Empleado"].ToString() != null &&
                                rows["Entidad"].ToString().Length != 0 && rows["Entidad"].ToString() != null




                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Registro = rows["Registro"].ToString();
                                string Requerimiento = rows["Requerimiento"].ToString();
                                string Especificacion = rows["Especificacion"].ToString();
                                string Curso = rows["Curso"].ToString();
                                string Perspectiva = rows["Perspectiva"].ToString();
                                string Objetivo = rows["Objetivo"].ToString();
                                string Intensidad = rows["Intensidad"].ToString();
                                string FechaInicial = rows["FechaInicial"].ToString();
                                string FechaFinal = rows["FechaFinal"].ToString();
                                string Valor = rows["Valor"].ToString();
                                string Entidad = rows["Entidad"].ToString();
                                string Empleado = rows["Empleado"].ToString();
                                string Ruta = rows["Ruta"].ToString();


                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/SelfServiceTestNewVerAuto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA

                                    string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='123'";
                                    db.UpdateDeleteInsert(eliminarSolicitud, database, user);

                                    string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='123'";
                                    db.UpdateDeleteInsert(eliminarNecesidad, database, user);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL LIDER", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("LIDER", true, file);
                                    }
                                    //INGRESO A FORMACION Y DESARROLLO/NECESIDADES
                                    selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Solicitudes de Formacion')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A SOLICITUDES DE FORMACION", true, file);

                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(3000);

                                    //REGISTRO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRegi']", Registro);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("REGISTRO", true, file);

                                    //REQUERIMIENTO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRequ']", Requerimiento);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Requerimiento", true, file);

                                    //ESPECIFICACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomEspe']", Especificacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Especificacion", true, file);

                                    //CURSOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomCurs']", Curso);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Curso", true, file);

                                    selenium.ScrollTo("0", "450");

                                    //PERSPECTIVA
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodPers']", Perspectiva);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Perspectiva", true, file);

                                    //OBJETIVOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlCodObes']", Objetivo);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Objetivo", true, file);

                                    //INTENSIDAD HORARIA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtIntHora']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtIntHora']", Intensidad);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Intensidad", true, file);

                                    //FECHA INICIAL
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecInic_txtFecha']", FechaInicial);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Fecha Inicial", true, file);

                                    //FECHA FINAL
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecFina_txtFecha']", FechaFinal);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Fecha Final", true, file);

                                    //VALOR CURSO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtValCurs']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtValCurs']", Valor);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Valor", true, file);

                                    //ENTIDAD CAPACITORIA
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtEntCapa']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtEntCapa']", Entidad);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Entidad", true, file);

                                    //BUSCAR EMPLEADO
                                    selenium.ScrollTo("0", "780");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtFiltroNombre']", Empleado);
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnBuscar']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("EMPLEADO", true, file);

                                    //SELECCIONAR EMPLEADO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl03_Lnkbfiltro']");
                                    Thread.Sleep(2000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_dtgFiltroEmpleados_ctl03_Lnkbfiltro']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("EMPLEADO SELECCIONADO", true, file);


                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_ulfArc_Adju']");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys(Ruta);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(1000);
                                    selenium.SelectElementByName("//select[contains(@id,'KCtrTipoDocumento_ddlTIP_DOCU')]", "RUT");
                                    Thread.Sleep(1000);
                                    selenium.Screenshot("Archivo adjunto", true, file);

                                    //APLICAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(3000);

                                    //ACEPTAR ALERTA
                                    selenium.AcceptAlert();
                                    Thread.Sleep(3000);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("REGISTRO EXITOSO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_VisualizaciónEvaluaciónJefeRetroalimentaciónEvaluado()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.ED_VisualizaciónEvaluaciónJefeRetroalimentaciónEvaluado")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Evaluacion"].ToString().Length != 0 && rows["Evaluacion"].ToString() != null

                                //Datos Prueba

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/SelfServiceTestNewVerAuto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string ActualizarRegistro = $"Update nm_contr set ind_acti ='A' Where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(ActualizarRegistro, database, user);
                                        string ActualizarRegistro1 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 123 and nro_cont = 2 and cod_empr= 9";
                                        db.UpdateDeleteInsert(ActualizarRegistro1, database, user);
                                        string ActualizarRegistro2 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 4 and nro_cont = 4 and cod_empr= 9";
                                        db.UpdateDeleteInsert(ActualizarRegistro2, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("ROL LIDER", true, file);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'VALORAR COMPETENCIA')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro Calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);

                                    //SELECCIONAR EVALUACION

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void ED_VisualizaciónInserciónEvaluadoFeedback()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.ED_VisualizaciónInserciónEvaluadoFeedback")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["Evaluacion"].ToString().Length != 0 && rows["Evaluacion"].ToString() != null

                                //Datos Prueba

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Evaluacion = rows["Evaluacion"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/SelfServiceTestNewVerAuto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {
                                        string ActualizarRegistro = $"Update nm_contr set ind_acti ='A' Where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(ActualizarRegistro, database, user);
                                        string ActualizarRegistro1 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 123 and nro_cont = 2 and cod_empr= 9";
                                        db.UpdateDeleteInsert(ActualizarRegistro1, database, user);
                                        string ActualizarRegistro2 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 4 and nro_cont = 4 and cod_empr= 9";
                                        db.UpdateDeleteInsert(ActualizarRegistro2, database, user);


                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    selenium.Click("//span[contains(.,'Rol Lider')]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("ROL LIDER", true, file);

                                    //INGRESO A VALORAR COMPETENCIA/LIBRO 360
                                    selenium.Click("//a[contains(.,'VALORAR COMPETENCIA')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Libro Calificación 360')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A LIBRO 360", true, file);

                                    //SELECCIONAR EVALUACION
                                    selenium.ScrollTo("0", "277");
                                    Thread.Sleep(3000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlDesTeva']", Evaluacion);

                                    //SELECCIONAR EVALUACION

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_AsignaciónInsigniasEquipoaCargoD()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_AsignaciónInsigniasEquipoaCargoD")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 79753160 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_frep = 405, ind_Acti = 'A' where cod_empl IN (507195) and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                        string actualizar4 = $"update nm_contr set cod_ccos = 1 where cod_empl IN (507195 ) and cod_empr = 9 and ind_Acti = 'A'";
                                        db.UpdateDeleteInsert(actualizar4, database, user);

                                        string actualizar5 = $"update nm_contr set cod_ccos = 2 where cod_empl IN (79753160 ) and cod_empr = 9 and ind_Acti = 'A'";
                                        db.UpdateDeleteInsert(actualizar5, database, user);

                                        string actualizar6 = $"update nm_contr set cod_frep = 2020 where cod_empl IN (79753160) and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar6, database, user);

                                        string actualizar7 = $"update bi_cargo set cod_nive = 1 where cod_carg IN ('1','5') and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar7, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 94541552 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 22548965 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                        string actualizar4 = $"update nm_contr set cod_frep = 94541552 where cod_empl in (19301797)";
                                        db.UpdateDeleteInsert(actualizar4, database, user);

                                        string actualizar5 = $"update nm_contr set cod_frep = 84082016 where cod_empl in (22548965)";
                                        db.UpdateDeleteInsert(actualizar5, database, user);

                                        string actualizar6 = $"update nm_contr set cod_ccos = 1 where cod_empl IN (19301797,22548965) and cod_empr = 421 and ind_Acti = 'A'";
                                        db.UpdateDeleteInsert(actualizar6, database, user);

                                        string actualizar7 = $"update nm_contr set cod_ccos = 1000 where cod_empl IN (22548965) and cod_empr = 421 and ind_Acti = 'A'";
                                        db.UpdateDeleteInsert(actualizar7, database, user);

                                        string actualizar8 = $"update bi_cargo set cod_nive = 3 where cod_carg IN ('204411','ABC123') and cod_empr = 421";
                                        db.UpdateDeleteInsert(actualizar8, database, user);

                                    }


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("AUTODIDACTA", true, file);

                                    //CONFIRMAR AUTODIDACTA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(2000);

                                    //CONFIRMAR
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_CentroVacacionesTérminosCondiciones()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_CentroVacacionesTérminosCondiciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["FechaDesde"].ToString().Length != 0 && rows["FechaDesde"].ToString() != null &&
                                rows["FechaHasta"].ToString().Length != 0 && rows["FechaHasta"].ToString() != null &&
                                rows["FormaPago"].ToString().Length != 0 && rows["FormaPago"].ToString() != null &&
                                rows["Total"].ToString().Length != 0 && rows["Total"].ToString() != null &&
                                rows["Observaciones"].ToString().Length != 0 && rows["Observaciones"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string FechaDesde = rows["FechaDesde"].ToString();
                                string FechaHasta = rows["FechaHasta"].ToString();
                                string FormaPago = rows["FormaPago"].ToString();
                                string Total = rows["Total"].ToString();
                                string Observaciones = rows["Observaciones"].ToString();


                                try
                                {


                                    //PARAMETRIZACION PREVIA
                                    //UPDATE NM_CONTR SET IND_ACTI = 'A' WHERE COD_EMPR = 9 AND COD_EMPL = 507195
                                    //UPDATE NM_CONTR SET IND_ACTI = 'A' WHERE COD_EMPR = 9 AND COD_EMPL = 6773490
                                    //UPDATE NM_CONTR SET IND_ACTI = 'A' WHERE COD_EMPR = 9 AND COD_EMPL = 11320526
                                    //UPDATE NM_CONTR SET COD_FREP = '405' WHERE COD_EMPR = 9 AND COD_EMPL = 507195

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A VACACIONES
                                    selenium.Scroll("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                    selenium.Click("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CENTROS VACACIONALES", true, file);

                                    //SELECCION CENTRO
                                    selenium.Click("//div[@id='multi-item-example']/div/div/a[2]/div/div/img");
                                    Thread.Sleep(3000);

                                    //FECHA INICIO
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_txtNomApel']");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechIni_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechIni_txtFecha']", FechaDesde);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("FECHA DESDE", true, file);

                                    //FECHA FINAL
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechFin_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechFin_txtFecha']", FechaHasta);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("FECHA HASTA", true, file);

                                    //SELECCIONAR FAMILIARES
                                    selenium.Click("//div[@id='ctl00_ContenidoPagina_ddlFamil_sl']/div");
                                    Thread.Sleep(3000);
                                    selenium.Click("//div[@id='ctl00_ContenidoPagina_ddlFamil_sl']/div");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_ddlFamil_4']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@value='Aceptar']");
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("FAMILIAR", true, file);

                                    //PARTE HUESPED SI
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblUstHues_0']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("CHECK", true, file);

                                    //FORMA DE PAGO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_rdbforpago']", FormaPago);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("FORMA PAGO", true, file);

                                    //VALOR
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_btnValCan']/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("TOTAL", true, file);

                                    //OBSERVACIONES

                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValObser_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValObser_txtTexto']", Observaciones);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("OBSERVACIONES", true, file);

                                    //ACEPTAR
                                    selenium.Click("//*[@id='ctl00_ContenidoPagina_BtnGuardar']");
                                    Thread.Sleep(3000);

                                    //ACEPTAR CONDICIONES
                                    selenium.Screenshot("TERMINOS Y CONDICIONES", true, file);
                                    selenium.Click("//*[@id='ctl00_ContentPopapModel_btnSi']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("REGISTRO INGRESADO", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_FormatoHojaVidaEmpresaPrivada()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_FormatoHojaVidaEmpresaPrivada")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/HojaVidaPrivada.pdf");
                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'R' WHERE COD_EMPR = 9";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'R' WHERE COD_EMPR = 421";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A MIS REPORTES", true, file);
                                    //SELECCIONAR HOJA DE VIDA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='ctl00_ContenidoPagina_pHojVida']/div/div/span/input");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CHECK HOJA DE VIDA", true, file);
                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(2000);
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("REPORTE HOJA DE VIDA", true, file);
                                    Debugger.Launch();
                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_Imprimir']");
                                    Thread.Sleep(1000);
                                    Screenshot("IMPRIMIR", true, file);
                                    Thread.Sleep(1000);
                                    Keyboard.SendKeys("{ESC}");
                                    Thread.Sleep(5000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_Imprimir']");
                                    Thread.Sleep(1000);

                                    //GUARDAR PDF
                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }

                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{DOWN}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);

                                    for (int i = 0; i < 5; i++)
                                    {
                                        Keyboard.SendKeys("{TAB}");
                                        Thread.Sleep(1000);
                                    }
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("HojaVidaPrivada");
                                    Thread.Sleep(5000);
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(5000);
                                    Thread.Sleep(10000);
                                    Screenshot("DESCARGAR PDF", true, file);
                                    //ABRIR PDF DESCARGADO
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/HojaVidaPrivada.pdf");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(20000);
                                    Screenshot("PDF ABIERTO", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void GN_FormatoÚnicoHojaVidaPersonaNaturalEmpresaPública()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.GN_FormatoÚnicoHojaVidaPersonaNaturalEmpresaPública")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION
                                    if (database == "SQL")
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'P' WHERE COD_EMPR = 9";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    else
                                    {
                                        string ActualizarCheck = $"Update GN_EMPRE set TIP_ENTI = 'P' WHERE COD_EMPR = 421";
                                        db.UpdateDeleteInsert(ActualizarCheck, database, user);
                                    }
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS REPORTES
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Mis Reportes')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A MIS REPORTES", true, file);

                                    //SELECCIONAR HOJA DE VIDA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_chkHojVida']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("CHECK FORMATO UNICO HOJA VIDA", true, file);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(2000);

                                    //VENTANA REPORTE 
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(4000);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("REPORTE HOJA DE VIDA", true, file);
                                    Thread.Sleep(4000);

                                    if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                    {
                                        selenium.Click("//a[@id='ctl00_btnCerrar']");
                                        Thread.Sleep(3000);

                                    }


                                    //IMPRIMIR
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_imprimirPDF']");
                                    Thread.Sleep(10000);
                                    Screenshot("IMPRIMIR", true, file);
                                    Thread.Sleep(3000);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin);

                                    //GENERAR
                                    selenium.Click("//a[@id='ctl00_btnGenerar']");
                                    Thread.Sleep(2000);

                                    //VENTANA REPORTE 
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(4000);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("REPORTE HOJA DE VIDA", true, file);
                                    Thread.Sleep(4000);
                                    if (selenium.ExistControl("//a[@id='ctl00_btnCerrar']"))
                                    {
                                        selenium.Click("//a[@id='ctl00_btnCerrar']");
                                        Thread.Sleep(3000);

                                    }

                                    //DESCARGAR PDF
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_imprimir']");
                                    Thread.Sleep(10000);
                                    Screenshot("IMPRIMIR", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_AsignaciónInsigniasEquipoaCargoC()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_AsignaciónInsigniasEquipoaCargoC")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {

                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 79753160 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update nm_contr set cod_frep = 405, ind_Acti = 'A' where cod_empl IN (507195) and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_ccos = 1 where cod_empl IN (507195,79753160 ) and cod_empr = 9 and ind_Acti = 'A'";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                        string actualizar4 = $"update nm_contr set cod_ccos = 1 where cod_empl IN (507195,79753160 ) and cod_empr = 9 and ind_Acti = 'A'";
                                        db.UpdateDeleteInsert(actualizar4, database, user);

                                        string actualizar5 = $"update bi_cargo set cod_nive = 1 where cod_carg IN ('1','5') and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar5, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 94541552 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 22548965 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_frep = 94541552 where cod_empl in (19301797)";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                        string actualizar4 = $"update nm_contr set cod_frep = 84082016 where cod_empl in (22548965)";
                                        db.UpdateDeleteInsert(actualizar4, database, user);

                                        string actualizar5 = $"update nm_contr set cod_ccos = 1 where cod_empl IN (19301797,22548965) and cod_empr = 421 and ind_Acti = 'A'";
                                        db.UpdateDeleteInsert(actualizar5, database, user);

                                        string actualizar6 = $"update bi_cargo set cod_nive = 3 where cod_carg IN ('204411','ABC123') and cod_empr = 421";
                                        db.UpdateDeleteInsert(actualizar6, database, user);
                                    }


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("AUTODIDACTA", true, file);

                                    //CONFIRMAR AUTODIDACTA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(2000);

                                    //CONFIRMAR
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_AsignaciónInsigniasEquipoaCargoB()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_AsignaciónInsigniasEquipoaCargoB")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                   
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {

                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 79753160 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update nm_contr set cod_frep = 405, ind_Acti = 'A' where cod_empl IN (507195,79753160 ) and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar2, database, user);



                                    }
                                    else
                                    {
                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 94541552 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 22548965 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_frep = 94541552 where cod_empl in (19301797,22548965)";
                                        db.UpdateDeleteInsert(actualizar3, database, user);


                                    }


                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("AUTODIDACTA", true, file);

                                    //CONFIRMAR AUTODIDACTA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(2000);

                                    //CONFIRMAR
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_AsignaciónInsigniasEquipoaCargoA()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_AsignaciónInsigniasEquipoaCargoA")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                  
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 7895234567890 AND COD_EMPR =9";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_frep = 507195, ind_Acti = 'A' where cod_empl = 7895234567890 and nro_cont = 1 and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 39801386 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update nm_contr set cod_frep = 19301797 where cod_empl = 39801386";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_frep = 94541552 where cod_empl = 19301797";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    Keyboard.SendKeys("{DOWN}");
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("AUTODIDACTA", true, file);

                                    //CONFIRMAR AUTODIDACTA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(4000);

                                    //CONFIRMAR
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_AsignaciónInsigniasLíderInmediatoE()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_AsignaciónInsigniasLíderInmediatoE")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    
                                    //PARAMETRIZACION PREVIA
                                    if (database == "SQL")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 13 AND COD_EMPR =9";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_frep = 507195, ind_Acti = 'A' where cod_empl = 13 and nro_cont = 1 and cod_empr = 9";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 39801386AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar2, database, user);

                                        string actualizar3 = $"update nm_contr set cod_frep = 19301797 where cod_empl = 39801386";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                        string actualizar4 = $"update nm_contr set cod_frep = 94541552 where cod_empl = 19301797";
                                        db.UpdateDeleteInsert(actualizar4, database, user);
                                    }

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("AUTODIDACTA", true, file);

                                    //CONFIRMAR AUTODIDACTA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(4000);

                                    //CONFIRMAR
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidacióninsigniasMiEquipoPorInsignia()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidacióninsigniasMiEquipoPorInsignia")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&

                                //Datos Prueba
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null



                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/SelfServiceTestNewVerAuto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update nm_contr set cod_frep = 19301797 where cod_empl = 19301797";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }


                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);


                                    //INGRESO A ROL LIDER
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL LIDER", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("LIDER", true, file);
                                    }

                                    //INGRESO A MIS COLABORADORES/INSIGNIAS COLABORADORES
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Insignias de mis colaboradores')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Insignias de mis colaboradores')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A INSIGNIAS DE MIS COLABORADORES", true, file);

                                    //BUSCAR
                                    selenium.Click("//div[@id='tablaInsiEquipo_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//div[@id='tablaInsiEquipo_filter']/label/input", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("BUSCAR PERSONA", true, file);

                                    //VER INISGNIAS

                                    selenium.Click("//button[contains(.,'Ver insignias adquiridas')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("ISNIGNIA", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidacióninsigniasMiEquipo()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidacióninsigniasMiEquipo")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&

                                //Datos Prueba
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null



                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/SelfServiceTestNewVerAuto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update nm_contr set cod_frep = 19301797 where cod_empl = 19301797";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL LIDER", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("LIDER", true, file);
                                    }

                                    //INGRESO A MIS COLABORADORES/INSIGNIAS COLABORADORES
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Insignias de mis colaboradores')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Insignias de mis colaboradores')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A INSIGNIAS DE MIS COLABORADORES", true, file);

                                    //BUSCAR
                                    selenium.Click("//div[@id='tablaInsiEquipo_filter']/label/input");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//div[@id='tablaInsiEquipo_filter']/label/input", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("BUSCAR PERSONA", true, file);

                                    //VER INISGNIAS
                                    selenium.Screenshot("ISNIGNIA", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidaciónMiEquipoEnInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidaciónMiEquipoEnInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null

                                //Datos Prueba




                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/SelfServiceTestNewVerAuto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update nm_contr set cod_frep = 19301797 where cod_empl = 19301797";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL LIDER", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("LIDER", true, file);
                                    }
                                    //INGRESO A MIS COLABORADORES/INSIGNIAS COLABORADORES
                                    selenium.Click("//a[contains(.,'MIS COLABORADORES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Insignias de mis colaboradores')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Insignias de mis colaboradores')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A INSIGNIAS DE MIS COLABORADORES", true, file);

                                    //REGISTROS
                                    selenium.ScrollTo("0", "800");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("CANTIDAD REGISTROS", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_EnvíoCorreoAsignacionInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_EnvíoCorreoAsignacionInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }

                                    //PARAMETRIZACION PREVIA

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div[2]/div/label/span");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("AUTODIDACTA", true, file);

                                    //CONFIRMAR AUTODIDACTA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(4000);

                                    //CONFIRMAR
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_CaracteresEspecialesObservacionesAsignacionInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_CaracteresEspecialesObservacionesAsignacionInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE CARACTERES ESPECIALES", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("AUTODIDACTA", true, file);

                                    //CONFIRMAR AUTODIDACTA
                                    selenium.ScrollTo("0", "600");
                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(4000);

                                    //CONFIRMAR
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("CARACTERES ESPECIALES", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_VisualizaciónComportamientosInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_VisualizaciónComportamientosInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("COMPORTAMIENTOS", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_CentroVacacionesRolLiderVideoImágenesAdjuntos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_CentroVacacionesRolLiderVideoImágenesAdjuntos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                               //Datos Prueba    
                               rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();


                                try
                                {

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/Archivo636694Cal_KRlWeb_Devolución.PDF");
                                    File.Delete("C:/Users/kactusscm/Downloads/ArchivoPLANTILLA CONEXIÓN VPN SUPERSOCIEDADES AJUSTADO (1).DOCX");
                                    File.Delete("C:/Users/kactusscm/Downloads/Archivocapacidad-autodidacta-emprendedor.JPG");
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL LIDER", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("LIDER", true, file);
                                    }
                                    //INGRESO A CENTRO VACACIONAL
                                    selenium.Scroll("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Solicitudes Centros Vacacionales')]");
                                    selenium.Click("//a[contains(.,'Solicitudes Centros Vacacionales')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("SOLICITUDES CENTROS VACACIONALES", true, file);

                                    //SELECCION DETALLE
                                    selenium.Click("//table[@id='tableCentroVaca']/tbody/tr/td[9]/a/i");
                                    Thread.Sleep(3000);

                                    //SELECCIONAR VIDEO
                                    selenium.Click("//a[contains(@href, 'https://youtu.be/LcHhMXn5m-ohttps://youtu.be/LcHhMXn5m-o')]");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("VIDEO", true, file);
                                    Thread.Sleep(6000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().Refresh();
                                    Thread.Sleep(2000);


                                    //IMAGENES
                                    selenium.ScrollTo("0", "500");
                                    selenium.Click("//img[@id='ctl00_ContenidoPagina_IMGCEN_2']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_IMGCEN2']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("IMAGEN 1", true, file);

                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{RIGHT}");
                                        selenium.Screenshot("IMAGENES", true, file);
                                        Thread.Sleep(3000);

                                    }
                                    driver2.Navigate().Refresh();
                                    Thread.Sleep(6000);

                                    //DOCUMENTOS
                                    selenium.ScrollTo("0", "990");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("DOCUMENTOS", true, file);
                                    Thread.Sleep(3000);

                                    //PDF
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgGnGestDocuCenva_ctl02_LinkButton1']/i");
                                    Thread.Sleep(60000);
                                    //VENTANA DESCARGA PDF
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("DESCARGA PDF", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin);
                                    //ABRIR PDF DESCARGADO
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/Archivo636694Cal_KRlWeb_Devolución.PDF");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(20000);
                                    Screenshot("PDF ABIERTO", true, file);

                                    //WORD
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgGnGestDocuCenva_ctl03_LinkButton1']/i");
                                    Thread.Sleep(60000);
                                    //VENTANA DESCARGA WORD
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin1);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("DESCARGA PDF", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin1);
                                    //ABRIR WORD DESCARGADO
                                    string wordPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoPLANTILLA CONEXIÓN VPN SUPERSOCIEDADES AJUSTADO (1).DOCX");
                                    Process.Start(wordPath);
                                    Thread.Sleep(40000);
                                    Screenshot("WORD ABIERTO", true, file);

                                    //IMAGEN
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgGnGestDocuCenva_ctl04_LinkButton1']/i");
                                    Thread.Sleep(60000);
                                    //VENTANA DESCARGA WORD
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    selenium.ChangeWindow(modalWin2);
                                    selenium.MaximizeWindow();
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("DESCARGA IMAGEN", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin2);
                                    //ABRIR IMAGEN DESCARGADO
                                    string imagenPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/Archivocapacidad-autodidacta-emprendedor.JPG");
                                    Process.Start(imagenPath);
                                    Thread.Sleep(40000);
                                    Screenshot("IMAGEN ABIERTA", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidarModuloDeReconocimientosEnN()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidarModuloDeReconocimientosEnN")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA

                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'N' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update gn_modul set INS_MODU = 'N' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MODULO RECONOCIMIENTO NO VISIBLE", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidarModuloDeReconocimientosEnS()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidarModuloDeReconocimientosEnS")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MODULO RECONOCIMIENTO AVTIVADO", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_ValidacionDatosBasicosInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidacionDatosBasicosInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string actualizar = $"update nm_contr set cod_Carg = 'ABC123' where COD_EMPR = 421 AND COD_EMPL = 19301797 and nro_cont = 1";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update bi_emple set box_mail= 'kactusscm@digitalware.com.co', dir_resi = 'AK 70O BIS N SUR68Q UR', tel_movi = 3143142468 where COD_EMPR = 421 AND COD_EMPL = 19301797";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                        string actualizar2 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        string actualizar3 = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar3, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update nm_contr set cod_Carg = '1' where COD_EMPR = 9 AND COD_EMPL = 507195 and nro_cont = 1";
                                        db.UpdateDeleteInsert(actualizar, database, user);
                                        string actualizar1 = $"update bi_emple set box_mail= 'kactusscm@digitalware.com.co', dir_resi = 'AK 3 20 78', tel_movi = 3143142443 where COD_EMPR = 9 AND COD_EMPL = 507195";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                        string actualizar2 = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar2, database, user);
                                        string actualizar3 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar3, database, user);
                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);

                                    //MIS INSIGNIAS
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis Insignias')]");
                                    selenium.Click("//a[contains(.,'Mis Insignias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MIs Insignias", true, file);

                                    //Datos Basicos
                                    selenium.Screenshot("Datos Basicos", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidarIndicadorActividadkbpinsig()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidarIndicadorActividadkbpinsig")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Nuestras Insignias", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_VisualizacionIconosInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_VisualizacionIconosInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    selenium.ScrollTo("0", "400");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Visualizacion Iconos", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_VisualizacionImágenesInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_VisualizacionImágenesInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {

                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 19301797 AND COD_EMPR = 421";
                                        db.UpdateDeleteInsert(actualizar1, database, user);

                                    }
                                    else
                                    {
                                        string actualizar = $"update gn_modul set INS_MODU = 'S' where ini_modu = 'RE'";
                                        db.UpdateDeleteInsert(actualizar, database, user);

                                        string actualizar1 = $"update NM_CONTR set IND_aCTI = 'A' where COD_EMPL = 507195 AND COD_EMPR = 9";
                                        db.UpdateDeleteInsert(actualizar1, database, user);
                                    }


                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Visualizacion Imagenes Insignias", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_InserciónEnkbpasins()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_InserciónEnkbpasins")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string borrar = $"delete from BP_ASINS where cod_empr = 421 and cod_empl = 55454 And cod_regi = 'B' and tip_apli = 'AC' AND COD_ROLI = 'G' AND COD_ASIG = 19301797";
                                        db.UpdateDeleteInsert(borrar, database, user);
                                    }
                                    else
                                    {
                                        string borrar = $"delete from BP_ASINS where cod_empr = 9 and cod_empl = 13 and cod_insi = '1' And cod_regi = '1'and tip_apli = 'AC' and COD_ASIG = 507195";
                                        db.UpdateDeleteInsert(borrar, database, user);
                                    }


                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("COMPORTAMIENTOS", true, file);

                                    //CONFIRMAR AUTODIDACTA

                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(4000);

                                    //CONFIRMAR
                                    selenium.ScrollTo("0", "400");
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidarCantidadMensualkbpinsigDescontando()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidarCantidadMensualkbpinsigDescontando")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null &&
                                //Datos Prueba    
                                rows["Persona"].ToString().Length != 0 && rows["Persona"].ToString() != null &&
                                rows["Mensaje"].ToString().Length != 0 && rows["Mensaje"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Persona = rows["Persona"].ToString();
                                string Mensaje = rows["Mensaje"].ToString();
                                string url2 = rows["url2"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string borrar = $"delete from BP_ASINS where cod_empr = 421 and cod_empl = 55454 And cod_regi = 'B' and tip_apli = 'AC' AND COD_ROLI = 'G' AND COD_ASIG = 19301797";
                                        db.UpdateDeleteInsert(borrar, database, user);
                                    }
                                    else
                                    {
                                        string borrar = $"delete from BP_ASINS where cod_empr = 9 and cod_empl = 13 and cod_insi = '1' And cod_regi = '1'and tip_apli = 'AC' and COD_ASIG = 507195";
                                        db.UpdateDeleteInsert(borrar, database, user);
                                    }


                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A INSIGNIAS
                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().GoToUrl(url2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INSIGNIAS", true, file);

                                    //SELECCION PERSONA
                                    selenium.Click("//span[@id='select2-ctl00_ContenidoPagina_ddlColaborador-container']");
                                    Thread.Sleep(3000);
                                    selenium.SendKeys("//input[@type='search']", Persona);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("PERSONA", true, file);
                                    selenium.Enter("//input[@type='search']");

                                    //MENSAJE
                                    selenium.Click("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']");
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KctMensaje_txtTexto']", Mensaje);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MENSAJE", true, file);

                                    selenium.ScrollTo("0", "277");

                                    //ARRASTRAR INSIGNIA

                                    IWebElement desde = driver2.FindElement(By.XPath("//div[@id='1']/div"));
                                    IWebElement hasta = driver2.FindElement(By.XPath("//div[@id='container-right']"));

                                    Actions action = new Actions(driver2);
                                    action.DragAndDrop(desde, hasta).Perform();

                                    selenium.Screenshot("INSIGNIA ARRASTRADA", true, file);
                                    Thread.Sleep(2000);

                                    //AUTODIDACTA
                                    selenium.Click("//div[@id='divComportamientos']/div/div/label/span");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("COMPORTAMIENTOS", true, file);

                                    //CONFIRMAR AUTODIDACTA

                                    selenium.Click("//div[@id='modalComportamientos']/div/div/div[2]/button[2]");
                                    Thread.Sleep(4000);

                                    //CONFIRMAR
                                    selenium.ScrollTo("0", "400");
                                    selenium.Click("//*[@id='printable']/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/button[1]");
                                    Thread.Sleep(4000);
                                    selenium.Screenshot("SATISFACTORIO", true, file);
                                    Thread.Sleep(4000);
                                    Keyboard.SendKeys("{F5}");
                                    Thread.Sleep(4000);
                                    selenium.ScrollTo("0", "200");
                                    selenium.Screenshot("Insignia Descontada", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_VisualizacionInsignias()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_VisualizacionInsignias")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //PARAMETRIZACION PREVIA

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);

                                    //MIS INSIGNIAS
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis Insignias')]");
                                    selenium.Click("//a[contains(.,'Mis Insignias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("MIs Insignias", true, file);

                                    //MIs insignias
                                    selenium.Screenshot("Mis Insignias", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidacionRankingCompañía()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidacionRankingCompañía")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["Compañia"].ToString().Length != 0 && rows["Compañia"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                //Datos Prueba    


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Compañia = rows["Compañia"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA


                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);

                                    //MIS INSIGNIAS
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Ranking Insignias')]");
                                    selenium.Click("//a[contains(.,'Ranking Insignias')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Ranking Insignias", true, file);

                                    //Compañia
                                    selenium.SelectElementByName("//select[@id='ddlTipoRanking']", Compañia);
                                    selenium.Screenshot("Ranking Compañia", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_ValidacionRankingColaboradoresAutodidacta()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidacionRankingColaboradoresAutodidacta")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["Colaboradores"].ToString().Length != 0 && rows["Colaboradores"].ToString() != null &&
                                rows["Insignia"].ToString().Length != 0 && rows["Insignia"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Colaboradores = rows["Colaboradores"].ToString();
                                string Insignia = rows["Insignia"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //PARAMETRIZACION PREVIA

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);

                                    //MIS INSIGNIAS
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Ranking Insignias')]");
                                    selenium.Click("//a[contains(.,'Ranking Insignias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ranking Insignias", true, file);

                                    //Compañia
                                    selenium.SelectElementByName("//select[@id='ddlTipoRanking']", Colaboradores);
                                    selenium.Screenshot("Ranking Colaboradores", true, file);

                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlInsig']", Insignia);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ranking Colaboradores Autodidacta", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_ValidacionRankingColaboradoresEmprendedor()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidacionRankingColaboradoresEmprendedor")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["Colaboradores"].ToString().Length != 0 && rows["Colaboradores"].ToString() != null &&
                                rows["Insignia"].ToString().Length != 0 && rows["Insignia"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Colaboradores = rows["Colaboradores"].ToString();
                                string Insignia = rows["Insignia"].ToString();

                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //PARAMETRIZACION PREVIA

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);

                                    //MIS INSIGNIAS
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Ranking Insignias')]");
                                    selenium.Click("//a[contains(.,'Ranking Insignias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ranking Insignias", true, file);

                                    //Compañia
                                    selenium.SelectElementByName("//select[@id='ddlTipoRanking']", Colaboradores);
                                    selenium.Screenshot("Ranking Colaboradores", true, file);

                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlInsig']", Insignia);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ranking Colaboradores Emprendedor", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_ValidacionRankingAreas()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_ValidacionRankingAreas")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba    
                                rows["Area"].ToString().Length != 0 && rows["Area"].ToString() != null

                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Area = rows["Area"].ToString();


                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //PARAMETRIZACION PREVIA

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Login", true, file);

                                    //MIS INSIGNIAS
                                    selenium.Click("//a[contains(.,'MI PUESTO DE TRABAJO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Ranking Insignias')]");
                                    selenium.Click("//a[contains(.,'Ranking Insignias')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ranking Insignias", true, file);

                                    //Compañia
                                    selenium.SelectElementByName("//select[@id='ddlTipoRanking']", Area);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Ranking Area Emprendedor", true, file);
                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void BP_CentroVacacionesRolColaboradorVideoImágenesAdjuntos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_CentroVacacionesRolColaboradorVideoImágenesAdjuntos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                               //Datos Prueba    
                               rows["url2"].ToString().Length != 0 && rows["url2"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string url2 = rows["url2"].ToString();
                                string Ruta1 = rows["Ruta1"].ToString();
                                string Ruta2 = rows["Ruta2"].ToString();
                                string Ruta3 = rows["Ruta3"].ToString();


                                try
                                {

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    File.Delete("C:/Users/kactusscm/Downloads/Archivoautodidacta.JPG");
                                    File.Delete("C:/Users/kactusscm/Downloads/ArchivoArchivoPrueba.PDF");
                                    File.Delete("C:/Users/kactusscm/Downloads/ArchivoPLANTILLA CONEXIÓN VPN SUPERSOCIEDADES AJUSTADO (1).DOCX");

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A CENTRO VACACIONAL
                                    selenium.Scroll("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    if (database == "ORA")
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[22]/ul[1]/li[1]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[22]/ul[1]/li[1]/a[1]");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                        selenium.Click("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                        Thread.Sleep(2000);
                                    }
                                    selenium.Screenshot("MIS CENTROS VACACIONALES", true, file);
                                    //SELECCION CENTRO
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//a/div/div/img");
                                        Thread.Sleep(3000);
                                    }
                                    else
                                    {
                                        selenium.Click("//a/div/div/img");
                                        Thread.Sleep(3000);
                                    }
                                    //SELECCIONAR VIDEO
                                    selenium.Click("//a[contains(@href, 'https://youtu.be/LcHhMXn5m-ohttps://youtu.be/LcHhMXn5m-o')]");
                                    Thread.Sleep(6000);
                                    selenium.Screenshot("VIDEO", true, file);
                                    Thread.Sleep(6000);

                                    ChromeDriver driver2 = selenium.returnDriver();
                                    driver2.Navigate().Refresh();
                                    Thread.Sleep(2000);


                                    //IMAGENES
                                    selenium.ScrollTo("0", "500");
                                    selenium.Click("//img[@id='ctl00_ContenidoPagina_IMGCEN_2']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_IMGCEN2']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("IMAGEN 1", true, file);

                                    for (int i = 0; i < 9; i++)
                                    {
                                        Keyboard.SendKeys("{RIGHT}");
                                        selenium.Screenshot("IMAGENES", true, file);
                                        Thread.Sleep(3000);

                                    }
                                    driver2.Navigate().Refresh();
                                    Thread.Sleep(6000);

                                    //DOCUMENTOS
                                    selenium.ScrollTo("0", "990");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("DOCUMENTOS", true, file);
                                    Thread.Sleep(3000);

                                    //PDF
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgGnGestDocuCenva_ctl02_LinkButton1']/i");
                                    Thread.Sleep(6000);
                                    //VENTANA DESCARGA PDF
                                    String mainWin = selenium.MainWindow();
                                    String modalWin = selenium.PopupWindow();
                                    Thread.Sleep(3000);
                                    selenium.ChangeWindow(modalWin);
                                    Thread.Sleep(5000);

                                    Screenshot("DESCARGA PDF", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin);


                                    //WORD
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgGnGestDocuCenva_ctl03_LinkButton1']/i");
                                    Thread.Sleep(6000);
                                    //VENTANA DESCARGA WORD
                                    String mainWin1 = selenium.MainWindow();
                                    String modalWin1 = selenium.PopupWindow();
                                    Thread.Sleep(3000);
                                    selenium.ChangeWindow(modalWin1);
                                    Thread.Sleep(5000);

                                    Screenshot("DESCARGA WORD", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin1);

                                    //IMAGEN
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgGnGestDocuCenva_ctl04_LinkButton1']/i");
                                    Thread.Sleep(6000);
                                    //VENTANA DESCARGA imagen
                                    String mainWin2 = selenium.MainWindow();
                                    String modalWin2 = selenium.PopupWindow();
                                    Thread.Sleep(5000);
                                    selenium.ChangeWindow(modalWin2);
                                    Thread.Sleep(4000);

                                    Screenshot("DESCARGA IMAGEN", true, file);
                                    selenium.Close();
                                    selenium.ChangeWindow(mainWin2);


                                    //ABRIR IMAGEN DESCARGADO
                                    string imagenPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/Archivoautodidacta.JPG");
                                    Process.Start(imagenPath);
                                    Thread.Sleep(6000);
                                    Screenshot("IMAGEN ABIERTA", true, file);
                                    LimpiarProcesos();
                                    //ABRIR PDF DESCARGADO
                                    string pdfPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoArchivoPrueba.PDF");
                                    Process.Start(pdfPath);
                                    Thread.Sleep(6000);
                                    Screenshot("PDF ABIERTO", true, file);
                                    LimpiarProcesos();
                                    //ABRIR WORD DESCARGADO
                                    string wordPath = Path.Combine(Application.StartupPath, "C:/Users/kactusscm/Downloads/ArchivoPLANTILLA CONEXIÓN VPN SUPERSOCIEDADES AJUSTADO (1).DOCX");
                                    Process.Start(wordPath);
                                    Thread.Sleep(6000);
                                    Screenshot("WORD ABIERTO", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    LimpiarProcesos();
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void BP_CentrosVacacionalesFormaPagoPrestamosAutorizaciónJefeEspecificoJefedelJefe()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.BP_CentrosVacacionalesFormaPagoPrestamosAutorizaciónJefeEspecificoJefedelJefe")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["JefeUser1"].ToString().Length != 0 && rows["JefeUser1"].ToString() != null &&
                                rows["JefePass1"].ToString().Length != 0 && rows["JefePass1"].ToString() != null &&
                                rows["JefeUser2"].ToString().Length != 0 && rows["JefeUser2"].ToString() != null &&
                                rows["JefePass2"].ToString().Length != 0 && rows["JefePass2"].ToString() != null &&
                                rows["FechaInicial"].ToString().Length != 0 && rows["FechaInicial"].ToString() != null &&
                                rows["FechaFin"].ToString().Length != 0 && rows["FechaFin"].ToString() != null &&
                                rows["FormaPago"].ToString().Length != 0 && rows["FormaPago"].ToString() != null &&
                                rows["FamiliarID"].ToString().Length != 0 && rows["FamiliarID"].ToString() != null &&
                                rows["FamiliarNombre"].ToString().Length != 0 && rows["FamiliarNombre"].ToString() != null &&
                                rows["FamiliarApellido"].ToString().Length != 0 && rows["FamiliarApellido"].ToString() != null &&
                                rows["FamiliarFecha"].ToString().Length != 0 && rows["FamiliarFecha"].ToString() != null &&
                                rows["Prestamo"].ToString().Length != 0 && rows["Prestamo"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null
                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string JefeUser1 = rows["JefeUser1"].ToString();
                                string JefePass1 = rows["JefePass1"].ToString();
                                string JefeUser2 = rows["JefeUser2"].ToString();
                                string JefePass2 = rows["JefePass2"].ToString();
                                string FechaInicial = rows["FechaInicial"].ToString();
                                string FechaFin = rows["FechaFin"].ToString();
                                string FormaPago = rows["FormaPago"].ToString();
                                string FamiliarID = rows["FamiliarID"].ToString();
                                string FamiliarNombre = rows["FamiliarNombre"].ToString();
                                string FamiliarApellido = rows["FamiliarApellido"].ToString();
                                string FamiliarFecha = rows["FamiliarFecha"].ToString();
                                string Prestamo = rows["Prestamo"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();

                                try
                                {

                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               
                                    //PARAMETRIZACION 

                                    string familiar = $"delete from BP_DSCEV where ACT_USUA='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(familiar, database, user);

                                    string centro = $"delete from bp_cenva where COD_EMPR= 9 AND COD_EMPL = '{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(centro, database, user);

                                    string empleado = $"delete from nm_soltr where COD_RESP ='{EmpleadoUser}'";
                                    db.UpdateDeleteInsert(empleado, database, user);

                                    string jefe1 = $"delete from nm_soltr where COD_RESP = '{JefeUser1}' AND TIP_APLI='Q'";
                                    db.UpdateDeleteInsert(jefe1, database, user);

                                    string jefe2 = $"delete from nm_soltr where COD_RESP = '{JefeUser2}' AND TIP_APLI='Q'";
                                    db.UpdateDeleteInsert(jefe2, database, user);


                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A CENTRO VACACIONAL
                                    selenium.Scroll("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    
                                    if (database == "ORA")
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[22]/ul[1]/li[1]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[22]/ul[1]/li[1]/a[1]");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                        selenium.Click("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                        Thread.Sleep(2000);
                                    }
                                    selenium.Screenshot("MIS CENTROS VACACIONALES", true, file);
                                    //SELECCION CENTRO
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//a/div/div/img");
                                        Thread.Sleep(10000);
                                        selenium.Screenshot("Solicitudes Centros Vacacionales", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//a/div/div/img");
                                        Thread.Sleep(10000);
                                        selenium.Screenshot("Solicitudes Centros Vacacionales", true, file);
                                    }

                                    //FECHAS
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechIni_txtFecha']", FechaInicial);
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Fecha Inicial", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechFin_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechFin_txtFecha']", FechaFin);
                                    selenium.Screenshot("Fecha Final", true, file);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    Thread.Sleep(10000);
                                    //CHECK HACE PARTE GRUPO
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_rblUstHues_0']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Parte Acompañantes", true, file);
                                    //FAMILIAR
                                    selenium.Click("//div[@id='ctl00_ContenidoPagina_ddlFamil_sl']/div");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_ddlFamil_0']");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Seleccionar Familiar", true, file);
                                    selenium.Click("//input[@value='Aceptar']");
                                    Thread.Sleep(3000);
                                    //FORMA PAGO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_rdbforpago']",FormaPago);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Forma Pago Préstamo", true, file);
                                    //OBSERVACIONES
                                    selenium.SendKeys("//textarea[@id='ctl00_ContenidoPagina_KCtrlTxtValObser_txtTexto']","PRUEBAS CENTROS VACAIONALES");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Observaciones", true, file);
                                    //TOTAL A PAGAR
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_btnValCan']/span");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Total Pagar", true, file);
                                    //ADICIONAR ACOMPAÑANTES
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_OtroAcomp']");
                                    Thread.Sleep(3000);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_OtroAcomp']");
                                    Thread.Sleep(3000);
                                    //ID ACOMPAÑANTE
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtidAcomp']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtidAcomp']", FamiliarID);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("ID Acompañante", true, file);
                                    //NOMBRE ACOMPAÑANTE
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtNombre']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtNombre']", FamiliarNombre);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Nombre Acompañante", true, file);
                                    //APELLIDO ACOMPAÑANTE
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_txtApellido']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_txtApellido']", FamiliarApellido);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Apellido Acompañante", true, file);
                                    //FECHA ACOMPAÑANTE
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFecAcomp_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFecAcomp_txtFecha']", FamiliarFecha);
                                    Thread.Sleep(3000);
                                    selenium.Click("//div[@id='ctl00_pBotones']/div");
                                    selenium.Screenshot("Fecha Nacimiento Acompañante", true, file);
                                    //GUARDAR ACOMPAÑANTE
                                    selenium.Click("//a[contains(text(),'Guardar acompañante')]");
                                    Thread.Sleep(3000);
                                    selenium.ScrollTo("0", "1200");
                                    selenium.Screenshot("Acompañante Agregado", true, file);
                                    //GUARDAR
                                    selenium.Scroll("//a[contains(text(),'Aceptar')]");
                                    selenium.Click("//a[contains(text(),'Aceptar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Terminos y Condiciones", true, file);
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_btnSi']");
                                    Thread.Sleep(5000);
                                    selenium.SelectElementByName("//select[@id='ctl00_ContentPopapModel_ddlNomPres']", Prestamo);
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Prestamo", true, file);
                                    selenium.Click("(//a[contains(text(),'Aceptar')])[2]");
                                    Thread.Sleep(10000);
                                    selenium.Screenshot("Registro exitoso", true, file);
                                    selenium.Close();

                                    //--------------------------------------APROBACION ESPECIFICO------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, JefeUser1, JefePass1, url, file);
                                    Thread.Sleep(2000);

                                    //SOLICITUDES CENTROS VACACIONALES
                                    selenium.Click("//button[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Líder", true, file);
                                    selenium.Scroll("//a[contains(.,'CENTROS VACACIONALES')]");
                                    selenium.Click("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Solicitudes Centros Vacacionales')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Solicitudes Centros Vacacionales por aprobar", true, file);
                                    Thread.Sleep(3000);
                                    //DETALLE   
                                    selenium.Click("//table[@id='tableCentroVaca']/tbody/tr/td[9]/a/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Solicitud Centro Vacacional a aprobar", true, file);
                                    //APROBAR
                                    selenium.Scroll("//a[contains(text(),'Aprobar')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Aprobar", true, file);
                                    selenium.Click("//a[contains(text(),'Aprobar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Solicitud Aprobada", true, file);
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //------------------------------------------APROBADOR JEFE DEJ JEFE-------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, JefeUser2, JefePass2, url, file);
                                    Thread.Sleep(2000);

                                    //SOLICITUDES CENTROS VACACIONALES
                                    selenium.Click("//button[contains(.,'Rol Lider')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Rol Líder", true, file);
                                    selenium.Scroll("//a[contains(.,'CENTROS VACACIONALES')]");
                                    selenium.Click("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Solicitudes Centros Vacacionales')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Solicitudes Centros Vacacionales por aprobar", true, file);
                                    Thread.Sleep(3000);
                                    //DETALLE   
                                    selenium.Click("//table[@id='tableCentroVaca']/tbody/tr/td[9]/a/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Solicitud Centro Vacacional a aprobar", true, file);
                                    //APROBAR
                                    selenium.Scroll("//a[contains(text(),'Aprobar')]");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Aprobar", true, file);
                                    selenium.Click("//a[contains(text(),'Aprobar')]");
                                    Thread.Sleep(5000);
                                    selenium.Screenshot("Solicitud Aprobada", true, file);
                                    selenium.Click("//button[contains(.,'Cerrar')]");
                                    Thread.Sleep(3000);
                                    selenium.Close();

                                    //------------------------VERIFICAR ESTADO APROBADO SOLICITUD----------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A CENTRO VACACIONAL
                                    selenium.Scroll("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'CENTROS VACACIONALES')]");
                                    Thread.Sleep(2000);

                                    if (database == "ORA")
                                    {
                                        selenium.Scroll("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[22]/ul[1]/li[1]/a[1]");
                                        selenium.Click("//*[@id='MenuContex']/div[2]/div[1]/ul[1]/li[22]/ul[1]/li[1]/a[1]");
                                        Thread.Sleep(2000);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                        selenium.Click("//a[contains(@href, 'frmBpCenvacaL.aspx')]");
                                        Thread.Sleep(2000);
                                    }
                                    selenium.Screenshot("Solicitud Aprobada", true, file);
                                    selenium.Close();

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    LimpiarProcesos();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
        [TestMethod]
        public void FD_FormaciónDesarrolloEvaluaciónCursos()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloEvaluaciónCursos")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba
                                rows["Respuesta1"].ToString().Length != 0 && rows["Respuesta1"].ToString() != null &&
                                rows["Respuesta2"].ToString().Length != 0 && rows["Respuesta2"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Respuesta1 = rows["Respuesta1"].ToString();
                                string Respuesta2 = rows["Respuesta2"].ToString();



                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set cod_carg = 202814, cod_ccos = 0 where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);
                                        string BorrarEvaluacion = $"delete from fd_licev where cod_empl= 51880161";
                                        db.UpdateDeleteInsert(BorrarEvaluacion, database, user);


                                    }
                                    else
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);
                                        string Actualizar2 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 4 and nro_cont = 4 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar2, database, user);
                                        string BorrarEvaluacion = $"delete from fd_licev where cod_empl= 123";
                                        db.UpdateDeleteInsert(BorrarEvaluacion, database, user);
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS/INSCRIPCION
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Evaluación de Cursos')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A EVALUACION CURSOS", true, file);

                                    //DETALLE
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdPlcur_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle", true, file);

                                    //DETALLE CURSO

                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdDplcu_ctl03_LinkButton1']/i");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Detalle curso", true, file);

                                    //ACEPTAR EVALUACION
                                    selenium.Click(" //input[@id='ctl00_ContentPopapModel_Aceptar']");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Confirmar", true, file);

                                    //RESPUESTA 1
                                    selenium.SelectElementByName("//table[@id='ctl00_ContentPopapModel_dtgPreguntas']/tbody/tr[2]/td[4]/select", Respuesta1);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Respuesta 1", true, file);
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_dtgPreguntas_ctl02_SiguientePX']");
                                    Thread.Sleep(2000);


                                    selenium.SelectElementByName("//select[@id='ctl00_ContentPopapModel_dtgPreguntas_ctl02_ddlRespuestas']", Respuesta2);
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("Respuesta 2", true, file);
                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_dtgPreguntas_ctl02_SiguientePX']");
                                    Thread.Sleep(2000);


                                    selenium.Click("//input[@id='ctl00_ContentPopapModel_AceptarFin']");
                                    Thread.Sleep(2000);
                                    selenium.ScrollTo("0", "900");
                                    selenium.Screenshot("Resultados", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void FD_FormaciónDesarrolloHistorialCapacitaciones()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloHistorialCapacitaciones")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba
                                rows["Fecha1"].ToString().Length != 0 && rows["Fecha1"].ToString() != null &&
                                rows["Fecha2"].ToString().Length != 0 && rows["Fecha2"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Fecha1 = rows["Fecha1"].ToString();
                                string Fecha2 = rows["Fecha2"].ToString();



                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    
                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set cod_carg = 202814, cod_ccos = 0 where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);

                                    }
                                    else
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);
                                        string Actualizar2 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 4 and nro_cont = 4 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar2, database, user);

                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);
                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS/INSCRIPCION
                                    selenium.Click("//a[contains(.,'MIS CURSOS')]");
                                    Thread.Sleep(2000);
                                    selenium.Click("//a[contains(.,'Historial de Cursos-Capacitaciones')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("HISTORIAL CURSOS", true, file);

                                    //FECHA1
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechaIni_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechaIni_txtFecha']", Fecha1);
                                    Thread.Sleep(2000);

                                    //FECHA 2
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_KCtrlFechaFin_txtFecha']");
                                    selenium.SendKeys("//input[@id='ctl00_ContenidoPagina_KCtrlFechaFin_txtFecha']", Fecha2);
                                    Thread.Sleep(2000);

                                    //ACEPTAR
                                    selenium.Screenshot("FECHAS", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAceptar']");
                                    Thread.Sleep(2000);

                                    //HISTORICO
                                    selenium.Screenshot("REGISTRO HISTORIAL", true, file);
                                    Thread.Sleep(2000);


                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void FD_FormaciónDesarrolloNecesidadesFormaciónAprobar()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloNecesidadesFormaciónAprobar")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba
                                rows["JefeUser"].ToString().Length != 0 && rows["JefeUser"].ToString() != null &&
                                rows["JefePass"].ToString().Length != 0 && rows["JefePass"].ToString() != null &&
                                 rows["Registro"].ToString().Length != 0 && rows["Registro"].ToString() != null &&
                                rows["Requerimiento"].ToString().Length != 0 && rows["Requerimiento"].ToString() != null &&
                                rows["Especificacion"].ToString().Length != 0 && rows["Especificacion"].ToString() != null &&
                                rows["Curso"].ToString().Length != 0 && rows["Curso"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string JefeUser = rows["JefeUser"].ToString();
                                string JefePass = rows["JefePass"].ToString();
                                string Registro = rows["Registro"].ToString();
                                string Requerimiento = rows["Requerimiento"].ToString();
                                string Especificacion = rows["Especificacion"].ToString();
                                string Curso = rows["Curso"].ToString();



                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set ind_acti ='A' Where cod_empl = 41416618 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);
                                        string Actualizar2 = $"Update nm_contr set cod_frep = 41416618 where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar2, database, user);
                                        string Actualizar3 = $"Update nm_contr set cod_carg = 202814, cod_ccos = 0 where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar3, database, user);
                                        string Actualizar4 = $"Update nm_contr set cod_carg = 1001, cod_ccos = 121 where cod_empl = 41416618 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar4, database, user);

                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);
                                        string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarNecesidad, database, user);
                                        string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    }
                                    else
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set ind_acti ='A' Where cod_empl = 124 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);
                                        string Actualizar2 = $"Update nm_contr set cod_frep = 124 where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar2, database, user);
                                        string Actualizar3 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar3, database, user);
                                        string Actualizar4 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 4 and nro_cont = 4 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar4, database, user);

                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);
                                        string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarNecesidad, database, user);
                                        string eliminarSolicitud1 = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{JefeUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud1, database, user);

                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS/NECESIDADES FORMACION
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis necesidades de Formación')]");
                                    selenium.Click("//a[contains(.,'Mis necesidades de Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A NECESIDADES DE FORMACION", true, file);

                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(3000);

                                    //REGISTRO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRegi']", Registro);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro", true, file);
                                    //REQUERIMIENTO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRequ']", Requerimiento);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Requerimiento", true, file);
                                    //ESPECIFICACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomEspe']", Especificacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Especificacion", true, file);
                                    //CURSOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomCurs']", Curso);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Curso", true, file);
                                    //APLICAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(5000);

                                    //ACEPTAR ALERTA
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(3000);

                                    //VERIFICAR REGISTRO
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis necesidades de Formación')]");
                                    selenium.Click("//a[contains(.,'Mis necesidades de Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("REGISTRO EXITOSO", true, file);

                                    selenium.Close();

                                    //-----------------------------------------lider----------------------------------------------------------------
                                    //LOGIN
                                    selenium.LoginApps(app, JefeUser, JefePass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A ROL LIDER
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL LIDER", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'Lider')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("LIDER", true, file);
                                    }

                                    //INGRESO A FORMACION YU DESARROLLO
                                    selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Aprobación de N. Formación')]");
                                    selenium.Click("//a[contains(.,'Aprobación de N. Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A FORMACION Y DESARRLLO", true, file);

                                    //REGISTRO
                                    selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdNeforAJ_ctl03_LinkButton1']/i");
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro", true, file);

                                    //APROBAR
                                    selenium.Scroll("//input[@id='ctl00_ContenidoPagina_btnAprobar']");
                                    selenium.Screenshot("Aprobar", true, file);
                                    selenium.Click("//input[@id='ctl00_ContenidoPagina_btnAprobar']");
                                    Thread.Sleep(3000);

                                    //ACEPTAR ALERTA
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(3000);

                                    //ACEPTAR ALERTA
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(3000);

                                    selenium.Close();

                                    //---------------------Colaborador-------------------------------------------------

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS/NECESIDADES FORMACION
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis necesidades de Formación')]");
                                    selenium.Click("//a[contains(.,'Mis necesidades de Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("NECESIDAD APORBADA", true, file);

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }

        [TestMethod]
        public void FD_FormaciónDesarrolloNecesidadesFormaciónAprobarGH()
        {

            List<string> errorsTest = new List<string>();
            List<string> errors = new List<string>();
            List<string> errorMessages = new List<string>();
            bool bandera = false;
            string enviroment = (Environment.MachineName);
            string[] auxtable = enviroment.Split('-');
            string TableOrder = "";
            if (auxtable.Length > 1)
            {
                TableOrder = (enviroment.Replace("-", "_")).ToUpper();
            }
            else
            {
                TableOrder = enviroment.ToUpper();
            }
            //TableOrder = "ktes1";

            DataSet OrderExecutionCase = SqlAdapter.SelectOrderExecution("T", TableOrder);
            int NumCasAgen = OrderExecutionCase.Tables[0].Rows.Count;
            if (NumCasAgen < 1)
            {
                errorMessages.Add("No hay casos en el agendamiento");
            }

            foreach (DataRow rowsi in OrderExecutionCase.Tables[0].Rows)
            {
                string plans = rowsi["plans"].ToString();
                string suite = rowsi["suite"].ToString();
                string CaseId = rowsi["CaseId"].ToString();
                string orders = rowsi["orders"].ToString();
                string states = rowsi["states"].ToString();
                string methodname = rowsi["methodname"].ToString();
                string CountDes = rowsi["CountDes"].ToString();

                if (methodname.Replace(" ", string.Empty) == "Web_Kactus_Test.SelfService.FD_FormaciónDesarrolloNecesidadesFormaciónAprobarGH")
                {
                    DataSet sta = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                    string endstatus = null;
                    foreach (DataRow rowsta in sta.Tables[0].Rows)
                    {
                        endstatus = rowsta["states"].ToString();
                    }
                    if (endstatus == "True")
                    {

                        TFSData GetCasen = new TFSData(CaseId);
                        DataSet DataCase = GetCasen.GetParams();

                        foreach (DataRow rows in DataCase.Tables[0].Rows)
                        {
                            int velocidad = 10;

                            //Playback.PlaybackSettings.DelayBetweenActions = velocidad;

                            if (
                                //Datos Login
                                rows["EmpleadoUser"].ToString().Length != 0 && rows["EmpleadoUser"].ToString() != null &&
                                rows["EmpleadoPass"].ToString().Length != 0 && rows["EmpleadoPass"].ToString() != null &&
                                rows["database"].ToString().Length != 0 && rows["database"].ToString() != null &&
                                rows["user"].ToString().Length != 0 && rows["user"].ToString() != null &&
                                rows["url"].ToString().Length != 0 && rows["url"].ToString() != null &&
                                //Datos Prueba
                                rows["Registro"].ToString().Length != 0 && rows["Registro"].ToString() != null &&
                                rows["Requerimiento"].ToString().Length != 0 && rows["Requerimiento"].ToString() != null &&
                                rows["Especificacion"].ToString().Length != 0 && rows["Especificacion"].ToString() != null &&
                                rows["Curso"].ToString().Length != 0 && rows["Curso"].ToString() != null


                                )
                            {
                                string EmpleadoUser = rows["EmpleadoUser"].ToString();
                                string EmpleadoPass = rows["EmpleadoPass"].ToString();
                                string database = rows["database"].ToString();
                                string user = rows["user"].ToString();
                                string url = rows["url"].ToString();
                                string Registro = rows["Registro"].ToString();
                                string Requerimiento = rows["Requerimiento"].ToString();
                                string Especificacion = rows["Especificacion"].ToString();
                                string Curso = rows["Curso"].ToString();



                                try
                                {
                                    if (url.ToLower() == "http://dwtfskscm/selfservicetestnewverauto/".ToLower())
                                    {
                                        database = "SQL";
                                    }
                                    else
                                    {
                                        database = "ORA";
                                    }
                                    string[] split = methodname.Split('.');
                                    string nombre = split[2];
                                    string[] split1 = nombre.Split('_');
                                    string modulo = split1[0];

                                    //CREACION DOCUMENTO
                                    string file = fv.CrearDocumentoWordDinamico(app, database, modulo, nombre + CaseId);

                                    //PARAMETRIZACION PREVIA
                                    if (database == "ORA")
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set ind_acti ='A' Where cod_empl = 41416618 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);
                                        string Actualizar2 = $"Update nm_contr set cod_frep = 41416618 where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar2, database, user);
                                        string Actualizar3 = $"Update nm_contr set cod_carg = 202814, cod_ccos = 0 where cod_empl = 51880161 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar3, database, user);
                                        string Actualizar4 = $"Update nm_contr set cod_carg = 1001, cod_ccos = 121 where cod_empl = 41416618 and nro_cont = 1 and cod_empr = 421";
                                        db.UpdateDeleteInsert(Actualizar4, database, user);

                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);
                                        string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarNecesidad, database, user);


                                    }
                                    else
                                    {
                                        string Actualizar = $"Update nm_contr set ind_acti ='A' Where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar, database, user);
                                        string Actualizar1 = $"Update nm_contr set ind_acti ='A' Where cod_empl = 124 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar1, database, user);
                                        string Actualizar2 = $"Update nm_contr set cod_frep = 124 where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar2, database, user);
                                        string Actualizar3 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 123 and nro_cont = 2 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar3, database, user);
                                        string Actualizar4 = $"Update nm_contr set cod_carg = 31, cod_ccos = 10 where cod_empl = 4 and nro_cont = 4 and cod_empr = 9";
                                        db.UpdateDeleteInsert(Actualizar4, database, user);

                                        string eliminarSolicitud = $"Delete from NM_SOLTR where tip_apli ='F' AND COD_RESP ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarSolicitud, database, user);
                                        string eliminarNecesidad = $"Delete from FD_NEFOR where COD_EMPL ='{EmpleadoUser}'";
                                        db.UpdateDeleteInsert(eliminarNecesidad, database, user);


                                    }

                                    //-------------------------------------------------------INICIO PRUEBA---------------------------------------------------------------------------------                               

                                    //LOGIN
                                    selenium.LoginApps(app, EmpleadoUser, EmpleadoPass, url, file);
                                    Thread.Sleep(2000);

                                    //INGRESO A MIS CURSOS/NECESIDADES FORMACION
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis necesidades de Formación')]");
                                    selenium.Click("//a[contains(.,'Mis necesidades de Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("INGRESO A NECESIDADES DE FORMACION", true, file);

                                    //NUEVO
                                    selenium.Click("//a[@id='ctl00_btnNuevo']");
                                    Thread.Sleep(3000);

                                    //REGISTRO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRegi']", Registro);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Registro", true, file);
                                    //REQUERIMIENTO
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomRequ']", Requerimiento);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Requerimiento", true, file);
                                    //ESPECIFICACION
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomEspe']", Especificacion);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Especificacion", true, file);
                                    //CURSOS
                                    selenium.SelectElementByName("//select[@id='ctl00_ContenidoPagina_ddlNomCurs']", Curso);
                                    Thread.Sleep(3000);
                                    selenium.Screenshot("Curso", true, file);
                                    //APLICAR
                                    selenium.Click("//a[@id='btnGuardar']");
                                    Thread.Sleep(5000);

                                    //ACEPTAR ALERTA
                                    Keyboard.SendKeys("{ENTER}");
                                    Thread.Sleep(3000);

                                    //VERIFICAR REGISTRO
                                    selenium.Click("//a[contains(.,'MIS SOLICITUDES')]");
                                    Thread.Sleep(2000);
                                    selenium.Scroll("//a[contains(.,'Mis necesidades de Formación')]");
                                    selenium.Click("//a[contains(.,'Mis necesidades de Formación')]");
                                    Thread.Sleep(2000);
                                    selenium.Screenshot("REGISTRO EXITOSO", true, file);



                                    //-----------------------------------------lider----------------------------------------------------------------


                                    //INGRESO A ROL RRHH
                                    if (database == "SQL")
                                    {
                                        selenium.Click("//span[contains(.,'Rol RRHH')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("ROL RRHH", true, file);
                                    }
                                    else
                                    {
                                        selenium.Click("//span[contains(.,'GESTION HUMANA')]");
                                        Thread.Sleep(4000);
                                        selenium.Screenshot("Gestion Humana", true, file);
                                    }

                                    //INGRESO A FORMACION YU DESARROLLO
                                    selenium.Click("//a[contains(.,'FORMACIÓN Y DESARROLLO')]");
                                    Thread.Sleep(2000);
                                    if (database == "SQL")
                                    {
                                        selenium.Scroll("//a[contains(.,'Solicitudes de Formación Pendientes por Aprobar')]");
                                        selenium.Click("//a[contains(.,'Solicitudes de Formación Pendientes por Aprobar')]");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("INGRESO A FORMACION Y DESARRLLO", true, file);

                                        //REGISTRO
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdNefor_ctl03_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Registro", true, file);

                                        //DETALLE
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdNefor_ctl02_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Solicitud por aprobar", true, file);
                                    }
                                    else
                                    {
                                        selenium.Scroll("//li[5]/ul/li[4]/a");
                                        selenium.Click("//li[5]/ul/li[4]/a");
                                        Thread.Sleep(2000);
                                        selenium.Screenshot("INGRESO A FORMACION Y DESARRLLO", true, file);

                                        //REGISTRO
                                        selenium.Scroll("//a[@id='ctl00_ContenidoPagina_dtgFdNefor_ctl10_LinkButton1']/i");
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdNefor_ctl10_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Registro", true, file);

                                        //DETALLE
                                        selenium.Click("//a[@id='ctl00_ContenidoPagina_dtgFdNefor_ctl02_LinkButton1']/i");
                                        Thread.Sleep(3000);
                                        selenium.Screenshot("Solicitud por aprobar", true, file);
                                    }

                                    fv.ConvertWordToPDF(file, database);
                                    Thread.Sleep(5000);
                                    selenium.Close();

                                    if (errorsTest.Count > 0)
                                    {
                                        var separator = string.Format("{0}{0}", Environment.NewLine);
                                        string errorMessageString = string.Join(separator, errorsTest);

                                        Assert.Inconclusive(string.Format("Los errores presentados en la prueba son:{0}{1}",
                                                        Environment.NewLine, errorMessageString));
                                    }
                                    Thread.Sleep(3000);
                                    bandera = true;

                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();
                                        int StCount = Int32.Parse(SthCount);

                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    break;
                                }
                                catch (Exception e)
                                {
                                    Thread.Sleep(500);
                                    bandera = true;
                                    DataSet Sth = SqlAdapter.SelectOrderExecution("P", TableOrder, plans, suite, CaseId);
                                    string SthCount = null;
                                    foreach (DataRow rowsta in Sth.Tables[0].Rows)
                                    {
                                        SthCount = rowsta["CountDes"].ToString();

                                        int StCount = Int32.Parse(SthCount);
                                        if (StCount > 0)
                                        {
                                            int NewCount = StCount - 1;
                                            DataSet DisCount = SqlAdapter.SelectOrderExecution("UP", TableOrder, plans, suite, CaseId, NewCount.ToString());
                                            if (NewCount == 0)
                                            {
                                                DataSet UdpRes = SqlAdapter.SelectOrderExecution("U", TableOrder, plans, suite, CaseId);
                                                break;
                                            }
                                        }
                                    }
                                    Assert.Fail(CaseId + " ::::::" + e.ToString());
                                    break;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    errorMessages.Add(methodname.Replace(" ", string.Empty) + "::::::" + "MSG: El nombre de la automatizacion no corresponde");
                }
            }
            if (bandera == false)
            {
                if (errorMessages.Count > 0)
                {
                    var separator = string.Format("{0}{0}", Environment.NewLine);
                    string errorMessageString = string.Join(separator, errorMessages);

                    Assert.Inconclusive(string.Format("Las condiciones de ejecucion del caso son:{0}{1}",
                                 Environment.NewLine, errorMessageString));
                }
            }

        }
    }
}

